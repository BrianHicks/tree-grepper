---
source: src/main.rs
expression: "call(&[\"tree-grepper\", \"-q\", \"cpp\", \"(_)\", \"--format=pretty-json\", \"--sort\",\n       \"--no-gitignore\", \"vendor/tree-sitter-cpp/examples\"])"

---
[
  {
    "file": "vendor/tree-sitter-cpp/examples/marker-index.h",
    "file_type": "cpp",
    "matches": [
      {
        "kind": "translation_unit",
        "name": "query",
        "text": "#ifndef MARKER_INDEX_H_\n#define MARKER_INDEX_H_\n\n#include <random>\n#include <unordered_map>\n#include \"flat_set.h\"\n#include \"point.h\"\n#include \"range.h\"\n\nclass MarkerIndex {\npublic:\n  using MarkerId = unsigned;\n  using MarkerIdSet = flat_set<MarkerId>;\n\n  struct SpliceResult {\n    flat_set<MarkerId> touch;\n    flat_set<MarkerId> inside;\n    flat_set<MarkerId> overlap;\n    flat_set<MarkerId> surround;\n  };\n\n  struct Boundary {\n    Point position;\n    flat_set<MarkerId> starting;\n    flat_set<MarkerId> ending;\n  };\n\n  struct BoundaryQueryResult {\n    std::vector<MarkerId> containing_start;\n    std::vector<Boundary> boundaries;\n  };\n\n  MarkerIndex(unsigned seed = 0u);\n  ~MarkerIndex();\n  int generate_random_number();\n  void insert(MarkerId id, Point start, Point end);\n  void set_exclusive(MarkerId id, bool exclusive);\n  void remove(MarkerId id);\n  bool has(MarkerId id);\n  SpliceResult splice(Point start, Point old_extent, Point new_extent);\n  Point get_start(MarkerId id) const;\n  Point get_end(MarkerId id) const;\n  Range get_range(MarkerId id) const;\n\n  int compare(MarkerId id1, MarkerId id2) const;\n  flat_set<MarkerId> find_intersecting(Point start, Point end);\n  flat_set<MarkerId> find_containing(Point start, Point end);\n  flat_set<MarkerId> find_contained_in(Point start, Point end);\n  flat_set<MarkerId> find_starting_in(Point start, Point end);\n  flat_set<MarkerId> find_starting_at(Point position);\n  flat_set<MarkerId> find_ending_in(Point start, Point end);\n  flat_set<MarkerId> find_ending_at(Point position);\n  BoundaryQueryResult find_boundaries_after(Point start, size_t max_count);\n\n  std::unordered_map<MarkerId, Range> dump();\n\nprivate:\n  friend class Iterator;\n\n  struct Node {\n    Node *parent;\n    Node *left;\n    Node *right;\n    Point left_extent;\n    flat_set<MarkerId> left_marker_ids;\n    flat_set<MarkerId> right_marker_ids;\n    flat_set<MarkerId> start_marker_ids;\n    flat_set<MarkerId> end_marker_ids;\n    int priority;\n\n    Node(Node *parent, Point left_extent);\n    bool is_marker_endpoint();\n  };\n\n  class Iterator {\n  public:\n    Iterator(MarkerIndex *marker_index);\n    void reset();\n    Node* insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_splice_boundary(const Point &position, bool is_insertion_end);\n    void find_intersecting(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_contained_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_starting_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_ending_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_boundaries_after(Point start, size_t max_count, BoundaryQueryResult *result);\n    std::unordered_map<MarkerId, Range> dump();\n\n  private:\n    void ascend();\n    void descend_left();\n    void descend_right();\n    void move_to_successor();\n    void seek_to_first_node_greater_than_or_equal_to(const Point &position);\n    void mark_right(const MarkerId &id, const Point &start_position, const Point &end_position);\n    void mark_left(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_left_child(const Point &position);\n    Node* insert_right_child(const Point &position);\n    void check_intersection(const Point &start, const Point &end, flat_set<MarkerId> *results);\n    void cache_node_position() const;\n\n    MarkerIndex *marker_index;\n    Node *current_node;\n    Point current_node_position;\n    Point left_ancestor_position;\n    Point right_ancestor_position;\n    std::vector<Point> left_ancestor_position_stack;\n    std::vector<Point> right_ancestor_position_stack;\n  };\n\n  Point get_node_position(const Node *node) const;\n  void delete_node(Node *node);\n  void delete_subtree(Node *node);\n  void bubble_node_up(Node *node);\n  void bubble_node_down(Node *node);\n  void rotate_node_left(Node *pivot);\n  void rotate_node_right(Node *pivot);\n  void get_starting_and_ending_markers_within_subtree(const Node *node, flat_set<MarkerId> *starting, flat_set<MarkerId> *ending);\n  void populate_splice_invalidation_sets(SpliceResult *invalidated, const Node *start_node, const Node *end_node, const flat_set<MarkerId> &starting_inside_splice, const flat_set<MarkerId> &ending_inside_splice);\n\n  std::default_random_engine random_engine;\n  std::uniform_int_distribution<int> random_distribution;\n  Node *root;\n  std::unordered_map<MarkerId, Node*> start_nodes_by_id;\n  std::unordered_map<MarkerId, Node*> end_nodes_by_id;\n  Iterator iterator;\n  flat_set<MarkerId> exclusive_marker_ids;\n  mutable std::unordered_map<const Node*, Point> node_position_cache;\n};\n\n#endif // MARKER_INDEX_H_\n",
        "start": {
          "row": 1,
          "column": 1
        },
        "end": {
          "row": 132,
          "column": 1
        }
      },
      {
        "kind": "preproc_ifdef",
        "name": "query",
        "text": "#ifndef MARKER_INDEX_H_\n#define MARKER_INDEX_H_\n\n#include <random>\n#include <unordered_map>\n#include \"flat_set.h\"\n#include \"point.h\"\n#include \"range.h\"\n\nclass MarkerIndex {\npublic:\n  using MarkerId = unsigned;\n  using MarkerIdSet = flat_set<MarkerId>;\n\n  struct SpliceResult {\n    flat_set<MarkerId> touch;\n    flat_set<MarkerId> inside;\n    flat_set<MarkerId> overlap;\n    flat_set<MarkerId> surround;\n  };\n\n  struct Boundary {\n    Point position;\n    flat_set<MarkerId> starting;\n    flat_set<MarkerId> ending;\n  };\n\n  struct BoundaryQueryResult {\n    std::vector<MarkerId> containing_start;\n    std::vector<Boundary> boundaries;\n  };\n\n  MarkerIndex(unsigned seed = 0u);\n  ~MarkerIndex();\n  int generate_random_number();\n  void insert(MarkerId id, Point start, Point end);\n  void set_exclusive(MarkerId id, bool exclusive);\n  void remove(MarkerId id);\n  bool has(MarkerId id);\n  SpliceResult splice(Point start, Point old_extent, Point new_extent);\n  Point get_start(MarkerId id) const;\n  Point get_end(MarkerId id) const;\n  Range get_range(MarkerId id) const;\n\n  int compare(MarkerId id1, MarkerId id2) const;\n  flat_set<MarkerId> find_intersecting(Point start, Point end);\n  flat_set<MarkerId> find_containing(Point start, Point end);\n  flat_set<MarkerId> find_contained_in(Point start, Point end);\n  flat_set<MarkerId> find_starting_in(Point start, Point end);\n  flat_set<MarkerId> find_starting_at(Point position);\n  flat_set<MarkerId> find_ending_in(Point start, Point end);\n  flat_set<MarkerId> find_ending_at(Point position);\n  BoundaryQueryResult find_boundaries_after(Point start, size_t max_count);\n\n  std::unordered_map<MarkerId, Range> dump();\n\nprivate:\n  friend class Iterator;\n\n  struct Node {\n    Node *parent;\n    Node *left;\n    Node *right;\n    Point left_extent;\n    flat_set<MarkerId> left_marker_ids;\n    flat_set<MarkerId> right_marker_ids;\n    flat_set<MarkerId> start_marker_ids;\n    flat_set<MarkerId> end_marker_ids;\n    int priority;\n\n    Node(Node *parent, Point left_extent);\n    bool is_marker_endpoint();\n  };\n\n  class Iterator {\n  public:\n    Iterator(MarkerIndex *marker_index);\n    void reset();\n    Node* insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_splice_boundary(const Point &position, bool is_insertion_end);\n    void find_intersecting(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_contained_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_starting_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_ending_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_boundaries_after(Point start, size_t max_count, BoundaryQueryResult *result);\n    std::unordered_map<MarkerId, Range> dump();\n\n  private:\n    void ascend();\n    void descend_left();\n    void descend_right();\n    void move_to_successor();\n    void seek_to_first_node_greater_than_or_equal_to(const Point &position);\n    void mark_right(const MarkerId &id, const Point &start_position, const Point &end_position);\n    void mark_left(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_left_child(const Point &position);\n    Node* insert_right_child(const Point &position);\n    void check_intersection(const Point &start, const Point &end, flat_set<MarkerId> *results);\n    void cache_node_position() const;\n\n    MarkerIndex *marker_index;\n    Node *current_node;\n    Point current_node_position;\n    Point left_ancestor_position;\n    Point right_ancestor_position;\n    std::vector<Point> left_ancestor_position_stack;\n    std::vector<Point> right_ancestor_position_stack;\n  };\n\n  Point get_node_position(const Node *node) const;\n  void delete_node(Node *node);\n  void delete_subtree(Node *node);\n  void bubble_node_up(Node *node);\n  void bubble_node_down(Node *node);\n  void rotate_node_left(Node *pivot);\n  void rotate_node_right(Node *pivot);\n  void get_starting_and_ending_markers_within_subtree(const Node *node, flat_set<MarkerId> *starting, flat_set<MarkerId> *ending);\n  void populate_splice_invalidation_sets(SpliceResult *invalidated, const Node *start_node, const Node *end_node, const flat_set<MarkerId> &starting_inside_splice, const flat_set<MarkerId> &ending_inside_splice);\n\n  std::default_random_engine random_engine;\n  std::uniform_int_distribution<int> random_distribution;\n  Node *root;\n  std::unordered_map<MarkerId, Node*> start_nodes_by_id;\n  std::unordered_map<MarkerId, Node*> end_nodes_by_id;\n  Iterator iterator;\n  flat_set<MarkerId> exclusive_marker_ids;\n  mutable std::unordered_map<const Node*, Point> node_position_cache;\n};\n\n#endif",
        "start": {
          "row": 1,
          "column": 1
        },
        "end": {
          "row": 131,
          "column": 7
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "MARKER_INDEX_H_",
        "start": {
          "row": 1,
          "column": 9
        },
        "end": {
          "row": 1,
          "column": 24
        }
      },
      {
        "kind": "preproc_def",
        "name": "query",
        "text": "#define MARKER_INDEX_H_\n\n",
        "start": {
          "row": 2,
          "column": 1
        },
        "end": {
          "row": 4,
          "column": 1
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "MARKER_INDEX_H_",
        "start": {
          "row": 2,
          "column": 9
        },
        "end": {
          "row": 2,
          "column": 24
        }
      },
      {
        "kind": "preproc_include",
        "name": "query",
        "text": "#include <random>\n",
        "start": {
          "row": 4,
          "column": 1
        },
        "end": {
          "row": 5,
          "column": 1
        }
      },
      {
        "kind": "system_lib_string",
        "name": "query",
        "text": "<random>",
        "start": {
          "row": 4,
          "column": 10
        },
        "end": {
          "row": 4,
          "column": 18
        }
      },
      {
        "kind": "preproc_include",
        "name": "query",
        "text": "#include <unordered_map>\n",
        "start": {
          "row": 5,
          "column": 1
        },
        "end": {
          "row": 6,
          "column": 1
        }
      },
      {
        "kind": "system_lib_string",
        "name": "query",
        "text": "<unordered_map>",
        "start": {
          "row": 5,
          "column": 10
        },
        "end": {
          "row": 5,
          "column": 25
        }
      },
      {
        "kind": "preproc_include",
        "name": "query",
        "text": "#include \"flat_set.h\"\n",
        "start": {
          "row": 6,
          "column": 1
        },
        "end": {
          "row": 7,
          "column": 1
        }
      },
      {
        "kind": "string_literal",
        "name": "query",
        "text": "\"flat_set.h\"",
        "start": {
          "row": 6,
          "column": 10
        },
        "end": {
          "row": 6,
          "column": 22
        }
      },
      {
        "kind": "preproc_include",
        "name": "query",
        "text": "#include \"point.h\"\n",
        "start": {
          "row": 7,
          "column": 1
        },
        "end": {
          "row": 8,
          "column": 1
        }
      },
      {
        "kind": "string_literal",
        "name": "query",
        "text": "\"point.h\"",
        "start": {
          "row": 7,
          "column": 10
        },
        "end": {
          "row": 7,
          "column": 19
        }
      },
      {
        "kind": "preproc_include",
        "name": "query",
        "text": "#include \"range.h\"\n\n",
        "start": {
          "row": 8,
          "column": 1
        },
        "end": {
          "row": 10,
          "column": 1
        }
      },
      {
        "kind": "string_literal",
        "name": "query",
        "text": "\"range.h\"",
        "start": {
          "row": 8,
          "column": 10
        },
        "end": {
          "row": 8,
          "column": 19
        }
      },
      {
        "kind": "class_specifier",
        "name": "query",
        "text": "class MarkerIndex {\npublic:\n  using MarkerId = unsigned;\n  using MarkerIdSet = flat_set<MarkerId>;\n\n  struct SpliceResult {\n    flat_set<MarkerId> touch;\n    flat_set<MarkerId> inside;\n    flat_set<MarkerId> overlap;\n    flat_set<MarkerId> surround;\n  };\n\n  struct Boundary {\n    Point position;\n    flat_set<MarkerId> starting;\n    flat_set<MarkerId> ending;\n  };\n\n  struct BoundaryQueryResult {\n    std::vector<MarkerId> containing_start;\n    std::vector<Boundary> boundaries;\n  };\n\n  MarkerIndex(unsigned seed = 0u);\n  ~MarkerIndex();\n  int generate_random_number();\n  void insert(MarkerId id, Point start, Point end);\n  void set_exclusive(MarkerId id, bool exclusive);\n  void remove(MarkerId id);\n  bool has(MarkerId id);\n  SpliceResult splice(Point start, Point old_extent, Point new_extent);\n  Point get_start(MarkerId id) const;\n  Point get_end(MarkerId id) const;\n  Range get_range(MarkerId id) const;\n\n  int compare(MarkerId id1, MarkerId id2) const;\n  flat_set<MarkerId> find_intersecting(Point start, Point end);\n  flat_set<MarkerId> find_containing(Point start, Point end);\n  flat_set<MarkerId> find_contained_in(Point start, Point end);\n  flat_set<MarkerId> find_starting_in(Point start, Point end);\n  flat_set<MarkerId> find_starting_at(Point position);\n  flat_set<MarkerId> find_ending_in(Point start, Point end);\n  flat_set<MarkerId> find_ending_at(Point position);\n  BoundaryQueryResult find_boundaries_after(Point start, size_t max_count);\n\n  std::unordered_map<MarkerId, Range> dump();\n\nprivate:\n  friend class Iterator;\n\n  struct Node {\n    Node *parent;\n    Node *left;\n    Node *right;\n    Point left_extent;\n    flat_set<MarkerId> left_marker_ids;\n    flat_set<MarkerId> right_marker_ids;\n    flat_set<MarkerId> start_marker_ids;\n    flat_set<MarkerId> end_marker_ids;\n    int priority;\n\n    Node(Node *parent, Point left_extent);\n    bool is_marker_endpoint();\n  };\n\n  class Iterator {\n  public:\n    Iterator(MarkerIndex *marker_index);\n    void reset();\n    Node* insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_splice_boundary(const Point &position, bool is_insertion_end);\n    void find_intersecting(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_contained_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_starting_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_ending_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_boundaries_after(Point start, size_t max_count, BoundaryQueryResult *result);\n    std::unordered_map<MarkerId, Range> dump();\n\n  private:\n    void ascend();\n    void descend_left();\n    void descend_right();\n    void move_to_successor();\n    void seek_to_first_node_greater_than_or_equal_to(const Point &position);\n    void mark_right(const MarkerId &id, const Point &start_position, const Point &end_position);\n    void mark_left(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_left_child(const Point &position);\n    Node* insert_right_child(const Point &position);\n    void check_intersection(const Point &start, const Point &end, flat_set<MarkerId> *results);\n    void cache_node_position() const;\n\n    MarkerIndex *marker_index;\n    Node *current_node;\n    Point current_node_position;\n    Point left_ancestor_position;\n    Point right_ancestor_position;\n    std::vector<Point> left_ancestor_position_stack;\n    std::vector<Point> right_ancestor_position_stack;\n  };\n\n  Point get_node_position(const Node *node) const;\n  void delete_node(Node *node);\n  void delete_subtree(Node *node);\n  void bubble_node_up(Node *node);\n  void bubble_node_down(Node *node);\n  void rotate_node_left(Node *pivot);\n  void rotate_node_right(Node *pivot);\n  void get_starting_and_ending_markers_within_subtree(const Node *node, flat_set<MarkerId> *starting, flat_set<MarkerId> *ending);\n  void populate_splice_invalidation_sets(SpliceResult *invalidated, const Node *start_node, const Node *end_node, const flat_set<MarkerId> &starting_inside_splice, const flat_set<MarkerId> &ending_inside_splice);\n\n  std::default_random_engine random_engine;\n  std::uniform_int_distribution<int> random_distribution;\n  Node *root;\n  std::unordered_map<MarkerId, Node*> start_nodes_by_id;\n  std::unordered_map<MarkerId, Node*> end_nodes_by_id;\n  Iterator iterator;\n  flat_set<MarkerId> exclusive_marker_ids;\n  mutable std::unordered_map<const Node*, Point> node_position_cache;\n}",
        "start": {
          "row": 10,
          "column": 1
        },
        "end": {
          "row": 129,
          "column": 2
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerIndex",
        "start": {
          "row": 10,
          "column": 7
        },
        "end": {
          "row": 10,
          "column": 18
        }
      },
      {
        "kind": "field_declaration_list",
        "name": "query",
        "text": "{\npublic:\n  using MarkerId = unsigned;\n  using MarkerIdSet = flat_set<MarkerId>;\n\n  struct SpliceResult {\n    flat_set<MarkerId> touch;\n    flat_set<MarkerId> inside;\n    flat_set<MarkerId> overlap;\n    flat_set<MarkerId> surround;\n  };\n\n  struct Boundary {\n    Point position;\n    flat_set<MarkerId> starting;\n    flat_set<MarkerId> ending;\n  };\n\n  struct BoundaryQueryResult {\n    std::vector<MarkerId> containing_start;\n    std::vector<Boundary> boundaries;\n  };\n\n  MarkerIndex(unsigned seed = 0u);\n  ~MarkerIndex();\n  int generate_random_number();\n  void insert(MarkerId id, Point start, Point end);\n  void set_exclusive(MarkerId id, bool exclusive);\n  void remove(MarkerId id);\n  bool has(MarkerId id);\n  SpliceResult splice(Point start, Point old_extent, Point new_extent);\n  Point get_start(MarkerId id) const;\n  Point get_end(MarkerId id) const;\n  Range get_range(MarkerId id) const;\n\n  int compare(MarkerId id1, MarkerId id2) const;\n  flat_set<MarkerId> find_intersecting(Point start, Point end);\n  flat_set<MarkerId> find_containing(Point start, Point end);\n  flat_set<MarkerId> find_contained_in(Point start, Point end);\n  flat_set<MarkerId> find_starting_in(Point start, Point end);\n  flat_set<MarkerId> find_starting_at(Point position);\n  flat_set<MarkerId> find_ending_in(Point start, Point end);\n  flat_set<MarkerId> find_ending_at(Point position);\n  BoundaryQueryResult find_boundaries_after(Point start, size_t max_count);\n\n  std::unordered_map<MarkerId, Range> dump();\n\nprivate:\n  friend class Iterator;\n\n  struct Node {\n    Node *parent;\n    Node *left;\n    Node *right;\n    Point left_extent;\n    flat_set<MarkerId> left_marker_ids;\n    flat_set<MarkerId> right_marker_ids;\n    flat_set<MarkerId> start_marker_ids;\n    flat_set<MarkerId> end_marker_ids;\n    int priority;\n\n    Node(Node *parent, Point left_extent);\n    bool is_marker_endpoint();\n  };\n\n  class Iterator {\n  public:\n    Iterator(MarkerIndex *marker_index);\n    void reset();\n    Node* insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_splice_boundary(const Point &position, bool is_insertion_end);\n    void find_intersecting(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_contained_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_starting_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_ending_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_boundaries_after(Point start, size_t max_count, BoundaryQueryResult *result);\n    std::unordered_map<MarkerId, Range> dump();\n\n  private:\n    void ascend();\n    void descend_left();\n    void descend_right();\n    void move_to_successor();\n    void seek_to_first_node_greater_than_or_equal_to(const Point &position);\n    void mark_right(const MarkerId &id, const Point &start_position, const Point &end_position);\n    void mark_left(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_left_child(const Point &position);\n    Node* insert_right_child(const Point &position);\n    void check_intersection(const Point &start, const Point &end, flat_set<MarkerId> *results);\n    void cache_node_position() const;\n\n    MarkerIndex *marker_index;\n    Node *current_node;\n    Point current_node_position;\n    Point left_ancestor_position;\n    Point right_ancestor_position;\n    std::vector<Point> left_ancestor_position_stack;\n    std::vector<Point> right_ancestor_position_stack;\n  };\n\n  Point get_node_position(const Node *node) const;\n  void delete_node(Node *node);\n  void delete_subtree(Node *node);\n  void bubble_node_up(Node *node);\n  void bubble_node_down(Node *node);\n  void rotate_node_left(Node *pivot);\n  void rotate_node_right(Node *pivot);\n  void get_starting_and_ending_markers_within_subtree(const Node *node, flat_set<MarkerId> *starting, flat_set<MarkerId> *ending);\n  void populate_splice_invalidation_sets(SpliceResult *invalidated, const Node *start_node, const Node *end_node, const flat_set<MarkerId> &starting_inside_splice, const flat_set<MarkerId> &ending_inside_splice);\n\n  std::default_random_engine random_engine;\n  std::uniform_int_distribution<int> random_distribution;\n  Node *root;\n  std::unordered_map<MarkerId, Node*> start_nodes_by_id;\n  std::unordered_map<MarkerId, Node*> end_nodes_by_id;\n  Iterator iterator;\n  flat_set<MarkerId> exclusive_marker_ids;\n  mutable std::unordered_map<const Node*, Point> node_position_cache;\n}",
        "start": {
          "row": 10,
          "column": 19
        },
        "end": {
          "row": 129,
          "column": 2
        }
      },
      {
        "kind": "access_specifier",
        "name": "query",
        "text": "public:",
        "start": {
          "row": 11,
          "column": 1
        },
        "end": {
          "row": 11,
          "column": 8
        }
      },
      {
        "kind": "alias_declaration",
        "name": "query",
        "text": "using MarkerId = unsigned;",
        "start": {
          "row": 12,
          "column": 3
        },
        "end": {
          "row": 12,
          "column": 29
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 12,
          "column": 9
        },
        "end": {
          "row": 12,
          "column": 17
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "unsigned",
        "start": {
          "row": 12,
          "column": 20
        },
        "end": {
          "row": 12,
          "column": 28
        }
      },
      {
        "kind": "sized_type_specifier",
        "name": "query",
        "text": "unsigned",
        "start": {
          "row": 12,
          "column": 20
        },
        "end": {
          "row": 12,
          "column": 28
        }
      },
      {
        "kind": "alias_declaration",
        "name": "query",
        "text": "using MarkerIdSet = flat_set<MarkerId>;",
        "start": {
          "row": 13,
          "column": 3
        },
        "end": {
          "row": 13,
          "column": 42
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerIdSet",
        "start": {
          "row": 13,
          "column": 9
        },
        "end": {
          "row": 13,
          "column": 20
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 13,
          "column": 23
        },
        "end": {
          "row": 13,
          "column": 41
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 13,
          "column": 23
        },
        "end": {
          "row": 13,
          "column": 41
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 13,
          "column": 23
        },
        "end": {
          "row": 13,
          "column": 31
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 13,
          "column": 31
        },
        "end": {
          "row": 13,
          "column": 41
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 13,
          "column": 32
        },
        "end": {
          "row": 13,
          "column": 40
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 13,
          "column": 32
        },
        "end": {
          "row": 13,
          "column": 40
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "struct SpliceResult {\n    flat_set<MarkerId> touch;\n    flat_set<MarkerId> inside;\n    flat_set<MarkerId> overlap;\n    flat_set<MarkerId> surround;\n  };",
        "start": {
          "row": 15,
          "column": 3
        },
        "end": {
          "row": 20,
          "column": 5
        }
      },
      {
        "kind": "struct_specifier",
        "name": "query",
        "text": "struct SpliceResult {\n    flat_set<MarkerId> touch;\n    flat_set<MarkerId> inside;\n    flat_set<MarkerId> overlap;\n    flat_set<MarkerId> surround;\n  }",
        "start": {
          "row": 15,
          "column": 3
        },
        "end": {
          "row": 20,
          "column": 4
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "SpliceResult",
        "start": {
          "row": 15,
          "column": 10
        },
        "end": {
          "row": 15,
          "column": 22
        }
      },
      {
        "kind": "field_declaration_list",
        "name": "query",
        "text": "{\n    flat_set<MarkerId> touch;\n    flat_set<MarkerId> inside;\n    flat_set<MarkerId> overlap;\n    flat_set<MarkerId> surround;\n  }",
        "start": {
          "row": 15,
          "column": 23
        },
        "end": {
          "row": 20,
          "column": 4
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> touch;",
        "start": {
          "row": 16,
          "column": 5
        },
        "end": {
          "row": 16,
          "column": 30
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 16,
          "column": 5
        },
        "end": {
          "row": 16,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 16,
          "column": 5
        },
        "end": {
          "row": 16,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 16,
          "column": 13
        },
        "end": {
          "row": 16,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 16,
          "column": 14
        },
        "end": {
          "row": 16,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 16,
          "column": 14
        },
        "end": {
          "row": 16,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "touch",
        "start": {
          "row": 16,
          "column": 24
        },
        "end": {
          "row": 16,
          "column": 29
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> inside;",
        "start": {
          "row": 17,
          "column": 5
        },
        "end": {
          "row": 17,
          "column": 31
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 17,
          "column": 5
        },
        "end": {
          "row": 17,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 17,
          "column": 5
        },
        "end": {
          "row": 17,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 17,
          "column": 13
        },
        "end": {
          "row": 17,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 17,
          "column": 14
        },
        "end": {
          "row": 17,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 17,
          "column": 14
        },
        "end": {
          "row": 17,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "inside",
        "start": {
          "row": 17,
          "column": 24
        },
        "end": {
          "row": 17,
          "column": 30
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> overlap;",
        "start": {
          "row": 18,
          "column": 5
        },
        "end": {
          "row": 18,
          "column": 32
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 18,
          "column": 5
        },
        "end": {
          "row": 18,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 18,
          "column": 5
        },
        "end": {
          "row": 18,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 18,
          "column": 13
        },
        "end": {
          "row": 18,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 18,
          "column": 14
        },
        "end": {
          "row": 18,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 18,
          "column": 14
        },
        "end": {
          "row": 18,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "overlap",
        "start": {
          "row": 18,
          "column": 24
        },
        "end": {
          "row": 18,
          "column": 31
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> surround;",
        "start": {
          "row": 19,
          "column": 5
        },
        "end": {
          "row": 19,
          "column": 33
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 19,
          "column": 5
        },
        "end": {
          "row": 19,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 19,
          "column": 5
        },
        "end": {
          "row": 19,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 19,
          "column": 13
        },
        "end": {
          "row": 19,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 19,
          "column": 14
        },
        "end": {
          "row": 19,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 19,
          "column": 14
        },
        "end": {
          "row": 19,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "surround",
        "start": {
          "row": 19,
          "column": 24
        },
        "end": {
          "row": 19,
          "column": 32
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "struct Boundary {\n    Point position;\n    flat_set<MarkerId> starting;\n    flat_set<MarkerId> ending;\n  };",
        "start": {
          "row": 22,
          "column": 3
        },
        "end": {
          "row": 26,
          "column": 5
        }
      },
      {
        "kind": "struct_specifier",
        "name": "query",
        "text": "struct Boundary {\n    Point position;\n    flat_set<MarkerId> starting;\n    flat_set<MarkerId> ending;\n  }",
        "start": {
          "row": 22,
          "column": 3
        },
        "end": {
          "row": 26,
          "column": 4
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Boundary",
        "start": {
          "row": 22,
          "column": 10
        },
        "end": {
          "row": 22,
          "column": 18
        }
      },
      {
        "kind": "field_declaration_list",
        "name": "query",
        "text": "{\n    Point position;\n    flat_set<MarkerId> starting;\n    flat_set<MarkerId> ending;\n  }",
        "start": {
          "row": 22,
          "column": 19
        },
        "end": {
          "row": 26,
          "column": 4
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Point position;",
        "start": {
          "row": 23,
          "column": 5
        },
        "end": {
          "row": 23,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 23,
          "column": 5
        },
        "end": {
          "row": 23,
          "column": 10
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "position",
        "start": {
          "row": 23,
          "column": 11
        },
        "end": {
          "row": 23,
          "column": 19
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> starting;",
        "start": {
          "row": 24,
          "column": 5
        },
        "end": {
          "row": 24,
          "column": 33
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 24,
          "column": 5
        },
        "end": {
          "row": 24,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 24,
          "column": 5
        },
        "end": {
          "row": 24,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 24,
          "column": 13
        },
        "end": {
          "row": 24,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 24,
          "column": 14
        },
        "end": {
          "row": 24,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 24,
          "column": 14
        },
        "end": {
          "row": 24,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "starting",
        "start": {
          "row": 24,
          "column": 24
        },
        "end": {
          "row": 24,
          "column": 32
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> ending;",
        "start": {
          "row": 25,
          "column": 5
        },
        "end": {
          "row": 25,
          "column": 31
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 25,
          "column": 5
        },
        "end": {
          "row": 25,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 25,
          "column": 5
        },
        "end": {
          "row": 25,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 25,
          "column": 13
        },
        "end": {
          "row": 25,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 25,
          "column": 14
        },
        "end": {
          "row": 25,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 25,
          "column": 14
        },
        "end": {
          "row": 25,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "ending",
        "start": {
          "row": 25,
          "column": 24
        },
        "end": {
          "row": 25,
          "column": 30
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "struct BoundaryQueryResult {\n    std::vector<MarkerId> containing_start;\n    std::vector<Boundary> boundaries;\n  };",
        "start": {
          "row": 28,
          "column": 3
        },
        "end": {
          "row": 31,
          "column": 5
        }
      },
      {
        "kind": "struct_specifier",
        "name": "query",
        "text": "struct BoundaryQueryResult {\n    std::vector<MarkerId> containing_start;\n    std::vector<Boundary> boundaries;\n  }",
        "start": {
          "row": 28,
          "column": 3
        },
        "end": {
          "row": 31,
          "column": 4
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "BoundaryQueryResult",
        "start": {
          "row": 28,
          "column": 10
        },
        "end": {
          "row": 28,
          "column": 29
        }
      },
      {
        "kind": "field_declaration_list",
        "name": "query",
        "text": "{\n    std::vector<MarkerId> containing_start;\n    std::vector<Boundary> boundaries;\n  }",
        "start": {
          "row": 28,
          "column": 30
        },
        "end": {
          "row": 31,
          "column": 4
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::vector<MarkerId> containing_start;",
        "start": {
          "row": 29,
          "column": 5
        },
        "end": {
          "row": 29,
          "column": 44
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::vector<MarkerId>",
        "start": {
          "row": 29,
          "column": 5
        },
        "end": {
          "row": 29,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 29,
          "column": 5
        },
        "end": {
          "row": 29,
          "column": 8
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "vector<MarkerId>",
        "start": {
          "row": 29,
          "column": 10
        },
        "end": {
          "row": 29,
          "column": 26
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "vector",
        "start": {
          "row": 29,
          "column": 10
        },
        "end": {
          "row": 29,
          "column": 16
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 29,
          "column": 16
        },
        "end": {
          "row": 29,
          "column": 26
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 29,
          "column": 17
        },
        "end": {
          "row": 29,
          "column": 25
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 29,
          "column": 17
        },
        "end": {
          "row": 29,
          "column": 25
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "containing_start",
        "start": {
          "row": 29,
          "column": 27
        },
        "end": {
          "row": 29,
          "column": 43
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::vector<Boundary> boundaries;",
        "start": {
          "row": 30,
          "column": 5
        },
        "end": {
          "row": 30,
          "column": 38
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::vector<Boundary>",
        "start": {
          "row": 30,
          "column": 5
        },
        "end": {
          "row": 30,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 30,
          "column": 5
        },
        "end": {
          "row": 30,
          "column": 8
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "vector<Boundary>",
        "start": {
          "row": 30,
          "column": 10
        },
        "end": {
          "row": 30,
          "column": 26
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "vector",
        "start": {
          "row": 30,
          "column": 10
        },
        "end": {
          "row": 30,
          "column": 16
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Boundary>",
        "start": {
          "row": 30,
          "column": 16
        },
        "end": {
          "row": 30,
          "column": 26
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Boundary",
        "start": {
          "row": 30,
          "column": 17
        },
        "end": {
          "row": 30,
          "column": 25
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Boundary",
        "start": {
          "row": 30,
          "column": 17
        },
        "end": {
          "row": 30,
          "column": 25
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "boundaries",
        "start": {
          "row": 30,
          "column": 27
        },
        "end": {
          "row": 30,
          "column": 37
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "MarkerIndex(unsigned seed = 0u);",
        "start": {
          "row": 33,
          "column": 3
        },
        "end": {
          "row": 33,
          "column": 35
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "MarkerIndex(unsigned seed = 0u)",
        "start": {
          "row": 33,
          "column": 3
        },
        "end": {
          "row": 33,
          "column": 34
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "MarkerIndex",
        "start": {
          "row": 33,
          "column": 3
        },
        "end": {
          "row": 33,
          "column": 14
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(unsigned seed = 0u)",
        "start": {
          "row": 33,
          "column": 14
        },
        "end": {
          "row": 33,
          "column": 34
        }
      },
      {
        "kind": "optional_parameter_declaration",
        "name": "query",
        "text": "unsigned seed = 0u",
        "start": {
          "row": 33,
          "column": 15
        },
        "end": {
          "row": 33,
          "column": 33
        }
      },
      {
        "kind": "sized_type_specifier",
        "name": "query",
        "text": "unsigned",
        "start": {
          "row": 33,
          "column": 15
        },
        "end": {
          "row": 33,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "seed",
        "start": {
          "row": 33,
          "column": 24
        },
        "end": {
          "row": 33,
          "column": 28
        }
      },
      {
        "kind": "number_literal",
        "name": "query",
        "text": "0u",
        "start": {
          "row": 33,
          "column": 31
        },
        "end": {
          "row": 33,
          "column": 33
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "~MarkerIndex();",
        "start": {
          "row": 34,
          "column": 3
        },
        "end": {
          "row": 34,
          "column": 18
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "~MarkerIndex()",
        "start": {
          "row": 34,
          "column": 3
        },
        "end": {
          "row": 34,
          "column": 17
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~MarkerIndex",
        "start": {
          "row": 34,
          "column": 3
        },
        "end": {
          "row": 34,
          "column": 15
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "MarkerIndex",
        "start": {
          "row": 34,
          "column": 4
        },
        "end": {
          "row": 34,
          "column": 15
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 34,
          "column": 15
        },
        "end": {
          "row": 34,
          "column": 17
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "int generate_random_number();",
        "start": {
          "row": 35,
          "column": 3
        },
        "end": {
          "row": 35,
          "column": 32
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "int",
        "start": {
          "row": 35,
          "column": 3
        },
        "end": {
          "row": 35,
          "column": 6
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "generate_random_number()",
        "start": {
          "row": 35,
          "column": 7
        },
        "end": {
          "row": 35,
          "column": 31
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "generate_random_number",
        "start": {
          "row": 35,
          "column": 7
        },
        "end": {
          "row": 35,
          "column": 29
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 35,
          "column": 29
        },
        "end": {
          "row": 35,
          "column": 31
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void insert(MarkerId id, Point start, Point end);",
        "start": {
          "row": 36,
          "column": 3
        },
        "end": {
          "row": 36,
          "column": 52
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 36,
          "column": 3
        },
        "end": {
          "row": 36,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "insert(MarkerId id, Point start, Point end)",
        "start": {
          "row": 36,
          "column": 8
        },
        "end": {
          "row": 36,
          "column": 51
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "insert",
        "start": {
          "row": 36,
          "column": 8
        },
        "end": {
          "row": 36,
          "column": 14
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(MarkerId id, Point start, Point end)",
        "start": {
          "row": 36,
          "column": 14
        },
        "end": {
          "row": 36,
          "column": 51
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerId id",
        "start": {
          "row": 36,
          "column": 15
        },
        "end": {
          "row": 36,
          "column": 26
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 36,
          "column": 15
        },
        "end": {
          "row": 36,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 36,
          "column": 24
        },
        "end": {
          "row": 36,
          "column": 26
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point start",
        "start": {
          "row": 36,
          "column": 28
        },
        "end": {
          "row": 36,
          "column": 39
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 36,
          "column": 28
        },
        "end": {
          "row": 36,
          "column": 33
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 36,
          "column": 34
        },
        "end": {
          "row": 36,
          "column": 39
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point end",
        "start": {
          "row": 36,
          "column": 41
        },
        "end": {
          "row": 36,
          "column": 50
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 36,
          "column": 41
        },
        "end": {
          "row": 36,
          "column": 46
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 36,
          "column": 47
        },
        "end": {
          "row": 36,
          "column": 50
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void set_exclusive(MarkerId id, bool exclusive);",
        "start": {
          "row": 37,
          "column": 3
        },
        "end": {
          "row": 37,
          "column": 51
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 37,
          "column": 3
        },
        "end": {
          "row": 37,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "set_exclusive(MarkerId id, bool exclusive)",
        "start": {
          "row": 37,
          "column": 8
        },
        "end": {
          "row": 37,
          "column": 50
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "set_exclusive",
        "start": {
          "row": 37,
          "column": 8
        },
        "end": {
          "row": 37,
          "column": 21
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(MarkerId id, bool exclusive)",
        "start": {
          "row": 37,
          "column": 21
        },
        "end": {
          "row": 37,
          "column": 50
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerId id",
        "start": {
          "row": 37,
          "column": 22
        },
        "end": {
          "row": 37,
          "column": 33
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 37,
          "column": 22
        },
        "end": {
          "row": 37,
          "column": 30
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 37,
          "column": 31
        },
        "end": {
          "row": 37,
          "column": 33
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "bool exclusive",
        "start": {
          "row": 37,
          "column": 35
        },
        "end": {
          "row": 37,
          "column": 49
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "bool",
        "start": {
          "row": 37,
          "column": 35
        },
        "end": {
          "row": 37,
          "column": 39
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "exclusive",
        "start": {
          "row": 37,
          "column": 40
        },
        "end": {
          "row": 37,
          "column": 49
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void remove(MarkerId id);",
        "start": {
          "row": 38,
          "column": 3
        },
        "end": {
          "row": 38,
          "column": 28
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 38,
          "column": 3
        },
        "end": {
          "row": 38,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "remove(MarkerId id)",
        "start": {
          "row": 38,
          "column": 8
        },
        "end": {
          "row": 38,
          "column": 27
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "remove",
        "start": {
          "row": 38,
          "column": 8
        },
        "end": {
          "row": 38,
          "column": 14
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(MarkerId id)",
        "start": {
          "row": 38,
          "column": 14
        },
        "end": {
          "row": 38,
          "column": 27
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerId id",
        "start": {
          "row": 38,
          "column": 15
        },
        "end": {
          "row": 38,
          "column": 26
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 38,
          "column": 15
        },
        "end": {
          "row": 38,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 38,
          "column": 24
        },
        "end": {
          "row": 38,
          "column": 26
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "bool has(MarkerId id);",
        "start": {
          "row": 39,
          "column": 3
        },
        "end": {
          "row": 39,
          "column": 25
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "bool",
        "start": {
          "row": 39,
          "column": 3
        },
        "end": {
          "row": 39,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "has(MarkerId id)",
        "start": {
          "row": 39,
          "column": 8
        },
        "end": {
          "row": 39,
          "column": 24
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "has",
        "start": {
          "row": 39,
          "column": 8
        },
        "end": {
          "row": 39,
          "column": 11
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(MarkerId id)",
        "start": {
          "row": 39,
          "column": 11
        },
        "end": {
          "row": 39,
          "column": 24
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerId id",
        "start": {
          "row": 39,
          "column": 12
        },
        "end": {
          "row": 39,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 39,
          "column": 12
        },
        "end": {
          "row": 39,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 39,
          "column": 21
        },
        "end": {
          "row": 39,
          "column": 23
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "SpliceResult splice(Point start, Point old_extent, Point new_extent);",
        "start": {
          "row": 40,
          "column": 3
        },
        "end": {
          "row": 40,
          "column": 72
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "SpliceResult",
        "start": {
          "row": 40,
          "column": 3
        },
        "end": {
          "row": 40,
          "column": 15
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "splice(Point start, Point old_extent, Point new_extent)",
        "start": {
          "row": 40,
          "column": 16
        },
        "end": {
          "row": 40,
          "column": 71
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "splice",
        "start": {
          "row": 40,
          "column": 16
        },
        "end": {
          "row": 40,
          "column": 22
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point start, Point old_extent, Point new_extent)",
        "start": {
          "row": 40,
          "column": 22
        },
        "end": {
          "row": 40,
          "column": 71
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point start",
        "start": {
          "row": 40,
          "column": 23
        },
        "end": {
          "row": 40,
          "column": 34
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 40,
          "column": 23
        },
        "end": {
          "row": 40,
          "column": 28
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 40,
          "column": 29
        },
        "end": {
          "row": 40,
          "column": 34
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point old_extent",
        "start": {
          "row": 40,
          "column": 36
        },
        "end": {
          "row": 40,
          "column": 52
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 40,
          "column": 36
        },
        "end": {
          "row": 40,
          "column": 41
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "old_extent",
        "start": {
          "row": 40,
          "column": 42
        },
        "end": {
          "row": 40,
          "column": 52
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point new_extent",
        "start": {
          "row": 40,
          "column": 54
        },
        "end": {
          "row": 40,
          "column": 70
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 40,
          "column": 54
        },
        "end": {
          "row": 40,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "new_extent",
        "start": {
          "row": 40,
          "column": 60
        },
        "end": {
          "row": 40,
          "column": 70
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Point get_start(MarkerId id) const;",
        "start": {
          "row": 41,
          "column": 3
        },
        "end": {
          "row": 41,
          "column": 38
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 41,
          "column": 3
        },
        "end": {
          "row": 41,
          "column": 8
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "get_start(MarkerId id) const",
        "start": {
          "row": 41,
          "column": 9
        },
        "end": {
          "row": 41,
          "column": 37
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "get_start",
        "start": {
          "row": 41,
          "column": 9
        },
        "end": {
          "row": 41,
          "column": 18
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(MarkerId id)",
        "start": {
          "row": 41,
          "column": 18
        },
        "end": {
          "row": 41,
          "column": 31
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerId id",
        "start": {
          "row": 41,
          "column": 19
        },
        "end": {
          "row": 41,
          "column": 30
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 41,
          "column": 19
        },
        "end": {
          "row": 41,
          "column": 27
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 41,
          "column": 28
        },
        "end": {
          "row": 41,
          "column": 30
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 41,
          "column": 32
        },
        "end": {
          "row": 41,
          "column": 37
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Point get_end(MarkerId id) const;",
        "start": {
          "row": 42,
          "column": 3
        },
        "end": {
          "row": 42,
          "column": 36
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 42,
          "column": 3
        },
        "end": {
          "row": 42,
          "column": 8
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "get_end(MarkerId id) const",
        "start": {
          "row": 42,
          "column": 9
        },
        "end": {
          "row": 42,
          "column": 35
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "get_end",
        "start": {
          "row": 42,
          "column": 9
        },
        "end": {
          "row": 42,
          "column": 16
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(MarkerId id)",
        "start": {
          "row": 42,
          "column": 16
        },
        "end": {
          "row": 42,
          "column": 29
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerId id",
        "start": {
          "row": 42,
          "column": 17
        },
        "end": {
          "row": 42,
          "column": 28
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 42,
          "column": 17
        },
        "end": {
          "row": 42,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 42,
          "column": 26
        },
        "end": {
          "row": 42,
          "column": 28
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 42,
          "column": 30
        },
        "end": {
          "row": 42,
          "column": 35
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Range get_range(MarkerId id) const;",
        "start": {
          "row": 43,
          "column": 3
        },
        "end": {
          "row": 43,
          "column": 38
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Range",
        "start": {
          "row": 43,
          "column": 3
        },
        "end": {
          "row": 43,
          "column": 8
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "get_range(MarkerId id) const",
        "start": {
          "row": 43,
          "column": 9
        },
        "end": {
          "row": 43,
          "column": 37
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "get_range",
        "start": {
          "row": 43,
          "column": 9
        },
        "end": {
          "row": 43,
          "column": 18
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(MarkerId id)",
        "start": {
          "row": 43,
          "column": 18
        },
        "end": {
          "row": 43,
          "column": 31
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerId id",
        "start": {
          "row": 43,
          "column": 19
        },
        "end": {
          "row": 43,
          "column": 30
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 43,
          "column": 19
        },
        "end": {
          "row": 43,
          "column": 27
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 43,
          "column": 28
        },
        "end": {
          "row": 43,
          "column": 30
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 43,
          "column": 32
        },
        "end": {
          "row": 43,
          "column": 37
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "int compare(MarkerId id1, MarkerId id2) const;",
        "start": {
          "row": 45,
          "column": 3
        },
        "end": {
          "row": 45,
          "column": 49
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "int",
        "start": {
          "row": 45,
          "column": 3
        },
        "end": {
          "row": 45,
          "column": 6
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "compare(MarkerId id1, MarkerId id2) const",
        "start": {
          "row": 45,
          "column": 7
        },
        "end": {
          "row": 45,
          "column": 48
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "compare",
        "start": {
          "row": 45,
          "column": 7
        },
        "end": {
          "row": 45,
          "column": 14
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(MarkerId id1, MarkerId id2)",
        "start": {
          "row": 45,
          "column": 14
        },
        "end": {
          "row": 45,
          "column": 42
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerId id1",
        "start": {
          "row": 45,
          "column": 15
        },
        "end": {
          "row": 45,
          "column": 27
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 45,
          "column": 15
        },
        "end": {
          "row": 45,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id1",
        "start": {
          "row": 45,
          "column": 24
        },
        "end": {
          "row": 45,
          "column": 27
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerId id2",
        "start": {
          "row": 45,
          "column": 29
        },
        "end": {
          "row": 45,
          "column": 41
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 45,
          "column": 29
        },
        "end": {
          "row": 45,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id2",
        "start": {
          "row": 45,
          "column": 38
        },
        "end": {
          "row": 45,
          "column": 41
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 45,
          "column": 43
        },
        "end": {
          "row": 45,
          "column": 48
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> find_intersecting(Point start, Point end);",
        "start": {
          "row": 46,
          "column": 3
        },
        "end": {
          "row": 46,
          "column": 64
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 46,
          "column": 3
        },
        "end": {
          "row": 46,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 46,
          "column": 3
        },
        "end": {
          "row": 46,
          "column": 11
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 46,
          "column": 11
        },
        "end": {
          "row": 46,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 46,
          "column": 12
        },
        "end": {
          "row": 46,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 46,
          "column": 12
        },
        "end": {
          "row": 46,
          "column": 20
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_intersecting(Point start, Point end)",
        "start": {
          "row": 46,
          "column": 22
        },
        "end": {
          "row": 46,
          "column": 63
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_intersecting",
        "start": {
          "row": 46,
          "column": 22
        },
        "end": {
          "row": 46,
          "column": 39
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point start, Point end)",
        "start": {
          "row": 46,
          "column": 39
        },
        "end": {
          "row": 46,
          "column": 63
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point start",
        "start": {
          "row": 46,
          "column": 40
        },
        "end": {
          "row": 46,
          "column": 51
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 46,
          "column": 40
        },
        "end": {
          "row": 46,
          "column": 45
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 46,
          "column": 46
        },
        "end": {
          "row": 46,
          "column": 51
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point end",
        "start": {
          "row": 46,
          "column": 53
        },
        "end": {
          "row": 46,
          "column": 62
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 46,
          "column": 53
        },
        "end": {
          "row": 46,
          "column": 58
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 46,
          "column": 59
        },
        "end": {
          "row": 46,
          "column": 62
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> find_containing(Point start, Point end);",
        "start": {
          "row": 47,
          "column": 3
        },
        "end": {
          "row": 47,
          "column": 62
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 47,
          "column": 3
        },
        "end": {
          "row": 47,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 47,
          "column": 3
        },
        "end": {
          "row": 47,
          "column": 11
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 47,
          "column": 11
        },
        "end": {
          "row": 47,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 47,
          "column": 12
        },
        "end": {
          "row": 47,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 47,
          "column": 12
        },
        "end": {
          "row": 47,
          "column": 20
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_containing(Point start, Point end)",
        "start": {
          "row": 47,
          "column": 22
        },
        "end": {
          "row": 47,
          "column": 61
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_containing",
        "start": {
          "row": 47,
          "column": 22
        },
        "end": {
          "row": 47,
          "column": 37
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point start, Point end)",
        "start": {
          "row": 47,
          "column": 37
        },
        "end": {
          "row": 47,
          "column": 61
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point start",
        "start": {
          "row": 47,
          "column": 38
        },
        "end": {
          "row": 47,
          "column": 49
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 47,
          "column": 38
        },
        "end": {
          "row": 47,
          "column": 43
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 47,
          "column": 44
        },
        "end": {
          "row": 47,
          "column": 49
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point end",
        "start": {
          "row": 47,
          "column": 51
        },
        "end": {
          "row": 47,
          "column": 60
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 47,
          "column": 51
        },
        "end": {
          "row": 47,
          "column": 56
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 47,
          "column": 57
        },
        "end": {
          "row": 47,
          "column": 60
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> find_contained_in(Point start, Point end);",
        "start": {
          "row": 48,
          "column": 3
        },
        "end": {
          "row": 48,
          "column": 64
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 48,
          "column": 3
        },
        "end": {
          "row": 48,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 48,
          "column": 3
        },
        "end": {
          "row": 48,
          "column": 11
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 48,
          "column": 11
        },
        "end": {
          "row": 48,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 48,
          "column": 12
        },
        "end": {
          "row": 48,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 48,
          "column": 12
        },
        "end": {
          "row": 48,
          "column": 20
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_contained_in(Point start, Point end)",
        "start": {
          "row": 48,
          "column": 22
        },
        "end": {
          "row": 48,
          "column": 63
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_contained_in",
        "start": {
          "row": 48,
          "column": 22
        },
        "end": {
          "row": 48,
          "column": 39
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point start, Point end)",
        "start": {
          "row": 48,
          "column": 39
        },
        "end": {
          "row": 48,
          "column": 63
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point start",
        "start": {
          "row": 48,
          "column": 40
        },
        "end": {
          "row": 48,
          "column": 51
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 48,
          "column": 40
        },
        "end": {
          "row": 48,
          "column": 45
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 48,
          "column": 46
        },
        "end": {
          "row": 48,
          "column": 51
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point end",
        "start": {
          "row": 48,
          "column": 53
        },
        "end": {
          "row": 48,
          "column": 62
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 48,
          "column": 53
        },
        "end": {
          "row": 48,
          "column": 58
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 48,
          "column": 59
        },
        "end": {
          "row": 48,
          "column": 62
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> find_starting_in(Point start, Point end);",
        "start": {
          "row": 49,
          "column": 3
        },
        "end": {
          "row": 49,
          "column": 63
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 49,
          "column": 3
        },
        "end": {
          "row": 49,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 49,
          "column": 3
        },
        "end": {
          "row": 49,
          "column": 11
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 49,
          "column": 11
        },
        "end": {
          "row": 49,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 49,
          "column": 12
        },
        "end": {
          "row": 49,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 49,
          "column": 12
        },
        "end": {
          "row": 49,
          "column": 20
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_starting_in(Point start, Point end)",
        "start": {
          "row": 49,
          "column": 22
        },
        "end": {
          "row": 49,
          "column": 62
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_starting_in",
        "start": {
          "row": 49,
          "column": 22
        },
        "end": {
          "row": 49,
          "column": 38
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point start, Point end)",
        "start": {
          "row": 49,
          "column": 38
        },
        "end": {
          "row": 49,
          "column": 62
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point start",
        "start": {
          "row": 49,
          "column": 39
        },
        "end": {
          "row": 49,
          "column": 50
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 49,
          "column": 39
        },
        "end": {
          "row": 49,
          "column": 44
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 49,
          "column": 45
        },
        "end": {
          "row": 49,
          "column": 50
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point end",
        "start": {
          "row": 49,
          "column": 52
        },
        "end": {
          "row": 49,
          "column": 61
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 49,
          "column": 52
        },
        "end": {
          "row": 49,
          "column": 57
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 49,
          "column": 58
        },
        "end": {
          "row": 49,
          "column": 61
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> find_starting_at(Point position);",
        "start": {
          "row": 50,
          "column": 3
        },
        "end": {
          "row": 50,
          "column": 55
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 50,
          "column": 3
        },
        "end": {
          "row": 50,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 50,
          "column": 3
        },
        "end": {
          "row": 50,
          "column": 11
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 50,
          "column": 11
        },
        "end": {
          "row": 50,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 50,
          "column": 12
        },
        "end": {
          "row": 50,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 50,
          "column": 12
        },
        "end": {
          "row": 50,
          "column": 20
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_starting_at(Point position)",
        "start": {
          "row": 50,
          "column": 22
        },
        "end": {
          "row": 50,
          "column": 54
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_starting_at",
        "start": {
          "row": 50,
          "column": 22
        },
        "end": {
          "row": 50,
          "column": 38
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point position)",
        "start": {
          "row": 50,
          "column": 38
        },
        "end": {
          "row": 50,
          "column": 54
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point position",
        "start": {
          "row": 50,
          "column": 39
        },
        "end": {
          "row": 50,
          "column": 53
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 50,
          "column": 39
        },
        "end": {
          "row": 50,
          "column": 44
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "position",
        "start": {
          "row": 50,
          "column": 45
        },
        "end": {
          "row": 50,
          "column": 53
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> find_ending_in(Point start, Point end);",
        "start": {
          "row": 51,
          "column": 3
        },
        "end": {
          "row": 51,
          "column": 61
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 51,
          "column": 3
        },
        "end": {
          "row": 51,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 51,
          "column": 3
        },
        "end": {
          "row": 51,
          "column": 11
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 51,
          "column": 11
        },
        "end": {
          "row": 51,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 51,
          "column": 12
        },
        "end": {
          "row": 51,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 51,
          "column": 12
        },
        "end": {
          "row": 51,
          "column": 20
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_ending_in(Point start, Point end)",
        "start": {
          "row": 51,
          "column": 22
        },
        "end": {
          "row": 51,
          "column": 60
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_ending_in",
        "start": {
          "row": 51,
          "column": 22
        },
        "end": {
          "row": 51,
          "column": 36
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point start, Point end)",
        "start": {
          "row": 51,
          "column": 36
        },
        "end": {
          "row": 51,
          "column": 60
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point start",
        "start": {
          "row": 51,
          "column": 37
        },
        "end": {
          "row": 51,
          "column": 48
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 51,
          "column": 37
        },
        "end": {
          "row": 51,
          "column": 42
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 51,
          "column": 43
        },
        "end": {
          "row": 51,
          "column": 48
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point end",
        "start": {
          "row": 51,
          "column": 50
        },
        "end": {
          "row": 51,
          "column": 59
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 51,
          "column": 50
        },
        "end": {
          "row": 51,
          "column": 55
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 51,
          "column": 56
        },
        "end": {
          "row": 51,
          "column": 59
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> find_ending_at(Point position);",
        "start": {
          "row": 52,
          "column": 3
        },
        "end": {
          "row": 52,
          "column": 53
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 52,
          "column": 3
        },
        "end": {
          "row": 52,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 52,
          "column": 3
        },
        "end": {
          "row": 52,
          "column": 11
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 52,
          "column": 11
        },
        "end": {
          "row": 52,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 52,
          "column": 12
        },
        "end": {
          "row": 52,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 52,
          "column": 12
        },
        "end": {
          "row": 52,
          "column": 20
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_ending_at(Point position)",
        "start": {
          "row": 52,
          "column": 22
        },
        "end": {
          "row": 52,
          "column": 52
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_ending_at",
        "start": {
          "row": 52,
          "column": 22
        },
        "end": {
          "row": 52,
          "column": 36
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point position)",
        "start": {
          "row": 52,
          "column": 36
        },
        "end": {
          "row": 52,
          "column": 52
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point position",
        "start": {
          "row": 52,
          "column": 37
        },
        "end": {
          "row": 52,
          "column": 51
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 52,
          "column": 37
        },
        "end": {
          "row": 52,
          "column": 42
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "position",
        "start": {
          "row": 52,
          "column": 43
        },
        "end": {
          "row": 52,
          "column": 51
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "BoundaryQueryResult find_boundaries_after(Point start, size_t max_count);",
        "start": {
          "row": 53,
          "column": 3
        },
        "end": {
          "row": 53,
          "column": 76
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "BoundaryQueryResult",
        "start": {
          "row": 53,
          "column": 3
        },
        "end": {
          "row": 53,
          "column": 22
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_boundaries_after(Point start, size_t max_count)",
        "start": {
          "row": 53,
          "column": 23
        },
        "end": {
          "row": 53,
          "column": 75
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_boundaries_after",
        "start": {
          "row": 53,
          "column": 23
        },
        "end": {
          "row": 53,
          "column": 44
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point start, size_t max_count)",
        "start": {
          "row": 53,
          "column": 44
        },
        "end": {
          "row": 53,
          "column": 75
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point start",
        "start": {
          "row": 53,
          "column": 45
        },
        "end": {
          "row": 53,
          "column": 56
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 53,
          "column": 45
        },
        "end": {
          "row": 53,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 53,
          "column": 51
        },
        "end": {
          "row": 53,
          "column": 56
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "size_t max_count",
        "start": {
          "row": 53,
          "column": 58
        },
        "end": {
          "row": 53,
          "column": 74
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 53,
          "column": 58
        },
        "end": {
          "row": 53,
          "column": 64
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "max_count",
        "start": {
          "row": 53,
          "column": 65
        },
        "end": {
          "row": 53,
          "column": 74
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::unordered_map<MarkerId, Range> dump();",
        "start": {
          "row": 55,
          "column": 3
        },
        "end": {
          "row": 55,
          "column": 46
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::unordered_map<MarkerId, Range>",
        "start": {
          "row": 55,
          "column": 3
        },
        "end": {
          "row": 55,
          "column": 38
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 55,
          "column": 3
        },
        "end": {
          "row": 55,
          "column": 6
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "unordered_map<MarkerId, Range>",
        "start": {
          "row": 55,
          "column": 8
        },
        "end": {
          "row": 55,
          "column": 38
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "unordered_map",
        "start": {
          "row": 55,
          "column": 8
        },
        "end": {
          "row": 55,
          "column": 21
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId, Range>",
        "start": {
          "row": 55,
          "column": 21
        },
        "end": {
          "row": 55,
          "column": 38
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 55,
          "column": 22
        },
        "end": {
          "row": 55,
          "column": 30
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 55,
          "column": 22
        },
        "end": {
          "row": 55,
          "column": 30
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Range",
        "start": {
          "row": 55,
          "column": 32
        },
        "end": {
          "row": 55,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Range",
        "start": {
          "row": 55,
          "column": 32
        },
        "end": {
          "row": 55,
          "column": 37
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "dump()",
        "start": {
          "row": 55,
          "column": 39
        },
        "end": {
          "row": 55,
          "column": 45
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "dump",
        "start": {
          "row": 55,
          "column": 39
        },
        "end": {
          "row": 55,
          "column": 43
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 55,
          "column": 43
        },
        "end": {
          "row": 55,
          "column": 45
        }
      },
      {
        "kind": "access_specifier",
        "name": "query",
        "text": "private:",
        "start": {
          "row": 57,
          "column": 1
        },
        "end": {
          "row": 57,
          "column": 9
        }
      },
      {
        "kind": "friend_declaration",
        "name": "query",
        "text": "friend class Iterator;",
        "start": {
          "row": 58,
          "column": 3
        },
        "end": {
          "row": 58,
          "column": 25
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Iterator",
        "start": {
          "row": 58,
          "column": 16
        },
        "end": {
          "row": 58,
          "column": 24
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "struct Node {\n    Node *parent;\n    Node *left;\n    Node *right;\n    Point left_extent;\n    flat_set<MarkerId> left_marker_ids;\n    flat_set<MarkerId> right_marker_ids;\n    flat_set<MarkerId> start_marker_ids;\n    flat_set<MarkerId> end_marker_ids;\n    int priority;\n\n    Node(Node *parent, Point left_extent);\n    bool is_marker_endpoint();\n  };",
        "start": {
          "row": 60,
          "column": 3
        },
        "end": {
          "row": 73,
          "column": 5
        }
      },
      {
        "kind": "struct_specifier",
        "name": "query",
        "text": "struct Node {\n    Node *parent;\n    Node *left;\n    Node *right;\n    Point left_extent;\n    flat_set<MarkerId> left_marker_ids;\n    flat_set<MarkerId> right_marker_ids;\n    flat_set<MarkerId> start_marker_ids;\n    flat_set<MarkerId> end_marker_ids;\n    int priority;\n\n    Node(Node *parent, Point left_extent);\n    bool is_marker_endpoint();\n  }",
        "start": {
          "row": 60,
          "column": 3
        },
        "end": {
          "row": 73,
          "column": 4
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 60,
          "column": 10
        },
        "end": {
          "row": 60,
          "column": 14
        }
      },
      {
        "kind": "field_declaration_list",
        "name": "query",
        "text": "{\n    Node *parent;\n    Node *left;\n    Node *right;\n    Point left_extent;\n    flat_set<MarkerId> left_marker_ids;\n    flat_set<MarkerId> right_marker_ids;\n    flat_set<MarkerId> start_marker_ids;\n    flat_set<MarkerId> end_marker_ids;\n    int priority;\n\n    Node(Node *parent, Point left_extent);\n    bool is_marker_endpoint();\n  }",
        "start": {
          "row": 60,
          "column": 15
        },
        "end": {
          "row": 73,
          "column": 4
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node *parent;",
        "start": {
          "row": 61,
          "column": 5
        },
        "end": {
          "row": 61,
          "column": 18
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 61,
          "column": 5
        },
        "end": {
          "row": 61,
          "column": 9
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*parent",
        "start": {
          "row": 61,
          "column": 10
        },
        "end": {
          "row": 61,
          "column": 17
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "parent",
        "start": {
          "row": 61,
          "column": 11
        },
        "end": {
          "row": 61,
          "column": 17
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node *left;",
        "start": {
          "row": 62,
          "column": 5
        },
        "end": {
          "row": 62,
          "column": 16
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 62,
          "column": 5
        },
        "end": {
          "row": 62,
          "column": 9
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*left",
        "start": {
          "row": 62,
          "column": 10
        },
        "end": {
          "row": 62,
          "column": 15
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "left",
        "start": {
          "row": 62,
          "column": 11
        },
        "end": {
          "row": 62,
          "column": 15
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node *right;",
        "start": {
          "row": 63,
          "column": 5
        },
        "end": {
          "row": 63,
          "column": 17
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 63,
          "column": 5
        },
        "end": {
          "row": 63,
          "column": 9
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*right",
        "start": {
          "row": 63,
          "column": 10
        },
        "end": {
          "row": 63,
          "column": 16
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "right",
        "start": {
          "row": 63,
          "column": 11
        },
        "end": {
          "row": 63,
          "column": 16
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Point left_extent;",
        "start": {
          "row": 64,
          "column": 5
        },
        "end": {
          "row": 64,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 64,
          "column": 5
        },
        "end": {
          "row": 64,
          "column": 10
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "left_extent",
        "start": {
          "row": 64,
          "column": 11
        },
        "end": {
          "row": 64,
          "column": 22
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> left_marker_ids;",
        "start": {
          "row": 65,
          "column": 5
        },
        "end": {
          "row": 65,
          "column": 40
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 65,
          "column": 5
        },
        "end": {
          "row": 65,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 65,
          "column": 5
        },
        "end": {
          "row": 65,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 65,
          "column": 13
        },
        "end": {
          "row": 65,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 65,
          "column": 14
        },
        "end": {
          "row": 65,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 65,
          "column": 14
        },
        "end": {
          "row": 65,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "left_marker_ids",
        "start": {
          "row": 65,
          "column": 24
        },
        "end": {
          "row": 65,
          "column": 39
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> right_marker_ids;",
        "start": {
          "row": 66,
          "column": 5
        },
        "end": {
          "row": 66,
          "column": 41
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 66,
          "column": 5
        },
        "end": {
          "row": 66,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 66,
          "column": 5
        },
        "end": {
          "row": 66,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 66,
          "column": 13
        },
        "end": {
          "row": 66,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 66,
          "column": 14
        },
        "end": {
          "row": 66,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 66,
          "column": 14
        },
        "end": {
          "row": 66,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "right_marker_ids",
        "start": {
          "row": 66,
          "column": 24
        },
        "end": {
          "row": 66,
          "column": 40
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> start_marker_ids;",
        "start": {
          "row": 67,
          "column": 5
        },
        "end": {
          "row": 67,
          "column": 41
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 67,
          "column": 5
        },
        "end": {
          "row": 67,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 67,
          "column": 5
        },
        "end": {
          "row": 67,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 67,
          "column": 13
        },
        "end": {
          "row": 67,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 67,
          "column": 14
        },
        "end": {
          "row": 67,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 67,
          "column": 14
        },
        "end": {
          "row": 67,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "start_marker_ids",
        "start": {
          "row": 67,
          "column": 24
        },
        "end": {
          "row": 67,
          "column": 40
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> end_marker_ids;",
        "start": {
          "row": 68,
          "column": 5
        },
        "end": {
          "row": 68,
          "column": 39
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 68,
          "column": 5
        },
        "end": {
          "row": 68,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 68,
          "column": 5
        },
        "end": {
          "row": 68,
          "column": 13
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 68,
          "column": 13
        },
        "end": {
          "row": 68,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 68,
          "column": 14
        },
        "end": {
          "row": 68,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 68,
          "column": 14
        },
        "end": {
          "row": 68,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "end_marker_ids",
        "start": {
          "row": 68,
          "column": 24
        },
        "end": {
          "row": 68,
          "column": 38
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "int priority;",
        "start": {
          "row": 69,
          "column": 5
        },
        "end": {
          "row": 69,
          "column": 18
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "int",
        "start": {
          "row": 69,
          "column": 5
        },
        "end": {
          "row": 69,
          "column": 8
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "priority",
        "start": {
          "row": 69,
          "column": 9
        },
        "end": {
          "row": 69,
          "column": 17
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "Node(Node *parent, Point left_extent);",
        "start": {
          "row": 71,
          "column": 5
        },
        "end": {
          "row": 71,
          "column": 43
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Node(Node *parent, Point left_extent)",
        "start": {
          "row": 71,
          "column": 5
        },
        "end": {
          "row": 71,
          "column": 42
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 71,
          "column": 5
        },
        "end": {
          "row": 71,
          "column": 9
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Node *parent, Point left_extent)",
        "start": {
          "row": 71,
          "column": 9
        },
        "end": {
          "row": 71,
          "column": 42
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Node *parent",
        "start": {
          "row": 71,
          "column": 10
        },
        "end": {
          "row": 71,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 71,
          "column": 10
        },
        "end": {
          "row": 71,
          "column": 14
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*parent",
        "start": {
          "row": 71,
          "column": 15
        },
        "end": {
          "row": 71,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "parent",
        "start": {
          "row": 71,
          "column": 16
        },
        "end": {
          "row": 71,
          "column": 22
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point left_extent",
        "start": {
          "row": 71,
          "column": 24
        },
        "end": {
          "row": 71,
          "column": 41
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 71,
          "column": 24
        },
        "end": {
          "row": 71,
          "column": 29
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "left_extent",
        "start": {
          "row": 71,
          "column": 30
        },
        "end": {
          "row": 71,
          "column": 41
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "bool is_marker_endpoint();",
        "start": {
          "row": 72,
          "column": 5
        },
        "end": {
          "row": 72,
          "column": 31
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "bool",
        "start": {
          "row": 72,
          "column": 5
        },
        "end": {
          "row": 72,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "is_marker_endpoint()",
        "start": {
          "row": 72,
          "column": 10
        },
        "end": {
          "row": 72,
          "column": 30
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "is_marker_endpoint",
        "start": {
          "row": 72,
          "column": 10
        },
        "end": {
          "row": 72,
          "column": 28
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 72,
          "column": 28
        },
        "end": {
          "row": 72,
          "column": 30
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "class Iterator {\n  public:\n    Iterator(MarkerIndex *marker_index);\n    void reset();\n    Node* insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_splice_boundary(const Point &position, bool is_insertion_end);\n    void find_intersecting(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_contained_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_starting_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_ending_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_boundaries_after(Point start, size_t max_count, BoundaryQueryResult *result);\n    std::unordered_map<MarkerId, Range> dump();\n\n  private:\n    void ascend();\n    void descend_left();\n    void descend_right();\n    void move_to_successor();\n    void seek_to_first_node_greater_than_or_equal_to(const Point &position);\n    void mark_right(const MarkerId &id, const Point &start_position, const Point &end_position);\n    void mark_left(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_left_child(const Point &position);\n    Node* insert_right_child(const Point &position);\n    void check_intersection(const Point &start, const Point &end, flat_set<MarkerId> *results);\n    void cache_node_position() const;\n\n    MarkerIndex *marker_index;\n    Node *current_node;\n    Point current_node_position;\n    Point left_ancestor_position;\n    Point right_ancestor_position;\n    std::vector<Point> left_ancestor_position_stack;\n    std::vector<Point> right_ancestor_position_stack;\n  };",
        "start": {
          "row": 75,
          "column": 3
        },
        "end": {
          "row": 109,
          "column": 5
        }
      },
      {
        "kind": "class_specifier",
        "name": "query",
        "text": "class Iterator {\n  public:\n    Iterator(MarkerIndex *marker_index);\n    void reset();\n    Node* insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_splice_boundary(const Point &position, bool is_insertion_end);\n    void find_intersecting(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_contained_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_starting_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_ending_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_boundaries_after(Point start, size_t max_count, BoundaryQueryResult *result);\n    std::unordered_map<MarkerId, Range> dump();\n\n  private:\n    void ascend();\n    void descend_left();\n    void descend_right();\n    void move_to_successor();\n    void seek_to_first_node_greater_than_or_equal_to(const Point &position);\n    void mark_right(const MarkerId &id, const Point &start_position, const Point &end_position);\n    void mark_left(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_left_child(const Point &position);\n    Node* insert_right_child(const Point &position);\n    void check_intersection(const Point &start, const Point &end, flat_set<MarkerId> *results);\n    void cache_node_position() const;\n\n    MarkerIndex *marker_index;\n    Node *current_node;\n    Point current_node_position;\n    Point left_ancestor_position;\n    Point right_ancestor_position;\n    std::vector<Point> left_ancestor_position_stack;\n    std::vector<Point> right_ancestor_position_stack;\n  }",
        "start": {
          "row": 75,
          "column": 3
        },
        "end": {
          "row": 109,
          "column": 4
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Iterator",
        "start": {
          "row": 75,
          "column": 9
        },
        "end": {
          "row": 75,
          "column": 17
        }
      },
      {
        "kind": "field_declaration_list",
        "name": "query",
        "text": "{\n  public:\n    Iterator(MarkerIndex *marker_index);\n    void reset();\n    Node* insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_splice_boundary(const Point &position, bool is_insertion_end);\n    void find_intersecting(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_contained_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_starting_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_ending_in(const Point &start, const Point &end, flat_set<MarkerId> *result);\n    void find_boundaries_after(Point start, size_t max_count, BoundaryQueryResult *result);\n    std::unordered_map<MarkerId, Range> dump();\n\n  private:\n    void ascend();\n    void descend_left();\n    void descend_right();\n    void move_to_successor();\n    void seek_to_first_node_greater_than_or_equal_to(const Point &position);\n    void mark_right(const MarkerId &id, const Point &start_position, const Point &end_position);\n    void mark_left(const MarkerId &id, const Point &start_position, const Point &end_position);\n    Node* insert_left_child(const Point &position);\n    Node* insert_right_child(const Point &position);\n    void check_intersection(const Point &start, const Point &end, flat_set<MarkerId> *results);\n    void cache_node_position() const;\n\n    MarkerIndex *marker_index;\n    Node *current_node;\n    Point current_node_position;\n    Point left_ancestor_position;\n    Point right_ancestor_position;\n    std::vector<Point> left_ancestor_position_stack;\n    std::vector<Point> right_ancestor_position_stack;\n  }",
        "start": {
          "row": 75,
          "column": 18
        },
        "end": {
          "row": 109,
          "column": 4
        }
      },
      {
        "kind": "access_specifier",
        "name": "query",
        "text": "public:",
        "start": {
          "row": 76,
          "column": 3
        },
        "end": {
          "row": 76,
          "column": 10
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "Iterator(MarkerIndex *marker_index);",
        "start": {
          "row": 77,
          "column": 5
        },
        "end": {
          "row": 77,
          "column": 41
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Iterator(MarkerIndex *marker_index)",
        "start": {
          "row": 77,
          "column": 5
        },
        "end": {
          "row": 77,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Iterator",
        "start": {
          "row": 77,
          "column": 5
        },
        "end": {
          "row": 77,
          "column": 13
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(MarkerIndex *marker_index)",
        "start": {
          "row": 77,
          "column": 13
        },
        "end": {
          "row": 77,
          "column": 40
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "MarkerIndex *marker_index",
        "start": {
          "row": 77,
          "column": 14
        },
        "end": {
          "row": 77,
          "column": 39
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerIndex",
        "start": {
          "row": 77,
          "column": 14
        },
        "end": {
          "row": 77,
          "column": 25
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*marker_index",
        "start": {
          "row": 77,
          "column": 26
        },
        "end": {
          "row": 77,
          "column": 39
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "marker_index",
        "start": {
          "row": 77,
          "column": 27
        },
        "end": {
          "row": 77,
          "column": 39
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void reset();",
        "start": {
          "row": 78,
          "column": 5
        },
        "end": {
          "row": 78,
          "column": 18
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 78,
          "column": 5
        },
        "end": {
          "row": 78,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "reset()",
        "start": {
          "row": 78,
          "column": 10
        },
        "end": {
          "row": 78,
          "column": 17
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "reset",
        "start": {
          "row": 78,
          "column": 10
        },
        "end": {
          "row": 78,
          "column": 15
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 78,
          "column": 15
        },
        "end": {
          "row": 78,
          "column": 17
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node* insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position);",
        "start": {
          "row": 79,
          "column": 5
        },
        "end": {
          "row": 79,
          "column": 107
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 79,
          "column": 5
        },
        "end": {
          "row": 79,
          "column": 9
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "* insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 79,
          "column": 9
        },
        "end": {
          "row": 79,
          "column": 106
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "insert_marker_start(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 79,
          "column": 11
        },
        "end": {
          "row": 79,
          "column": 106
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "insert_marker_start",
        "start": {
          "row": 79,
          "column": 11
        },
        "end": {
          "row": 79,
          "column": 30
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 79,
          "column": 30
        },
        "end": {
          "row": 79,
          "column": 106
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const MarkerId &id",
        "start": {
          "row": 79,
          "column": 31
        },
        "end": {
          "row": 79,
          "column": 49
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 79,
          "column": 31
        },
        "end": {
          "row": 79,
          "column": 36
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 79,
          "column": 37
        },
        "end": {
          "row": 79,
          "column": 45
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&id",
        "start": {
          "row": 79,
          "column": 46
        },
        "end": {
          "row": 79,
          "column": 49
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 79,
          "column": 47
        },
        "end": {
          "row": 79,
          "column": 49
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &start_position",
        "start": {
          "row": 79,
          "column": 51
        },
        "end": {
          "row": 79,
          "column": 78
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 79,
          "column": 51
        },
        "end": {
          "row": 79,
          "column": 56
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 79,
          "column": 57
        },
        "end": {
          "row": 79,
          "column": 62
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&start_position",
        "start": {
          "row": 79,
          "column": 63
        },
        "end": {
          "row": 79,
          "column": 78
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start_position",
        "start": {
          "row": 79,
          "column": 64
        },
        "end": {
          "row": 79,
          "column": 78
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &end_position",
        "start": {
          "row": 79,
          "column": 80
        },
        "end": {
          "row": 79,
          "column": 105
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 79,
          "column": 80
        },
        "end": {
          "row": 79,
          "column": 85
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 79,
          "column": 86
        },
        "end": {
          "row": 79,
          "column": 91
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&end_position",
        "start": {
          "row": 79,
          "column": 92
        },
        "end": {
          "row": 79,
          "column": 105
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end_position",
        "start": {
          "row": 79,
          "column": 93
        },
        "end": {
          "row": 79,
          "column": 105
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node* insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position);",
        "start": {
          "row": 80,
          "column": 5
        },
        "end": {
          "row": 80,
          "column": 105
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 80,
          "column": 5
        },
        "end": {
          "row": 80,
          "column": 9
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "* insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 80,
          "column": 9
        },
        "end": {
          "row": 80,
          "column": 104
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "insert_marker_end(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 80,
          "column": 11
        },
        "end": {
          "row": 80,
          "column": 104
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "insert_marker_end",
        "start": {
          "row": 80,
          "column": 11
        },
        "end": {
          "row": 80,
          "column": 28
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 80,
          "column": 28
        },
        "end": {
          "row": 80,
          "column": 104
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const MarkerId &id",
        "start": {
          "row": 80,
          "column": 29
        },
        "end": {
          "row": 80,
          "column": 47
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 80,
          "column": 29
        },
        "end": {
          "row": 80,
          "column": 34
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 80,
          "column": 35
        },
        "end": {
          "row": 80,
          "column": 43
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&id",
        "start": {
          "row": 80,
          "column": 44
        },
        "end": {
          "row": 80,
          "column": 47
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 80,
          "column": 45
        },
        "end": {
          "row": 80,
          "column": 47
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &start_position",
        "start": {
          "row": 80,
          "column": 49
        },
        "end": {
          "row": 80,
          "column": 76
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 80,
          "column": 49
        },
        "end": {
          "row": 80,
          "column": 54
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 80,
          "column": 55
        },
        "end": {
          "row": 80,
          "column": 60
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&start_position",
        "start": {
          "row": 80,
          "column": 61
        },
        "end": {
          "row": 80,
          "column": 76
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start_position",
        "start": {
          "row": 80,
          "column": 62
        },
        "end": {
          "row": 80,
          "column": 76
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &end_position",
        "start": {
          "row": 80,
          "column": 78
        },
        "end": {
          "row": 80,
          "column": 103
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 80,
          "column": 78
        },
        "end": {
          "row": 80,
          "column": 83
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 80,
          "column": 84
        },
        "end": {
          "row": 80,
          "column": 89
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&end_position",
        "start": {
          "row": 80,
          "column": 90
        },
        "end": {
          "row": 80,
          "column": 103
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end_position",
        "start": {
          "row": 80,
          "column": 91
        },
        "end": {
          "row": 80,
          "column": 103
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node* insert_splice_boundary(const Point &position, bool is_insertion_end);",
        "start": {
          "row": 81,
          "column": 5
        },
        "end": {
          "row": 81,
          "column": 80
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 81,
          "column": 5
        },
        "end": {
          "row": 81,
          "column": 9
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "* insert_splice_boundary(const Point &position, bool is_insertion_end)",
        "start": {
          "row": 81,
          "column": 9
        },
        "end": {
          "row": 81,
          "column": 79
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "insert_splice_boundary(const Point &position, bool is_insertion_end)",
        "start": {
          "row": 81,
          "column": 11
        },
        "end": {
          "row": 81,
          "column": 79
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "insert_splice_boundary",
        "start": {
          "row": 81,
          "column": 11
        },
        "end": {
          "row": 81,
          "column": 33
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Point &position, bool is_insertion_end)",
        "start": {
          "row": 81,
          "column": 33
        },
        "end": {
          "row": 81,
          "column": 79
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &position",
        "start": {
          "row": 81,
          "column": 34
        },
        "end": {
          "row": 81,
          "column": 55
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 81,
          "column": 34
        },
        "end": {
          "row": 81,
          "column": 39
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 81,
          "column": 40
        },
        "end": {
          "row": 81,
          "column": 45
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&position",
        "start": {
          "row": 81,
          "column": 46
        },
        "end": {
          "row": 81,
          "column": 55
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "position",
        "start": {
          "row": 81,
          "column": 47
        },
        "end": {
          "row": 81,
          "column": 55
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "bool is_insertion_end",
        "start": {
          "row": 81,
          "column": 57
        },
        "end": {
          "row": 81,
          "column": 78
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "bool",
        "start": {
          "row": 81,
          "column": 57
        },
        "end": {
          "row": 81,
          "column": 61
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "is_insertion_end",
        "start": {
          "row": 81,
          "column": 62
        },
        "end": {
          "row": 81,
          "column": 78
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void find_intersecting(const Point &start, const Point &end, flat_set<MarkerId> *result);",
        "start": {
          "row": 82,
          "column": 5
        },
        "end": {
          "row": 82,
          "column": 94
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 82,
          "column": 5
        },
        "end": {
          "row": 82,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_intersecting(const Point &start, const Point &end, flat_set<MarkerId> *result)",
        "start": {
          "row": 82,
          "column": 10
        },
        "end": {
          "row": 82,
          "column": 93
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_intersecting",
        "start": {
          "row": 82,
          "column": 10
        },
        "end": {
          "row": 82,
          "column": 27
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Point &start, const Point &end, flat_set<MarkerId> *result)",
        "start": {
          "row": 82,
          "column": 27
        },
        "end": {
          "row": 82,
          "column": 93
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &start",
        "start": {
          "row": 82,
          "column": 28
        },
        "end": {
          "row": 82,
          "column": 46
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 82,
          "column": 28
        },
        "end": {
          "row": 82,
          "column": 33
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 82,
          "column": 34
        },
        "end": {
          "row": 82,
          "column": 39
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&start",
        "start": {
          "row": 82,
          "column": 40
        },
        "end": {
          "row": 82,
          "column": 46
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 82,
          "column": 41
        },
        "end": {
          "row": 82,
          "column": 46
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &end",
        "start": {
          "row": 82,
          "column": 48
        },
        "end": {
          "row": 82,
          "column": 64
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 82,
          "column": 48
        },
        "end": {
          "row": 82,
          "column": 53
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 82,
          "column": 54
        },
        "end": {
          "row": 82,
          "column": 59
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&end",
        "start": {
          "row": 82,
          "column": 60
        },
        "end": {
          "row": 82,
          "column": 64
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 82,
          "column": 61
        },
        "end": {
          "row": 82,
          "column": 64
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> *result",
        "start": {
          "row": 82,
          "column": 66
        },
        "end": {
          "row": 82,
          "column": 92
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 82,
          "column": 66
        },
        "end": {
          "row": 82,
          "column": 84
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 82,
          "column": 66
        },
        "end": {
          "row": 82,
          "column": 74
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 82,
          "column": 74
        },
        "end": {
          "row": 82,
          "column": 84
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 82,
          "column": 75
        },
        "end": {
          "row": 82,
          "column": 83
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 82,
          "column": 75
        },
        "end": {
          "row": 82,
          "column": 83
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*result",
        "start": {
          "row": 82,
          "column": 85
        },
        "end": {
          "row": 82,
          "column": 92
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 82,
          "column": 86
        },
        "end": {
          "row": 82,
          "column": 92
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void find_contained_in(const Point &start, const Point &end, flat_set<MarkerId> *result);",
        "start": {
          "row": 83,
          "column": 5
        },
        "end": {
          "row": 83,
          "column": 94
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 83,
          "column": 5
        },
        "end": {
          "row": 83,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_contained_in(const Point &start, const Point &end, flat_set<MarkerId> *result)",
        "start": {
          "row": 83,
          "column": 10
        },
        "end": {
          "row": 83,
          "column": 93
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_contained_in",
        "start": {
          "row": 83,
          "column": 10
        },
        "end": {
          "row": 83,
          "column": 27
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Point &start, const Point &end, flat_set<MarkerId> *result)",
        "start": {
          "row": 83,
          "column": 27
        },
        "end": {
          "row": 83,
          "column": 93
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &start",
        "start": {
          "row": 83,
          "column": 28
        },
        "end": {
          "row": 83,
          "column": 46
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 83,
          "column": 28
        },
        "end": {
          "row": 83,
          "column": 33
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 83,
          "column": 34
        },
        "end": {
          "row": 83,
          "column": 39
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&start",
        "start": {
          "row": 83,
          "column": 40
        },
        "end": {
          "row": 83,
          "column": 46
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 83,
          "column": 41
        },
        "end": {
          "row": 83,
          "column": 46
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &end",
        "start": {
          "row": 83,
          "column": 48
        },
        "end": {
          "row": 83,
          "column": 64
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 83,
          "column": 48
        },
        "end": {
          "row": 83,
          "column": 53
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 83,
          "column": 54
        },
        "end": {
          "row": 83,
          "column": 59
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&end",
        "start": {
          "row": 83,
          "column": 60
        },
        "end": {
          "row": 83,
          "column": 64
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 83,
          "column": 61
        },
        "end": {
          "row": 83,
          "column": 64
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> *result",
        "start": {
          "row": 83,
          "column": 66
        },
        "end": {
          "row": 83,
          "column": 92
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 83,
          "column": 66
        },
        "end": {
          "row": 83,
          "column": 84
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 83,
          "column": 66
        },
        "end": {
          "row": 83,
          "column": 74
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 83,
          "column": 74
        },
        "end": {
          "row": 83,
          "column": 84
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 83,
          "column": 75
        },
        "end": {
          "row": 83,
          "column": 83
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 83,
          "column": 75
        },
        "end": {
          "row": 83,
          "column": 83
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*result",
        "start": {
          "row": 83,
          "column": 85
        },
        "end": {
          "row": 83,
          "column": 92
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 83,
          "column": 86
        },
        "end": {
          "row": 83,
          "column": 92
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void find_starting_in(const Point &start, const Point &end, flat_set<MarkerId> *result);",
        "start": {
          "row": 84,
          "column": 5
        },
        "end": {
          "row": 84,
          "column": 93
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 84,
          "column": 5
        },
        "end": {
          "row": 84,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_starting_in(const Point &start, const Point &end, flat_set<MarkerId> *result)",
        "start": {
          "row": 84,
          "column": 10
        },
        "end": {
          "row": 84,
          "column": 92
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_starting_in",
        "start": {
          "row": 84,
          "column": 10
        },
        "end": {
          "row": 84,
          "column": 26
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Point &start, const Point &end, flat_set<MarkerId> *result)",
        "start": {
          "row": 84,
          "column": 26
        },
        "end": {
          "row": 84,
          "column": 92
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &start",
        "start": {
          "row": 84,
          "column": 27
        },
        "end": {
          "row": 84,
          "column": 45
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 84,
          "column": 27
        },
        "end": {
          "row": 84,
          "column": 32
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 84,
          "column": 33
        },
        "end": {
          "row": 84,
          "column": 38
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&start",
        "start": {
          "row": 84,
          "column": 39
        },
        "end": {
          "row": 84,
          "column": 45
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 84,
          "column": 40
        },
        "end": {
          "row": 84,
          "column": 45
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &end",
        "start": {
          "row": 84,
          "column": 47
        },
        "end": {
          "row": 84,
          "column": 63
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 84,
          "column": 47
        },
        "end": {
          "row": 84,
          "column": 52
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 84,
          "column": 53
        },
        "end": {
          "row": 84,
          "column": 58
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&end",
        "start": {
          "row": 84,
          "column": 59
        },
        "end": {
          "row": 84,
          "column": 63
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 84,
          "column": 60
        },
        "end": {
          "row": 84,
          "column": 63
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> *result",
        "start": {
          "row": 84,
          "column": 65
        },
        "end": {
          "row": 84,
          "column": 91
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 84,
          "column": 65
        },
        "end": {
          "row": 84,
          "column": 83
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 84,
          "column": 65
        },
        "end": {
          "row": 84,
          "column": 73
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 84,
          "column": 73
        },
        "end": {
          "row": 84,
          "column": 83
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 84,
          "column": 74
        },
        "end": {
          "row": 84,
          "column": 82
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 84,
          "column": 74
        },
        "end": {
          "row": 84,
          "column": 82
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*result",
        "start": {
          "row": 84,
          "column": 84
        },
        "end": {
          "row": 84,
          "column": 91
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 84,
          "column": 85
        },
        "end": {
          "row": 84,
          "column": 91
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void find_ending_in(const Point &start, const Point &end, flat_set<MarkerId> *result);",
        "start": {
          "row": 85,
          "column": 5
        },
        "end": {
          "row": 85,
          "column": 91
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 85,
          "column": 5
        },
        "end": {
          "row": 85,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_ending_in(const Point &start, const Point &end, flat_set<MarkerId> *result)",
        "start": {
          "row": 85,
          "column": 10
        },
        "end": {
          "row": 85,
          "column": 90
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_ending_in",
        "start": {
          "row": 85,
          "column": 10
        },
        "end": {
          "row": 85,
          "column": 24
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Point &start, const Point &end, flat_set<MarkerId> *result)",
        "start": {
          "row": 85,
          "column": 24
        },
        "end": {
          "row": 85,
          "column": 90
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &start",
        "start": {
          "row": 85,
          "column": 25
        },
        "end": {
          "row": 85,
          "column": 43
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 85,
          "column": 25
        },
        "end": {
          "row": 85,
          "column": 30
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 85,
          "column": 31
        },
        "end": {
          "row": 85,
          "column": 36
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&start",
        "start": {
          "row": 85,
          "column": 37
        },
        "end": {
          "row": 85,
          "column": 43
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 85,
          "column": 38
        },
        "end": {
          "row": 85,
          "column": 43
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &end",
        "start": {
          "row": 85,
          "column": 45
        },
        "end": {
          "row": 85,
          "column": 61
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 85,
          "column": 45
        },
        "end": {
          "row": 85,
          "column": 50
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 85,
          "column": 51
        },
        "end": {
          "row": 85,
          "column": 56
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&end",
        "start": {
          "row": 85,
          "column": 57
        },
        "end": {
          "row": 85,
          "column": 61
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 85,
          "column": 58
        },
        "end": {
          "row": 85,
          "column": 61
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> *result",
        "start": {
          "row": 85,
          "column": 63
        },
        "end": {
          "row": 85,
          "column": 89
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 85,
          "column": 63
        },
        "end": {
          "row": 85,
          "column": 81
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 85,
          "column": 63
        },
        "end": {
          "row": 85,
          "column": 71
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 85,
          "column": 71
        },
        "end": {
          "row": 85,
          "column": 81
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 85,
          "column": 72
        },
        "end": {
          "row": 85,
          "column": 80
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 85,
          "column": 72
        },
        "end": {
          "row": 85,
          "column": 80
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*result",
        "start": {
          "row": 85,
          "column": 82
        },
        "end": {
          "row": 85,
          "column": 89
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 85,
          "column": 83
        },
        "end": {
          "row": 85,
          "column": 89
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void find_boundaries_after(Point start, size_t max_count, BoundaryQueryResult *result);",
        "start": {
          "row": 86,
          "column": 5
        },
        "end": {
          "row": 86,
          "column": 92
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 86,
          "column": 5
        },
        "end": {
          "row": 86,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "find_boundaries_after(Point start, size_t max_count, BoundaryQueryResult *result)",
        "start": {
          "row": 86,
          "column": 10
        },
        "end": {
          "row": 86,
          "column": 91
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "find_boundaries_after",
        "start": {
          "row": 86,
          "column": 10
        },
        "end": {
          "row": 86,
          "column": 31
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Point start, size_t max_count, BoundaryQueryResult *result)",
        "start": {
          "row": 86,
          "column": 31
        },
        "end": {
          "row": 86,
          "column": 91
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Point start",
        "start": {
          "row": 86,
          "column": 32
        },
        "end": {
          "row": 86,
          "column": 43
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 86,
          "column": 32
        },
        "end": {
          "row": 86,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 86,
          "column": 38
        },
        "end": {
          "row": 86,
          "column": 43
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "size_t max_count",
        "start": {
          "row": 86,
          "column": 45
        },
        "end": {
          "row": 86,
          "column": 61
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 86,
          "column": 45
        },
        "end": {
          "row": 86,
          "column": 51
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "max_count",
        "start": {
          "row": 86,
          "column": 52
        },
        "end": {
          "row": 86,
          "column": 61
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "BoundaryQueryResult *result",
        "start": {
          "row": 86,
          "column": 63
        },
        "end": {
          "row": 86,
          "column": 90
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "BoundaryQueryResult",
        "start": {
          "row": 86,
          "column": 63
        },
        "end": {
          "row": 86,
          "column": 82
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*result",
        "start": {
          "row": 86,
          "column": 83
        },
        "end": {
          "row": 86,
          "column": 90
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 86,
          "column": 84
        },
        "end": {
          "row": 86,
          "column": 90
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::unordered_map<MarkerId, Range> dump();",
        "start": {
          "row": 87,
          "column": 5
        },
        "end": {
          "row": 87,
          "column": 48
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::unordered_map<MarkerId, Range>",
        "start": {
          "row": 87,
          "column": 5
        },
        "end": {
          "row": 87,
          "column": 40
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 87,
          "column": 5
        },
        "end": {
          "row": 87,
          "column": 8
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "unordered_map<MarkerId, Range>",
        "start": {
          "row": 87,
          "column": 10
        },
        "end": {
          "row": 87,
          "column": 40
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "unordered_map",
        "start": {
          "row": 87,
          "column": 10
        },
        "end": {
          "row": 87,
          "column": 23
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId, Range>",
        "start": {
          "row": 87,
          "column": 23
        },
        "end": {
          "row": 87,
          "column": 40
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 87,
          "column": 24
        },
        "end": {
          "row": 87,
          "column": 32
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 87,
          "column": 24
        },
        "end": {
          "row": 87,
          "column": 32
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Range",
        "start": {
          "row": 87,
          "column": 34
        },
        "end": {
          "row": 87,
          "column": 39
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Range",
        "start": {
          "row": 87,
          "column": 34
        },
        "end": {
          "row": 87,
          "column": 39
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "dump()",
        "start": {
          "row": 87,
          "column": 41
        },
        "end": {
          "row": 87,
          "column": 47
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "dump",
        "start": {
          "row": 87,
          "column": 41
        },
        "end": {
          "row": 87,
          "column": 45
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 87,
          "column": 45
        },
        "end": {
          "row": 87,
          "column": 47
        }
      },
      {
        "kind": "access_specifier",
        "name": "query",
        "text": "private:",
        "start": {
          "row": 89,
          "column": 3
        },
        "end": {
          "row": 89,
          "column": 11
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void ascend();",
        "start": {
          "row": 90,
          "column": 5
        },
        "end": {
          "row": 90,
          "column": 19
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 90,
          "column": 5
        },
        "end": {
          "row": 90,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "ascend()",
        "start": {
          "row": 90,
          "column": 10
        },
        "end": {
          "row": 90,
          "column": 18
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "ascend",
        "start": {
          "row": 90,
          "column": 10
        },
        "end": {
          "row": 90,
          "column": 16
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 90,
          "column": 16
        },
        "end": {
          "row": 90,
          "column": 18
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void descend_left();",
        "start": {
          "row": 91,
          "column": 5
        },
        "end": {
          "row": 91,
          "column": 25
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 91,
          "column": 5
        },
        "end": {
          "row": 91,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "descend_left()",
        "start": {
          "row": 91,
          "column": 10
        },
        "end": {
          "row": 91,
          "column": 24
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "descend_left",
        "start": {
          "row": 91,
          "column": 10
        },
        "end": {
          "row": 91,
          "column": 22
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 91,
          "column": 22
        },
        "end": {
          "row": 91,
          "column": 24
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void descend_right();",
        "start": {
          "row": 92,
          "column": 5
        },
        "end": {
          "row": 92,
          "column": 26
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 92,
          "column": 5
        },
        "end": {
          "row": 92,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "descend_right()",
        "start": {
          "row": 92,
          "column": 10
        },
        "end": {
          "row": 92,
          "column": 25
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "descend_right",
        "start": {
          "row": 92,
          "column": 10
        },
        "end": {
          "row": 92,
          "column": 23
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 92,
          "column": 23
        },
        "end": {
          "row": 92,
          "column": 25
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void move_to_successor();",
        "start": {
          "row": 93,
          "column": 5
        },
        "end": {
          "row": 93,
          "column": 30
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 93,
          "column": 5
        },
        "end": {
          "row": 93,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "move_to_successor()",
        "start": {
          "row": 93,
          "column": 10
        },
        "end": {
          "row": 93,
          "column": 29
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "move_to_successor",
        "start": {
          "row": 93,
          "column": 10
        },
        "end": {
          "row": 93,
          "column": 27
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 93,
          "column": 27
        },
        "end": {
          "row": 93,
          "column": 29
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void seek_to_first_node_greater_than_or_equal_to(const Point &position);",
        "start": {
          "row": 94,
          "column": 5
        },
        "end": {
          "row": 94,
          "column": 77
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 94,
          "column": 5
        },
        "end": {
          "row": 94,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "seek_to_first_node_greater_than_or_equal_to(const Point &position)",
        "start": {
          "row": 94,
          "column": 10
        },
        "end": {
          "row": 94,
          "column": 76
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "seek_to_first_node_greater_than_or_equal_to",
        "start": {
          "row": 94,
          "column": 10
        },
        "end": {
          "row": 94,
          "column": 53
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Point &position)",
        "start": {
          "row": 94,
          "column": 53
        },
        "end": {
          "row": 94,
          "column": 76
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &position",
        "start": {
          "row": 94,
          "column": 54
        },
        "end": {
          "row": 94,
          "column": 75
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 94,
          "column": 54
        },
        "end": {
          "row": 94,
          "column": 59
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 94,
          "column": 60
        },
        "end": {
          "row": 94,
          "column": 65
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&position",
        "start": {
          "row": 94,
          "column": 66
        },
        "end": {
          "row": 94,
          "column": 75
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "position",
        "start": {
          "row": 94,
          "column": 67
        },
        "end": {
          "row": 94,
          "column": 75
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void mark_right(const MarkerId &id, const Point &start_position, const Point &end_position);",
        "start": {
          "row": 95,
          "column": 5
        },
        "end": {
          "row": 95,
          "column": 97
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 95,
          "column": 5
        },
        "end": {
          "row": 95,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "mark_right(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 95,
          "column": 10
        },
        "end": {
          "row": 95,
          "column": 96
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "mark_right",
        "start": {
          "row": 95,
          "column": 10
        },
        "end": {
          "row": 95,
          "column": 20
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 95,
          "column": 20
        },
        "end": {
          "row": 95,
          "column": 96
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const MarkerId &id",
        "start": {
          "row": 95,
          "column": 21
        },
        "end": {
          "row": 95,
          "column": 39
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 95,
          "column": 21
        },
        "end": {
          "row": 95,
          "column": 26
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 95,
          "column": 27
        },
        "end": {
          "row": 95,
          "column": 35
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&id",
        "start": {
          "row": 95,
          "column": 36
        },
        "end": {
          "row": 95,
          "column": 39
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 95,
          "column": 37
        },
        "end": {
          "row": 95,
          "column": 39
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &start_position",
        "start": {
          "row": 95,
          "column": 41
        },
        "end": {
          "row": 95,
          "column": 68
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 95,
          "column": 41
        },
        "end": {
          "row": 95,
          "column": 46
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 95,
          "column": 47
        },
        "end": {
          "row": 95,
          "column": 52
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&start_position",
        "start": {
          "row": 95,
          "column": 53
        },
        "end": {
          "row": 95,
          "column": 68
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start_position",
        "start": {
          "row": 95,
          "column": 54
        },
        "end": {
          "row": 95,
          "column": 68
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &end_position",
        "start": {
          "row": 95,
          "column": 70
        },
        "end": {
          "row": 95,
          "column": 95
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 95,
          "column": 70
        },
        "end": {
          "row": 95,
          "column": 75
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 95,
          "column": 76
        },
        "end": {
          "row": 95,
          "column": 81
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&end_position",
        "start": {
          "row": 95,
          "column": 82
        },
        "end": {
          "row": 95,
          "column": 95
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end_position",
        "start": {
          "row": 95,
          "column": 83
        },
        "end": {
          "row": 95,
          "column": 95
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void mark_left(const MarkerId &id, const Point &start_position, const Point &end_position);",
        "start": {
          "row": 96,
          "column": 5
        },
        "end": {
          "row": 96,
          "column": 96
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 96,
          "column": 5
        },
        "end": {
          "row": 96,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "mark_left(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 96,
          "column": 10
        },
        "end": {
          "row": 96,
          "column": 95
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "mark_left",
        "start": {
          "row": 96,
          "column": 10
        },
        "end": {
          "row": 96,
          "column": 19
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const MarkerId &id, const Point &start_position, const Point &end_position)",
        "start": {
          "row": 96,
          "column": 19
        },
        "end": {
          "row": 96,
          "column": 95
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const MarkerId &id",
        "start": {
          "row": 96,
          "column": 20
        },
        "end": {
          "row": 96,
          "column": 38
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 96,
          "column": 20
        },
        "end": {
          "row": 96,
          "column": 25
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 96,
          "column": 26
        },
        "end": {
          "row": 96,
          "column": 34
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&id",
        "start": {
          "row": 96,
          "column": 35
        },
        "end": {
          "row": 96,
          "column": 38
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "id",
        "start": {
          "row": 96,
          "column": 36
        },
        "end": {
          "row": 96,
          "column": 38
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &start_position",
        "start": {
          "row": 96,
          "column": 40
        },
        "end": {
          "row": 96,
          "column": 67
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 96,
          "column": 40
        },
        "end": {
          "row": 96,
          "column": 45
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 96,
          "column": 46
        },
        "end": {
          "row": 96,
          "column": 51
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&start_position",
        "start": {
          "row": 96,
          "column": 52
        },
        "end": {
          "row": 96,
          "column": 67
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start_position",
        "start": {
          "row": 96,
          "column": 53
        },
        "end": {
          "row": 96,
          "column": 67
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &end_position",
        "start": {
          "row": 96,
          "column": 69
        },
        "end": {
          "row": 96,
          "column": 94
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 96,
          "column": 69
        },
        "end": {
          "row": 96,
          "column": 74
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 96,
          "column": 75
        },
        "end": {
          "row": 96,
          "column": 80
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&end_position",
        "start": {
          "row": 96,
          "column": 81
        },
        "end": {
          "row": 96,
          "column": 94
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end_position",
        "start": {
          "row": 96,
          "column": 82
        },
        "end": {
          "row": 96,
          "column": 94
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node* insert_left_child(const Point &position);",
        "start": {
          "row": 97,
          "column": 5
        },
        "end": {
          "row": 97,
          "column": 52
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 97,
          "column": 5
        },
        "end": {
          "row": 97,
          "column": 9
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "* insert_left_child(const Point &position)",
        "start": {
          "row": 97,
          "column": 9
        },
        "end": {
          "row": 97,
          "column": 51
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "insert_left_child(const Point &position)",
        "start": {
          "row": 97,
          "column": 11
        },
        "end": {
          "row": 97,
          "column": 51
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "insert_left_child",
        "start": {
          "row": 97,
          "column": 11
        },
        "end": {
          "row": 97,
          "column": 28
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Point &position)",
        "start": {
          "row": 97,
          "column": 28
        },
        "end": {
          "row": 97,
          "column": 51
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &position",
        "start": {
          "row": 97,
          "column": 29
        },
        "end": {
          "row": 97,
          "column": 50
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 97,
          "column": 29
        },
        "end": {
          "row": 97,
          "column": 34
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 97,
          "column": 35
        },
        "end": {
          "row": 97,
          "column": 40
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&position",
        "start": {
          "row": 97,
          "column": 41
        },
        "end": {
          "row": 97,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "position",
        "start": {
          "row": 97,
          "column": 42
        },
        "end": {
          "row": 97,
          "column": 50
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node* insert_right_child(const Point &position);",
        "start": {
          "row": 98,
          "column": 5
        },
        "end": {
          "row": 98,
          "column": 53
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 98,
          "column": 5
        },
        "end": {
          "row": 98,
          "column": 9
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "* insert_right_child(const Point &position)",
        "start": {
          "row": 98,
          "column": 9
        },
        "end": {
          "row": 98,
          "column": 52
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "insert_right_child(const Point &position)",
        "start": {
          "row": 98,
          "column": 11
        },
        "end": {
          "row": 98,
          "column": 52
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "insert_right_child",
        "start": {
          "row": 98,
          "column": 11
        },
        "end": {
          "row": 98,
          "column": 29
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Point &position)",
        "start": {
          "row": 98,
          "column": 29
        },
        "end": {
          "row": 98,
          "column": 52
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &position",
        "start": {
          "row": 98,
          "column": 30
        },
        "end": {
          "row": 98,
          "column": 51
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 98,
          "column": 30
        },
        "end": {
          "row": 98,
          "column": 35
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 98,
          "column": 36
        },
        "end": {
          "row": 98,
          "column": 41
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&position",
        "start": {
          "row": 98,
          "column": 42
        },
        "end": {
          "row": 98,
          "column": 51
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "position",
        "start": {
          "row": 98,
          "column": 43
        },
        "end": {
          "row": 98,
          "column": 51
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void check_intersection(const Point &start, const Point &end, flat_set<MarkerId> *results);",
        "start": {
          "row": 99,
          "column": 5
        },
        "end": {
          "row": 99,
          "column": 96
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 99,
          "column": 5
        },
        "end": {
          "row": 99,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "check_intersection(const Point &start, const Point &end, flat_set<MarkerId> *results)",
        "start": {
          "row": 99,
          "column": 10
        },
        "end": {
          "row": 99,
          "column": 95
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "check_intersection",
        "start": {
          "row": 99,
          "column": 10
        },
        "end": {
          "row": 99,
          "column": 28
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Point &start, const Point &end, flat_set<MarkerId> *results)",
        "start": {
          "row": 99,
          "column": 28
        },
        "end": {
          "row": 99,
          "column": 95
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &start",
        "start": {
          "row": 99,
          "column": 29
        },
        "end": {
          "row": 99,
          "column": 47
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 99,
          "column": 29
        },
        "end": {
          "row": 99,
          "column": 34
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 99,
          "column": 35
        },
        "end": {
          "row": 99,
          "column": 40
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&start",
        "start": {
          "row": 99,
          "column": 41
        },
        "end": {
          "row": 99,
          "column": 47
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start",
        "start": {
          "row": 99,
          "column": 42
        },
        "end": {
          "row": 99,
          "column": 47
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Point &end",
        "start": {
          "row": 99,
          "column": 49
        },
        "end": {
          "row": 99,
          "column": 65
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 99,
          "column": 49
        },
        "end": {
          "row": 99,
          "column": 54
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 99,
          "column": 55
        },
        "end": {
          "row": 99,
          "column": 60
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&end",
        "start": {
          "row": 99,
          "column": 61
        },
        "end": {
          "row": 99,
          "column": 65
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end",
        "start": {
          "row": 99,
          "column": 62
        },
        "end": {
          "row": 99,
          "column": 65
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> *results",
        "start": {
          "row": 99,
          "column": 67
        },
        "end": {
          "row": 99,
          "column": 94
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 99,
          "column": 67
        },
        "end": {
          "row": 99,
          "column": 85
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 99,
          "column": 67
        },
        "end": {
          "row": 99,
          "column": 75
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 99,
          "column": 75
        },
        "end": {
          "row": 99,
          "column": 85
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 99,
          "column": 76
        },
        "end": {
          "row": 99,
          "column": 84
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 99,
          "column": 76
        },
        "end": {
          "row": 99,
          "column": 84
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*results",
        "start": {
          "row": 99,
          "column": 86
        },
        "end": {
          "row": 99,
          "column": 94
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "results",
        "start": {
          "row": 99,
          "column": 87
        },
        "end": {
          "row": 99,
          "column": 94
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void cache_node_position() const;",
        "start": {
          "row": 100,
          "column": 5
        },
        "end": {
          "row": 100,
          "column": 38
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 100,
          "column": 5
        },
        "end": {
          "row": 100,
          "column": 9
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "cache_node_position() const",
        "start": {
          "row": 100,
          "column": 10
        },
        "end": {
          "row": 100,
          "column": 37
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "cache_node_position",
        "start": {
          "row": 100,
          "column": 10
        },
        "end": {
          "row": 100,
          "column": 29
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 100,
          "column": 29
        },
        "end": {
          "row": 100,
          "column": 31
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 100,
          "column": 32
        },
        "end": {
          "row": 100,
          "column": 37
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "MarkerIndex *marker_index;",
        "start": {
          "row": 102,
          "column": 5
        },
        "end": {
          "row": 102,
          "column": 31
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerIndex",
        "start": {
          "row": 102,
          "column": 5
        },
        "end": {
          "row": 102,
          "column": 16
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*marker_index",
        "start": {
          "row": 102,
          "column": 17
        },
        "end": {
          "row": 102,
          "column": 30
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "marker_index",
        "start": {
          "row": 102,
          "column": 18
        },
        "end": {
          "row": 102,
          "column": 30
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node *current_node;",
        "start": {
          "row": 103,
          "column": 5
        },
        "end": {
          "row": 103,
          "column": 24
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 103,
          "column": 5
        },
        "end": {
          "row": 103,
          "column": 9
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*current_node",
        "start": {
          "row": 103,
          "column": 10
        },
        "end": {
          "row": 103,
          "column": 23
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "current_node",
        "start": {
          "row": 103,
          "column": 11
        },
        "end": {
          "row": 103,
          "column": 23
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Point current_node_position;",
        "start": {
          "row": 104,
          "column": 5
        },
        "end": {
          "row": 104,
          "column": 33
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 104,
          "column": 5
        },
        "end": {
          "row": 104,
          "column": 10
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "current_node_position",
        "start": {
          "row": 104,
          "column": 11
        },
        "end": {
          "row": 104,
          "column": 32
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Point left_ancestor_position;",
        "start": {
          "row": 105,
          "column": 5
        },
        "end": {
          "row": 105,
          "column": 34
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 105,
          "column": 5
        },
        "end": {
          "row": 105,
          "column": 10
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "left_ancestor_position",
        "start": {
          "row": 105,
          "column": 11
        },
        "end": {
          "row": 105,
          "column": 33
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Point right_ancestor_position;",
        "start": {
          "row": 106,
          "column": 5
        },
        "end": {
          "row": 106,
          "column": 35
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 106,
          "column": 5
        },
        "end": {
          "row": 106,
          "column": 10
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "right_ancestor_position",
        "start": {
          "row": 106,
          "column": 11
        },
        "end": {
          "row": 106,
          "column": 34
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::vector<Point> left_ancestor_position_stack;",
        "start": {
          "row": 107,
          "column": 5
        },
        "end": {
          "row": 107,
          "column": 53
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::vector<Point>",
        "start": {
          "row": 107,
          "column": 5
        },
        "end": {
          "row": 107,
          "column": 23
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 107,
          "column": 5
        },
        "end": {
          "row": 107,
          "column": 8
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "vector<Point>",
        "start": {
          "row": 107,
          "column": 10
        },
        "end": {
          "row": 107,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "vector",
        "start": {
          "row": 107,
          "column": 10
        },
        "end": {
          "row": 107,
          "column": 16
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Point>",
        "start": {
          "row": 107,
          "column": 16
        },
        "end": {
          "row": 107,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 107,
          "column": 17
        },
        "end": {
          "row": 107,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 107,
          "column": 17
        },
        "end": {
          "row": 107,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "left_ancestor_position_stack",
        "start": {
          "row": 107,
          "column": 24
        },
        "end": {
          "row": 107,
          "column": 52
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::vector<Point> right_ancestor_position_stack;",
        "start": {
          "row": 108,
          "column": 5
        },
        "end": {
          "row": 108,
          "column": 54
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::vector<Point>",
        "start": {
          "row": 108,
          "column": 5
        },
        "end": {
          "row": 108,
          "column": 23
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 108,
          "column": 5
        },
        "end": {
          "row": 108,
          "column": 8
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "vector<Point>",
        "start": {
          "row": 108,
          "column": 10
        },
        "end": {
          "row": 108,
          "column": 23
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "vector",
        "start": {
          "row": 108,
          "column": 10
        },
        "end": {
          "row": 108,
          "column": 16
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Point>",
        "start": {
          "row": 108,
          "column": 16
        },
        "end": {
          "row": 108,
          "column": 23
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 108,
          "column": 17
        },
        "end": {
          "row": 108,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 108,
          "column": 17
        },
        "end": {
          "row": 108,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "right_ancestor_position_stack",
        "start": {
          "row": 108,
          "column": 24
        },
        "end": {
          "row": 108,
          "column": 53
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Point get_node_position(const Node *node) const;",
        "start": {
          "row": 111,
          "column": 3
        },
        "end": {
          "row": 111,
          "column": 51
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 111,
          "column": 3
        },
        "end": {
          "row": 111,
          "column": 8
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "get_node_position(const Node *node) const",
        "start": {
          "row": 111,
          "column": 9
        },
        "end": {
          "row": 111,
          "column": 50
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "get_node_position",
        "start": {
          "row": 111,
          "column": 9
        },
        "end": {
          "row": 111,
          "column": 26
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Node *node)",
        "start": {
          "row": 111,
          "column": 26
        },
        "end": {
          "row": 111,
          "column": 44
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Node *node",
        "start": {
          "row": 111,
          "column": 27
        },
        "end": {
          "row": 111,
          "column": 43
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 111,
          "column": 27
        },
        "end": {
          "row": 111,
          "column": 32
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 111,
          "column": 33
        },
        "end": {
          "row": 111,
          "column": 37
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*node",
        "start": {
          "row": 111,
          "column": 38
        },
        "end": {
          "row": 111,
          "column": 43
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "node",
        "start": {
          "row": 111,
          "column": 39
        },
        "end": {
          "row": 111,
          "column": 43
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 111,
          "column": 45
        },
        "end": {
          "row": 111,
          "column": 50
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void delete_node(Node *node);",
        "start": {
          "row": 112,
          "column": 3
        },
        "end": {
          "row": 112,
          "column": 32
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 112,
          "column": 3
        },
        "end": {
          "row": 112,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "delete_node(Node *node)",
        "start": {
          "row": 112,
          "column": 8
        },
        "end": {
          "row": 112,
          "column": 31
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "delete_node",
        "start": {
          "row": 112,
          "column": 8
        },
        "end": {
          "row": 112,
          "column": 19
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Node *node)",
        "start": {
          "row": 112,
          "column": 19
        },
        "end": {
          "row": 112,
          "column": 31
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Node *node",
        "start": {
          "row": 112,
          "column": 20
        },
        "end": {
          "row": 112,
          "column": 30
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 112,
          "column": 20
        },
        "end": {
          "row": 112,
          "column": 24
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*node",
        "start": {
          "row": 112,
          "column": 25
        },
        "end": {
          "row": 112,
          "column": 30
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "node",
        "start": {
          "row": 112,
          "column": 26
        },
        "end": {
          "row": 112,
          "column": 30
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void delete_subtree(Node *node);",
        "start": {
          "row": 113,
          "column": 3
        },
        "end": {
          "row": 113,
          "column": 35
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 113,
          "column": 3
        },
        "end": {
          "row": 113,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "delete_subtree(Node *node)",
        "start": {
          "row": 113,
          "column": 8
        },
        "end": {
          "row": 113,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "delete_subtree",
        "start": {
          "row": 113,
          "column": 8
        },
        "end": {
          "row": 113,
          "column": 22
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Node *node)",
        "start": {
          "row": 113,
          "column": 22
        },
        "end": {
          "row": 113,
          "column": 34
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Node *node",
        "start": {
          "row": 113,
          "column": 23
        },
        "end": {
          "row": 113,
          "column": 33
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 113,
          "column": 23
        },
        "end": {
          "row": 113,
          "column": 27
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*node",
        "start": {
          "row": 113,
          "column": 28
        },
        "end": {
          "row": 113,
          "column": 33
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "node",
        "start": {
          "row": 113,
          "column": 29
        },
        "end": {
          "row": 113,
          "column": 33
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void bubble_node_up(Node *node);",
        "start": {
          "row": 114,
          "column": 3
        },
        "end": {
          "row": 114,
          "column": 35
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 114,
          "column": 3
        },
        "end": {
          "row": 114,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "bubble_node_up(Node *node)",
        "start": {
          "row": 114,
          "column": 8
        },
        "end": {
          "row": 114,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "bubble_node_up",
        "start": {
          "row": 114,
          "column": 8
        },
        "end": {
          "row": 114,
          "column": 22
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Node *node)",
        "start": {
          "row": 114,
          "column": 22
        },
        "end": {
          "row": 114,
          "column": 34
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Node *node",
        "start": {
          "row": 114,
          "column": 23
        },
        "end": {
          "row": 114,
          "column": 33
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 114,
          "column": 23
        },
        "end": {
          "row": 114,
          "column": 27
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*node",
        "start": {
          "row": 114,
          "column": 28
        },
        "end": {
          "row": 114,
          "column": 33
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "node",
        "start": {
          "row": 114,
          "column": 29
        },
        "end": {
          "row": 114,
          "column": 33
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void bubble_node_down(Node *node);",
        "start": {
          "row": 115,
          "column": 3
        },
        "end": {
          "row": 115,
          "column": 37
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 115,
          "column": 3
        },
        "end": {
          "row": 115,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "bubble_node_down(Node *node)",
        "start": {
          "row": 115,
          "column": 8
        },
        "end": {
          "row": 115,
          "column": 36
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "bubble_node_down",
        "start": {
          "row": 115,
          "column": 8
        },
        "end": {
          "row": 115,
          "column": 24
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Node *node)",
        "start": {
          "row": 115,
          "column": 24
        },
        "end": {
          "row": 115,
          "column": 36
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Node *node",
        "start": {
          "row": 115,
          "column": 25
        },
        "end": {
          "row": 115,
          "column": 35
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 115,
          "column": 25
        },
        "end": {
          "row": 115,
          "column": 29
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*node",
        "start": {
          "row": 115,
          "column": 30
        },
        "end": {
          "row": 115,
          "column": 35
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "node",
        "start": {
          "row": 115,
          "column": 31
        },
        "end": {
          "row": 115,
          "column": 35
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void rotate_node_left(Node *pivot);",
        "start": {
          "row": 116,
          "column": 3
        },
        "end": {
          "row": 116,
          "column": 38
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 116,
          "column": 3
        },
        "end": {
          "row": 116,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "rotate_node_left(Node *pivot)",
        "start": {
          "row": 116,
          "column": 8
        },
        "end": {
          "row": 116,
          "column": 37
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "rotate_node_left",
        "start": {
          "row": 116,
          "column": 8
        },
        "end": {
          "row": 116,
          "column": 24
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Node *pivot)",
        "start": {
          "row": 116,
          "column": 24
        },
        "end": {
          "row": 116,
          "column": 37
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Node *pivot",
        "start": {
          "row": 116,
          "column": 25
        },
        "end": {
          "row": 116,
          "column": 36
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 116,
          "column": 25
        },
        "end": {
          "row": 116,
          "column": 29
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*pivot",
        "start": {
          "row": 116,
          "column": 30
        },
        "end": {
          "row": 116,
          "column": 36
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "pivot",
        "start": {
          "row": 116,
          "column": 31
        },
        "end": {
          "row": 116,
          "column": 36
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void rotate_node_right(Node *pivot);",
        "start": {
          "row": 117,
          "column": 3
        },
        "end": {
          "row": 117,
          "column": 39
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 117,
          "column": 3
        },
        "end": {
          "row": 117,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "rotate_node_right(Node *pivot)",
        "start": {
          "row": 117,
          "column": 8
        },
        "end": {
          "row": 117,
          "column": 38
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "rotate_node_right",
        "start": {
          "row": 117,
          "column": 8
        },
        "end": {
          "row": 117,
          "column": 25
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Node *pivot)",
        "start": {
          "row": 117,
          "column": 25
        },
        "end": {
          "row": 117,
          "column": 38
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Node *pivot",
        "start": {
          "row": 117,
          "column": 26
        },
        "end": {
          "row": 117,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 117,
          "column": 26
        },
        "end": {
          "row": 117,
          "column": 30
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*pivot",
        "start": {
          "row": 117,
          "column": 31
        },
        "end": {
          "row": 117,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "pivot",
        "start": {
          "row": 117,
          "column": 32
        },
        "end": {
          "row": 117,
          "column": 37
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void get_starting_and_ending_markers_within_subtree(const Node *node, flat_set<MarkerId> *starting, flat_set<MarkerId> *ending);",
        "start": {
          "row": 118,
          "column": 3
        },
        "end": {
          "row": 118,
          "column": 131
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 118,
          "column": 3
        },
        "end": {
          "row": 118,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "get_starting_and_ending_markers_within_subtree(const Node *node, flat_set<MarkerId> *starting, flat_set<MarkerId> *ending)",
        "start": {
          "row": 118,
          "column": 8
        },
        "end": {
          "row": 118,
          "column": 130
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "get_starting_and_ending_markers_within_subtree",
        "start": {
          "row": 118,
          "column": 8
        },
        "end": {
          "row": 118,
          "column": 54
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Node *node, flat_set<MarkerId> *starting, flat_set<MarkerId> *ending)",
        "start": {
          "row": 118,
          "column": 54
        },
        "end": {
          "row": 118,
          "column": 130
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Node *node",
        "start": {
          "row": 118,
          "column": 55
        },
        "end": {
          "row": 118,
          "column": 71
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 118,
          "column": 55
        },
        "end": {
          "row": 118,
          "column": 60
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 118,
          "column": 61
        },
        "end": {
          "row": 118,
          "column": 65
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*node",
        "start": {
          "row": 118,
          "column": 66
        },
        "end": {
          "row": 118,
          "column": 71
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "node",
        "start": {
          "row": 118,
          "column": 67
        },
        "end": {
          "row": 118,
          "column": 71
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> *starting",
        "start": {
          "row": 118,
          "column": 73
        },
        "end": {
          "row": 118,
          "column": 101
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 118,
          "column": 73
        },
        "end": {
          "row": 118,
          "column": 91
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 118,
          "column": 73
        },
        "end": {
          "row": 118,
          "column": 81
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 118,
          "column": 81
        },
        "end": {
          "row": 118,
          "column": 91
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 118,
          "column": 82
        },
        "end": {
          "row": 118,
          "column": 90
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 118,
          "column": 82
        },
        "end": {
          "row": 118,
          "column": 90
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*starting",
        "start": {
          "row": 118,
          "column": 92
        },
        "end": {
          "row": 118,
          "column": 101
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "starting",
        "start": {
          "row": 118,
          "column": 93
        },
        "end": {
          "row": 118,
          "column": 101
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> *ending",
        "start": {
          "row": 118,
          "column": 103
        },
        "end": {
          "row": 118,
          "column": 129
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 118,
          "column": 103
        },
        "end": {
          "row": 118,
          "column": 121
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 118,
          "column": 103
        },
        "end": {
          "row": 118,
          "column": 111
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 118,
          "column": 111
        },
        "end": {
          "row": 118,
          "column": 121
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 118,
          "column": 112
        },
        "end": {
          "row": 118,
          "column": 120
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 118,
          "column": 112
        },
        "end": {
          "row": 118,
          "column": 120
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*ending",
        "start": {
          "row": 118,
          "column": 122
        },
        "end": {
          "row": 118,
          "column": 129
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "ending",
        "start": {
          "row": 118,
          "column": 123
        },
        "end": {
          "row": 118,
          "column": 129
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "void populate_splice_invalidation_sets(SpliceResult *invalidated, const Node *start_node, const Node *end_node, const flat_set<MarkerId> &starting_inside_splice, const flat_set<MarkerId> &ending_inside_splice);",
        "start": {
          "row": 119,
          "column": 3
        },
        "end": {
          "row": 119,
          "column": 213
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 119,
          "column": 3
        },
        "end": {
          "row": 119,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "populate_splice_invalidation_sets(SpliceResult *invalidated, const Node *start_node, const Node *end_node, const flat_set<MarkerId> &starting_inside_splice, const flat_set<MarkerId> &ending_inside_splice)",
        "start": {
          "row": 119,
          "column": 8
        },
        "end": {
          "row": 119,
          "column": 212
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "populate_splice_invalidation_sets",
        "start": {
          "row": 119,
          "column": 8
        },
        "end": {
          "row": 119,
          "column": 41
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(SpliceResult *invalidated, const Node *start_node, const Node *end_node, const flat_set<MarkerId> &starting_inside_splice, const flat_set<MarkerId> &ending_inside_splice)",
        "start": {
          "row": 119,
          "column": 41
        },
        "end": {
          "row": 119,
          "column": 212
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "SpliceResult *invalidated",
        "start": {
          "row": 119,
          "column": 42
        },
        "end": {
          "row": 119,
          "column": 67
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "SpliceResult",
        "start": {
          "row": 119,
          "column": 42
        },
        "end": {
          "row": 119,
          "column": 54
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*invalidated",
        "start": {
          "row": 119,
          "column": 55
        },
        "end": {
          "row": 119,
          "column": 67
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "invalidated",
        "start": {
          "row": 119,
          "column": 56
        },
        "end": {
          "row": 119,
          "column": 67
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Node *start_node",
        "start": {
          "row": 119,
          "column": 69
        },
        "end": {
          "row": 119,
          "column": 91
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 119,
          "column": 69
        },
        "end": {
          "row": 119,
          "column": 74
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 119,
          "column": 75
        },
        "end": {
          "row": 119,
          "column": 79
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*start_node",
        "start": {
          "row": 119,
          "column": 80
        },
        "end": {
          "row": 119,
          "column": 91
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "start_node",
        "start": {
          "row": 119,
          "column": 81
        },
        "end": {
          "row": 119,
          "column": 91
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Node *end_node",
        "start": {
          "row": 119,
          "column": 93
        },
        "end": {
          "row": 119,
          "column": 113
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 119,
          "column": 93
        },
        "end": {
          "row": 119,
          "column": 98
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 119,
          "column": 99
        },
        "end": {
          "row": 119,
          "column": 103
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*end_node",
        "start": {
          "row": 119,
          "column": 104
        },
        "end": {
          "row": 119,
          "column": 113
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "end_node",
        "start": {
          "row": 119,
          "column": 105
        },
        "end": {
          "row": 119,
          "column": 113
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const flat_set<MarkerId> &starting_inside_splice",
        "start": {
          "row": 119,
          "column": 115
        },
        "end": {
          "row": 119,
          "column": 163
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 119,
          "column": 115
        },
        "end": {
          "row": 119,
          "column": 120
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 119,
          "column": 121
        },
        "end": {
          "row": 119,
          "column": 139
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 119,
          "column": 121
        },
        "end": {
          "row": 119,
          "column": 129
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 119,
          "column": 129
        },
        "end": {
          "row": 119,
          "column": 139
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 119,
          "column": 130
        },
        "end": {
          "row": 119,
          "column": 138
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 119,
          "column": 130
        },
        "end": {
          "row": 119,
          "column": 138
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&starting_inside_splice",
        "start": {
          "row": 119,
          "column": 140
        },
        "end": {
          "row": 119,
          "column": 163
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "starting_inside_splice",
        "start": {
          "row": 119,
          "column": 141
        },
        "end": {
          "row": 119,
          "column": 163
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const flat_set<MarkerId> &ending_inside_splice",
        "start": {
          "row": 119,
          "column": 165
        },
        "end": {
          "row": 119,
          "column": 211
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 119,
          "column": 165
        },
        "end": {
          "row": 119,
          "column": 170
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 119,
          "column": 171
        },
        "end": {
          "row": 119,
          "column": 189
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 119,
          "column": 171
        },
        "end": {
          "row": 119,
          "column": 179
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 119,
          "column": 179
        },
        "end": {
          "row": 119,
          "column": 189
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 119,
          "column": 180
        },
        "end": {
          "row": 119,
          "column": 188
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 119,
          "column": 180
        },
        "end": {
          "row": 119,
          "column": 188
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&ending_inside_splice",
        "start": {
          "row": 119,
          "column": 190
        },
        "end": {
          "row": 119,
          "column": 211
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "ending_inside_splice",
        "start": {
          "row": 119,
          "column": 191
        },
        "end": {
          "row": 119,
          "column": 211
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::default_random_engine random_engine;",
        "start": {
          "row": 121,
          "column": 3
        },
        "end": {
          "row": 121,
          "column": 44
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::default_random_engine",
        "start": {
          "row": 121,
          "column": 3
        },
        "end": {
          "row": 121,
          "column": 29
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 121,
          "column": 3
        },
        "end": {
          "row": 121,
          "column": 6
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "default_random_engine",
        "start": {
          "row": 121,
          "column": 8
        },
        "end": {
          "row": 121,
          "column": 29
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "random_engine",
        "start": {
          "row": 121,
          "column": 30
        },
        "end": {
          "row": 121,
          "column": 43
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::uniform_int_distribution<int> random_distribution;",
        "start": {
          "row": 122,
          "column": 3
        },
        "end": {
          "row": 122,
          "column": 58
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::uniform_int_distribution<int>",
        "start": {
          "row": 122,
          "column": 3
        },
        "end": {
          "row": 122,
          "column": 37
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 122,
          "column": 3
        },
        "end": {
          "row": 122,
          "column": 6
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "uniform_int_distribution<int>",
        "start": {
          "row": 122,
          "column": 8
        },
        "end": {
          "row": 122,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "uniform_int_distribution",
        "start": {
          "row": 122,
          "column": 8
        },
        "end": {
          "row": 122,
          "column": 32
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<int>",
        "start": {
          "row": 122,
          "column": 32
        },
        "end": {
          "row": 122,
          "column": 37
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "int",
        "start": {
          "row": 122,
          "column": 33
        },
        "end": {
          "row": 122,
          "column": 36
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "int",
        "start": {
          "row": 122,
          "column": 33
        },
        "end": {
          "row": 122,
          "column": 36
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "random_distribution",
        "start": {
          "row": 122,
          "column": 38
        },
        "end": {
          "row": 122,
          "column": 57
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Node *root;",
        "start": {
          "row": 123,
          "column": 3
        },
        "end": {
          "row": 123,
          "column": 14
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 123,
          "column": 3
        },
        "end": {
          "row": 123,
          "column": 7
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*root",
        "start": {
          "row": 123,
          "column": 8
        },
        "end": {
          "row": 123,
          "column": 13
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "root",
        "start": {
          "row": 123,
          "column": 9
        },
        "end": {
          "row": 123,
          "column": 13
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::unordered_map<MarkerId, Node*> start_nodes_by_id;",
        "start": {
          "row": 124,
          "column": 3
        },
        "end": {
          "row": 124,
          "column": 57
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::unordered_map<MarkerId, Node*>",
        "start": {
          "row": 124,
          "column": 3
        },
        "end": {
          "row": 124,
          "column": 38
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 124,
          "column": 3
        },
        "end": {
          "row": 124,
          "column": 6
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "unordered_map<MarkerId, Node*>",
        "start": {
          "row": 124,
          "column": 8
        },
        "end": {
          "row": 124,
          "column": 38
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "unordered_map",
        "start": {
          "row": 124,
          "column": 8
        },
        "end": {
          "row": 124,
          "column": 21
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId, Node*>",
        "start": {
          "row": 124,
          "column": 21
        },
        "end": {
          "row": 124,
          "column": 38
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 124,
          "column": 22
        },
        "end": {
          "row": 124,
          "column": 30
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 124,
          "column": 22
        },
        "end": {
          "row": 124,
          "column": 30
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Node*",
        "start": {
          "row": 124,
          "column": 32
        },
        "end": {
          "row": 124,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 124,
          "column": 32
        },
        "end": {
          "row": 124,
          "column": 36
        }
      },
      {
        "kind": "abstract_pointer_declarator",
        "name": "query",
        "text": "*",
        "start": {
          "row": 124,
          "column": 36
        },
        "end": {
          "row": 124,
          "column": 37
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "start_nodes_by_id",
        "start": {
          "row": 124,
          "column": 39
        },
        "end": {
          "row": 124,
          "column": 56
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "std::unordered_map<MarkerId, Node*> end_nodes_by_id;",
        "start": {
          "row": 125,
          "column": 3
        },
        "end": {
          "row": 125,
          "column": 55
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::unordered_map<MarkerId, Node*>",
        "start": {
          "row": 125,
          "column": 3
        },
        "end": {
          "row": 125,
          "column": 38
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 125,
          "column": 3
        },
        "end": {
          "row": 125,
          "column": 6
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "unordered_map<MarkerId, Node*>",
        "start": {
          "row": 125,
          "column": 8
        },
        "end": {
          "row": 125,
          "column": 38
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "unordered_map",
        "start": {
          "row": 125,
          "column": 8
        },
        "end": {
          "row": 125,
          "column": 21
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId, Node*>",
        "start": {
          "row": 125,
          "column": 21
        },
        "end": {
          "row": 125,
          "column": 38
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 125,
          "column": 22
        },
        "end": {
          "row": 125,
          "column": 30
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 125,
          "column": 22
        },
        "end": {
          "row": 125,
          "column": 30
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Node*",
        "start": {
          "row": 125,
          "column": 32
        },
        "end": {
          "row": 125,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 125,
          "column": 32
        },
        "end": {
          "row": 125,
          "column": 36
        }
      },
      {
        "kind": "abstract_pointer_declarator",
        "name": "query",
        "text": "*",
        "start": {
          "row": 125,
          "column": 36
        },
        "end": {
          "row": 125,
          "column": 37
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "end_nodes_by_id",
        "start": {
          "row": 125,
          "column": 39
        },
        "end": {
          "row": 125,
          "column": 54
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "Iterator iterator;",
        "start": {
          "row": 126,
          "column": 3
        },
        "end": {
          "row": 126,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Iterator",
        "start": {
          "row": 126,
          "column": 3
        },
        "end": {
          "row": 126,
          "column": 11
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "iterator",
        "start": {
          "row": 126,
          "column": 12
        },
        "end": {
          "row": 126,
          "column": 20
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "flat_set<MarkerId> exclusive_marker_ids;",
        "start": {
          "row": 127,
          "column": 3
        },
        "end": {
          "row": 127,
          "column": 43
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "flat_set<MarkerId>",
        "start": {
          "row": 127,
          "column": 3
        },
        "end": {
          "row": 127,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "flat_set",
        "start": {
          "row": 127,
          "column": 3
        },
        "end": {
          "row": 127,
          "column": 11
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<MarkerId>",
        "start": {
          "row": 127,
          "column": 11
        },
        "end": {
          "row": 127,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 127,
          "column": 12
        },
        "end": {
          "row": 127,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "MarkerId",
        "start": {
          "row": 127,
          "column": 12
        },
        "end": {
          "row": 127,
          "column": 20
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "exclusive_marker_ids",
        "start": {
          "row": 127,
          "column": 22
        },
        "end": {
          "row": 127,
          "column": 42
        }
      },
      {
        "kind": "field_declaration",
        "name": "query",
        "text": "mutable std::unordered_map<const Node*, Point> node_position_cache;",
        "start": {
          "row": 128,
          "column": 3
        },
        "end": {
          "row": 128,
          "column": 70
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "mutable",
        "start": {
          "row": 128,
          "column": 3
        },
        "end": {
          "row": 128,
          "column": 10
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::unordered_map<const Node*, Point>",
        "start": {
          "row": 128,
          "column": 11
        },
        "end": {
          "row": 128,
          "column": 49
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 128,
          "column": 11
        },
        "end": {
          "row": 128,
          "column": 14
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "unordered_map<const Node*, Point>",
        "start": {
          "row": 128,
          "column": 16
        },
        "end": {
          "row": 128,
          "column": 49
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "unordered_map",
        "start": {
          "row": 128,
          "column": 16
        },
        "end": {
          "row": 128,
          "column": 29
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<const Node*, Point>",
        "start": {
          "row": 128,
          "column": 29
        },
        "end": {
          "row": 128,
          "column": 49
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "const Node*",
        "start": {
          "row": 128,
          "column": 30
        },
        "end": {
          "row": 128,
          "column": 41
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 128,
          "column": 30
        },
        "end": {
          "row": 128,
          "column": 35
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Node",
        "start": {
          "row": 128,
          "column": 36
        },
        "end": {
          "row": 128,
          "column": 40
        }
      },
      {
        "kind": "abstract_pointer_declarator",
        "name": "query",
        "text": "*",
        "start": {
          "row": 128,
          "column": 40
        },
        "end": {
          "row": 128,
          "column": 41
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 128,
          "column": 43
        },
        "end": {
          "row": 128,
          "column": 48
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Point",
        "start": {
          "row": 128,
          "column": 43
        },
        "end": {
          "row": 128,
          "column": 48
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "node_position_cache",
        "start": {
          "row": 128,
          "column": 50
        },
        "end": {
          "row": 128,
          "column": 69
        }
      },
      {
        "kind": "comment",
        "name": "query",
        "text": "// MARKER_INDEX_H_",
        "start": {
          "row": 131,
          "column": 8
        },
        "end": {
          "row": 131,
          "column": 26
        }
      }
    ]
  },
  {
    "file": "vendor/tree-sitter-cpp/examples/rule.cc",
    "file_type": "cpp",
    "matches": [
      {
        "kind": "translation_unit",
        "name": "query",
        "text": "#include \"compiler/rule.h\"\n#include \"compiler/util/hash_combine.h\"\n\nnamespace tree_sitter {\nnamespace rules {\n\nusing std::move;\nusing std::vector;\nusing util::hash_combine;\n\nRule::Rule(const Rule &other) : blank_(Blank{}), type(BlankType) {\n  *this = other;\n}\n\nRule::Rule(Rule &&other) noexcept : blank_(Blank{}), type(BlankType) {\n  *this = move(other);\n}\n\nstatic void destroy_value(Rule *rule) {\n  switch (rule->type) {\n    case Rule::BlankType: return rule->blank_.~Blank();\n    case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();\n    case Rule::StringType: return rule->string_ .~String();\n    case Rule::PatternType: return rule->pattern_ .~Pattern();\n    case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();\n    case Rule::SymbolType: return rule->symbol_ .~Symbol();\n    case Rule::ChoiceType: return rule->choice_ .~Choice();\n    case Rule::MetadataType: return rule->metadata_ .~Metadata();\n    case Rule::RepeatType: return rule->repeat_ .~Repeat();\n    case Rule::SeqType: return rule->seq_ .~Seq();\n  }\n}\n\nRule &Rule::operator=(const Rule &other) {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;\n    case StringType:\n      new (&string_) String(other.string_);\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;\n    case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;\n  }\n  return *this;\n}\n\nRule &Rule::operator=(Rule &&other) noexcept {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;\n    case StringType:\n      new (&string_) String(move(other.string_));\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;\n    case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;\n  }\n  other.type = BlankType;\n  other.blank_ = Blank{};\n  return *this;\n}\n\nRule::~Rule() noexcept {\n  destroy_value(this);\n}\n\nbool Rule::operator==(const Rule &other) const {\n  if (type != other.type) return false;\n  switch (type) {\n    case Rule::CharacterSetType: return character_set_ == other.character_set_;\n    case Rule::StringType: return string_ == other.string_;\n    case Rule::PatternType: return pattern_ == other.pattern_;\n    case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;\n    case Rule::SymbolType: return symbol_ == other.symbol_;\n    case Rule::ChoiceType: return choice_ == other.choice_;\n    case Rule::MetadataType: return metadata_ == other.metadata_;\n    case Rule::RepeatType: return repeat_ == other.repeat_;\n    case Rule::SeqType: return seq_ == other.seq_;\n    default: return blank_ == other.blank_;\n  }\n}\n\ntemplate <>\nbool Rule::is<Blank>() const { return type == BlankType; }\n\ntemplate <>\nbool Rule::is<Symbol>() const { return type == SymbolType; }\n\ntemplate <>\nbool Rule::is<Repeat>() const { return type == RepeatType; }\n\ntemplate <>\nconst Symbol & Rule::get_unchecked<Symbol>() const { return symbol_; }\n\nstatic inline void add_choice_element(std::vector<Rule> *elements, const Rule &new_rule) {\n  new_rule.match(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  );\n}\n\nRule Rule::choice(const vector<Rule> &rules) {\n  vector<Rule> elements;\n  for (auto &element : rules) {\n    add_choice_element(&elements, element);\n  }\n  return (elements.size() == 1) ? elements.front() : Choice{elements};\n}\n\nRule Rule::repeat(const Rule &rule) {\n  return rule.is<Repeat>() ? rule : Repeat{rule};\n}\n\nRule Rule::seq(const vector<Rule> &rules) {\n  Rule result;\n  for (const auto &rule : rules) {\n    rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );\n  }\n  return result;\n}\n\n}  // namespace rules\n}  // namespace tree_sitter\n\nnamespace std {\n\nsize_t hash<Symbol>::operator()(const Symbol &symbol) const {\n  auto result = hash<int>()(symbol.index);\n  hash_combine(&result, hash<int>()(symbol.type));\n  return result;\n}\n\nsize_t hash<NamedSymbol>::operator()(const NamedSymbol &symbol) const {\n  return hash<string>()(symbol.value);\n}\n\nsize_t hash<Pattern>::operator()(const Pattern &symbol) const {\n  return hash<string>()(symbol.value);\n}\n\nsize_t hash<String>::operator()(const String &symbol) const {\n  return hash<string>()(symbol.value);\n}\n\nsize_t hash<CharacterSet>::operator()(const CharacterSet &character_set) const {\n  size_t result = 0;\n  hash_combine(&result, character_set.includes_all);\n  hash_combine(&result, character_set.included_chars.size());\n  for (uint32_t c : character_set.included_chars) {\n    hash_combine(&result, c);\n  }\n  hash_combine(&result, character_set.excluded_chars.size());\n  for (uint32_t c : character_set.excluded_chars) {\n    hash_combine(&result, c);\n  }\n  return result;\n}\n\nsize_t hash<Blank>::operator()(const Blank &blank) const {\n  return 0;\n}\n\nsize_t hash<Choice>::operator()(const Choice &choice) const {\n  size_t result = 0;\n  for (const auto &element : choice.elements) {\n    symmetric_hash_combine(&result, element);\n  }\n  return result;\n}\n\nsize_t hash<Repeat>::operator()(const Repeat &repeat) const {\n  size_t result = 0;\n  hash_combine(&result, *repeat.rule);\n  return result;\n}\n\nsize_t hash<Seq>::operator()(const Seq &seq) const {\n  size_t result = 0;\n  hash_combine(&result, *seq.left);\n  hash_combine(&result, *seq.right);\n  return result;\n}\n\nsize_t hash<Metadata>::operator()(const Metadata &metadata) const {\n  size_t result = 0;\n  hash_combine(&result, *metadata.rule);\n  hash_combine(&result, metadata.params.precedence);\n  hash_combine<int>(&result, metadata.params.associativity);\n  hash_combine(&result, metadata.params.has_precedence);\n  hash_combine(&result, metadata.params.has_associativity);\n  hash_combine(&result, metadata.params.is_token);\n  hash_combine(&result, metadata.params.is_string);\n  hash_combine(&result, metadata.params.is_active);\n  hash_combine(&result, metadata.params.is_main_token);\n  return result;\n}\n\nsize_t hash<Rule>::operator()(const Rule &rule) const {\n  size_t result = hash<int>()(rule.type);\n  switch (rule.type) {\n    case Rule::CharacterSetType: return result ^ hash<CharacterSet>()(rule.character_set_);\n    case Rule::StringType: return result ^ hash<String>()(rule.string_);\n    case Rule::PatternType: return result ^ hash<Pattern>()(rule.pattern_);\n    case Rule::NamedSymbolType: return result ^ hash<NamedSymbol>()(rule.named_symbol_);\n    case Rule::SymbolType: return result ^ hash<Symbol>()(rule.symbol_);\n    case Rule::ChoiceType: return result ^ hash<Choice>()(rule.choice_);\n    case Rule::MetadataType: return result ^ hash<Metadata>()(rule.metadata_);\n    case Rule::RepeatType: return result ^ hash<Repeat>()(rule.repeat_);\n    case Rule::SeqType: return result ^ hash<Seq>()(rule.seq_);\n    default: return result ^ hash<Blank>()(rule.blank_);\n  }\n}\n\n}  // namespace std",
        "start": {
          "row": 1,
          "column": 1
        },
        "end": {
          "row": 287,
          "column": 20
        }
      },
      {
        "kind": "preproc_include",
        "name": "query",
        "text": "#include \"compiler/rule.h\"\n",
        "start": {
          "row": 1,
          "column": 1
        },
        "end": {
          "row": 2,
          "column": 1
        }
      },
      {
        "kind": "string_literal",
        "name": "query",
        "text": "\"compiler/rule.h\"",
        "start": {
          "row": 1,
          "column": 10
        },
        "end": {
          "row": 1,
          "column": 27
        }
      },
      {
        "kind": "preproc_include",
        "name": "query",
        "text": "#include \"compiler/util/hash_combine.h\"\n\n",
        "start": {
          "row": 2,
          "column": 1
        },
        "end": {
          "row": 4,
          "column": 1
        }
      },
      {
        "kind": "string_literal",
        "name": "query",
        "text": "\"compiler/util/hash_combine.h\"",
        "start": {
          "row": 2,
          "column": 10
        },
        "end": {
          "row": 2,
          "column": 40
        }
      },
      {
        "kind": "namespace_definition",
        "name": "query",
        "text": "namespace tree_sitter {\nnamespace rules {\n\nusing std::move;\nusing std::vector;\nusing util::hash_combine;\n\nRule::Rule(const Rule &other) : blank_(Blank{}), type(BlankType) {\n  *this = other;\n}\n\nRule::Rule(Rule &&other) noexcept : blank_(Blank{}), type(BlankType) {\n  *this = move(other);\n}\n\nstatic void destroy_value(Rule *rule) {\n  switch (rule->type) {\n    case Rule::BlankType: return rule->blank_.~Blank();\n    case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();\n    case Rule::StringType: return rule->string_ .~String();\n    case Rule::PatternType: return rule->pattern_ .~Pattern();\n    case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();\n    case Rule::SymbolType: return rule->symbol_ .~Symbol();\n    case Rule::ChoiceType: return rule->choice_ .~Choice();\n    case Rule::MetadataType: return rule->metadata_ .~Metadata();\n    case Rule::RepeatType: return rule->repeat_ .~Repeat();\n    case Rule::SeqType: return rule->seq_ .~Seq();\n  }\n}\n\nRule &Rule::operator=(const Rule &other) {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;\n    case StringType:\n      new (&string_) String(other.string_);\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;\n    case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;\n  }\n  return *this;\n}\n\nRule &Rule::operator=(Rule &&other) noexcept {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;\n    case StringType:\n      new (&string_) String(move(other.string_));\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;\n    case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;\n  }\n  other.type = BlankType;\n  other.blank_ = Blank{};\n  return *this;\n}\n\nRule::~Rule() noexcept {\n  destroy_value(this);\n}\n\nbool Rule::operator==(const Rule &other) const {\n  if (type != other.type) return false;\n  switch (type) {\n    case Rule::CharacterSetType: return character_set_ == other.character_set_;\n    case Rule::StringType: return string_ == other.string_;\n    case Rule::PatternType: return pattern_ == other.pattern_;\n    case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;\n    case Rule::SymbolType: return symbol_ == other.symbol_;\n    case Rule::ChoiceType: return choice_ == other.choice_;\n    case Rule::MetadataType: return metadata_ == other.metadata_;\n    case Rule::RepeatType: return repeat_ == other.repeat_;\n    case Rule::SeqType: return seq_ == other.seq_;\n    default: return blank_ == other.blank_;\n  }\n}\n\ntemplate <>\nbool Rule::is<Blank>() const { return type == BlankType; }\n\ntemplate <>\nbool Rule::is<Symbol>() const { return type == SymbolType; }\n\ntemplate <>\nbool Rule::is<Repeat>() const { return type == RepeatType; }\n\ntemplate <>\nconst Symbol & Rule::get_unchecked<Symbol>() const { return symbol_; }\n\nstatic inline void add_choice_element(std::vector<Rule> *elements, const Rule &new_rule) {\n  new_rule.match(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  );\n}\n\nRule Rule::choice(const vector<Rule> &rules) {\n  vector<Rule> elements;\n  for (auto &element : rules) {\n    add_choice_element(&elements, element);\n  }\n  return (elements.size() == 1) ? elements.front() : Choice{elements};\n}\n\nRule Rule::repeat(const Rule &rule) {\n  return rule.is<Repeat>() ? rule : Repeat{rule};\n}\n\nRule Rule::seq(const vector<Rule> &rules) {\n  Rule result;\n  for (const auto &rule : rules) {\n    rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );\n  }\n  return result;\n}\n\n}  // namespace rules\n}",
        "start": {
          "row": 4,
          "column": 1
        },
        "end": {
          "row": 196,
          "column": 2
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "tree_sitter",
        "start": {
          "row": 4,
          "column": 11
        },
        "end": {
          "row": 4,
          "column": 22
        }
      },
      {
        "kind": "declaration_list",
        "name": "query",
        "text": "{\nnamespace rules {\n\nusing std::move;\nusing std::vector;\nusing util::hash_combine;\n\nRule::Rule(const Rule &other) : blank_(Blank{}), type(BlankType) {\n  *this = other;\n}\n\nRule::Rule(Rule &&other) noexcept : blank_(Blank{}), type(BlankType) {\n  *this = move(other);\n}\n\nstatic void destroy_value(Rule *rule) {\n  switch (rule->type) {\n    case Rule::BlankType: return rule->blank_.~Blank();\n    case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();\n    case Rule::StringType: return rule->string_ .~String();\n    case Rule::PatternType: return rule->pattern_ .~Pattern();\n    case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();\n    case Rule::SymbolType: return rule->symbol_ .~Symbol();\n    case Rule::ChoiceType: return rule->choice_ .~Choice();\n    case Rule::MetadataType: return rule->metadata_ .~Metadata();\n    case Rule::RepeatType: return rule->repeat_ .~Repeat();\n    case Rule::SeqType: return rule->seq_ .~Seq();\n  }\n}\n\nRule &Rule::operator=(const Rule &other) {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;\n    case StringType:\n      new (&string_) String(other.string_);\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;\n    case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;\n  }\n  return *this;\n}\n\nRule &Rule::operator=(Rule &&other) noexcept {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;\n    case StringType:\n      new (&string_) String(move(other.string_));\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;\n    case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;\n  }\n  other.type = BlankType;\n  other.blank_ = Blank{};\n  return *this;\n}\n\nRule::~Rule() noexcept {\n  destroy_value(this);\n}\n\nbool Rule::operator==(const Rule &other) const {\n  if (type != other.type) return false;\n  switch (type) {\n    case Rule::CharacterSetType: return character_set_ == other.character_set_;\n    case Rule::StringType: return string_ == other.string_;\n    case Rule::PatternType: return pattern_ == other.pattern_;\n    case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;\n    case Rule::SymbolType: return symbol_ == other.symbol_;\n    case Rule::ChoiceType: return choice_ == other.choice_;\n    case Rule::MetadataType: return metadata_ == other.metadata_;\n    case Rule::RepeatType: return repeat_ == other.repeat_;\n    case Rule::SeqType: return seq_ == other.seq_;\n    default: return blank_ == other.blank_;\n  }\n}\n\ntemplate <>\nbool Rule::is<Blank>() const { return type == BlankType; }\n\ntemplate <>\nbool Rule::is<Symbol>() const { return type == SymbolType; }\n\ntemplate <>\nbool Rule::is<Repeat>() const { return type == RepeatType; }\n\ntemplate <>\nconst Symbol & Rule::get_unchecked<Symbol>() const { return symbol_; }\n\nstatic inline void add_choice_element(std::vector<Rule> *elements, const Rule &new_rule) {\n  new_rule.match(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  );\n}\n\nRule Rule::choice(const vector<Rule> &rules) {\n  vector<Rule> elements;\n  for (auto &element : rules) {\n    add_choice_element(&elements, element);\n  }\n  return (elements.size() == 1) ? elements.front() : Choice{elements};\n}\n\nRule Rule::repeat(const Rule &rule) {\n  return rule.is<Repeat>() ? rule : Repeat{rule};\n}\n\nRule Rule::seq(const vector<Rule> &rules) {\n  Rule result;\n  for (const auto &rule : rules) {\n    rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );\n  }\n  return result;\n}\n\n}  // namespace rules\n}",
        "start": {
          "row": 4,
          "column": 23
        },
        "end": {
          "row": 196,
          "column": 2
        }
      },
      {
        "kind": "namespace_definition",
        "name": "query",
        "text": "namespace rules {\n\nusing std::move;\nusing std::vector;\nusing util::hash_combine;\n\nRule::Rule(const Rule &other) : blank_(Blank{}), type(BlankType) {\n  *this = other;\n}\n\nRule::Rule(Rule &&other) noexcept : blank_(Blank{}), type(BlankType) {\n  *this = move(other);\n}\n\nstatic void destroy_value(Rule *rule) {\n  switch (rule->type) {\n    case Rule::BlankType: return rule->blank_.~Blank();\n    case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();\n    case Rule::StringType: return rule->string_ .~String();\n    case Rule::PatternType: return rule->pattern_ .~Pattern();\n    case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();\n    case Rule::SymbolType: return rule->symbol_ .~Symbol();\n    case Rule::ChoiceType: return rule->choice_ .~Choice();\n    case Rule::MetadataType: return rule->metadata_ .~Metadata();\n    case Rule::RepeatType: return rule->repeat_ .~Repeat();\n    case Rule::SeqType: return rule->seq_ .~Seq();\n  }\n}\n\nRule &Rule::operator=(const Rule &other) {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;\n    case StringType:\n      new (&string_) String(other.string_);\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;\n    case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;\n  }\n  return *this;\n}\n\nRule &Rule::operator=(Rule &&other) noexcept {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;\n    case StringType:\n      new (&string_) String(move(other.string_));\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;\n    case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;\n  }\n  other.type = BlankType;\n  other.blank_ = Blank{};\n  return *this;\n}\n\nRule::~Rule() noexcept {\n  destroy_value(this);\n}\n\nbool Rule::operator==(const Rule &other) const {\n  if (type != other.type) return false;\n  switch (type) {\n    case Rule::CharacterSetType: return character_set_ == other.character_set_;\n    case Rule::StringType: return string_ == other.string_;\n    case Rule::PatternType: return pattern_ == other.pattern_;\n    case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;\n    case Rule::SymbolType: return symbol_ == other.symbol_;\n    case Rule::ChoiceType: return choice_ == other.choice_;\n    case Rule::MetadataType: return metadata_ == other.metadata_;\n    case Rule::RepeatType: return repeat_ == other.repeat_;\n    case Rule::SeqType: return seq_ == other.seq_;\n    default: return blank_ == other.blank_;\n  }\n}\n\ntemplate <>\nbool Rule::is<Blank>() const { return type == BlankType; }\n\ntemplate <>\nbool Rule::is<Symbol>() const { return type == SymbolType; }\n\ntemplate <>\nbool Rule::is<Repeat>() const { return type == RepeatType; }\n\ntemplate <>\nconst Symbol & Rule::get_unchecked<Symbol>() const { return symbol_; }\n\nstatic inline void add_choice_element(std::vector<Rule> *elements, const Rule &new_rule) {\n  new_rule.match(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  );\n}\n\nRule Rule::choice(const vector<Rule> &rules) {\n  vector<Rule> elements;\n  for (auto &element : rules) {\n    add_choice_element(&elements, element);\n  }\n  return (elements.size() == 1) ? elements.front() : Choice{elements};\n}\n\nRule Rule::repeat(const Rule &rule) {\n  return rule.is<Repeat>() ? rule : Repeat{rule};\n}\n\nRule Rule::seq(const vector<Rule> &rules) {\n  Rule result;\n  for (const auto &rule : rules) {\n    rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );\n  }\n  return result;\n}\n\n}",
        "start": {
          "row": 5,
          "column": 1
        },
        "end": {
          "row": 195,
          "column": 2
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rules",
        "start": {
          "row": 5,
          "column": 11
        },
        "end": {
          "row": 5,
          "column": 16
        }
      },
      {
        "kind": "declaration_list",
        "name": "query",
        "text": "{\n\nusing std::move;\nusing std::vector;\nusing util::hash_combine;\n\nRule::Rule(const Rule &other) : blank_(Blank{}), type(BlankType) {\n  *this = other;\n}\n\nRule::Rule(Rule &&other) noexcept : blank_(Blank{}), type(BlankType) {\n  *this = move(other);\n}\n\nstatic void destroy_value(Rule *rule) {\n  switch (rule->type) {\n    case Rule::BlankType: return rule->blank_.~Blank();\n    case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();\n    case Rule::StringType: return rule->string_ .~String();\n    case Rule::PatternType: return rule->pattern_ .~Pattern();\n    case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();\n    case Rule::SymbolType: return rule->symbol_ .~Symbol();\n    case Rule::ChoiceType: return rule->choice_ .~Choice();\n    case Rule::MetadataType: return rule->metadata_ .~Metadata();\n    case Rule::RepeatType: return rule->repeat_ .~Repeat();\n    case Rule::SeqType: return rule->seq_ .~Seq();\n  }\n}\n\nRule &Rule::operator=(const Rule &other) {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;\n    case StringType:\n      new (&string_) String(other.string_);\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;\n    case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;\n  }\n  return *this;\n}\n\nRule &Rule::operator=(Rule &&other) noexcept {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;\n    case StringType:\n      new (&string_) String(move(other.string_));\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;\n    case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;\n  }\n  other.type = BlankType;\n  other.blank_ = Blank{};\n  return *this;\n}\n\nRule::~Rule() noexcept {\n  destroy_value(this);\n}\n\nbool Rule::operator==(const Rule &other) const {\n  if (type != other.type) return false;\n  switch (type) {\n    case Rule::CharacterSetType: return character_set_ == other.character_set_;\n    case Rule::StringType: return string_ == other.string_;\n    case Rule::PatternType: return pattern_ == other.pattern_;\n    case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;\n    case Rule::SymbolType: return symbol_ == other.symbol_;\n    case Rule::ChoiceType: return choice_ == other.choice_;\n    case Rule::MetadataType: return metadata_ == other.metadata_;\n    case Rule::RepeatType: return repeat_ == other.repeat_;\n    case Rule::SeqType: return seq_ == other.seq_;\n    default: return blank_ == other.blank_;\n  }\n}\n\ntemplate <>\nbool Rule::is<Blank>() const { return type == BlankType; }\n\ntemplate <>\nbool Rule::is<Symbol>() const { return type == SymbolType; }\n\ntemplate <>\nbool Rule::is<Repeat>() const { return type == RepeatType; }\n\ntemplate <>\nconst Symbol & Rule::get_unchecked<Symbol>() const { return symbol_; }\n\nstatic inline void add_choice_element(std::vector<Rule> *elements, const Rule &new_rule) {\n  new_rule.match(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  );\n}\n\nRule Rule::choice(const vector<Rule> &rules) {\n  vector<Rule> elements;\n  for (auto &element : rules) {\n    add_choice_element(&elements, element);\n  }\n  return (elements.size() == 1) ? elements.front() : Choice{elements};\n}\n\nRule Rule::repeat(const Rule &rule) {\n  return rule.is<Repeat>() ? rule : Repeat{rule};\n}\n\nRule Rule::seq(const vector<Rule> &rules) {\n  Rule result;\n  for (const auto &rule : rules) {\n    rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );\n  }\n  return result;\n}\n\n}",
        "start": {
          "row": 5,
          "column": 17
        },
        "end": {
          "row": 195,
          "column": 2
        }
      },
      {
        "kind": "using_declaration",
        "name": "query",
        "text": "using std::move;",
        "start": {
          "row": 7,
          "column": 1
        },
        "end": {
          "row": 7,
          "column": 17
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::move",
        "start": {
          "row": 7,
          "column": 7
        },
        "end": {
          "row": 7,
          "column": 16
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 7,
          "column": 7
        },
        "end": {
          "row": 7,
          "column": 10
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 7,
          "column": 12
        },
        "end": {
          "row": 7,
          "column": 16
        }
      },
      {
        "kind": "using_declaration",
        "name": "query",
        "text": "using std::vector;",
        "start": {
          "row": 8,
          "column": 1
        },
        "end": {
          "row": 8,
          "column": 19
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::vector",
        "start": {
          "row": 8,
          "column": 7
        },
        "end": {
          "row": 8,
          "column": 18
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 8,
          "column": 7
        },
        "end": {
          "row": 8,
          "column": 10
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "vector",
        "start": {
          "row": 8,
          "column": 12
        },
        "end": {
          "row": 8,
          "column": 18
        }
      },
      {
        "kind": "using_declaration",
        "name": "query",
        "text": "using util::hash_combine;",
        "start": {
          "row": 9,
          "column": 1
        },
        "end": {
          "row": 9,
          "column": 26
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "util::hash_combine",
        "start": {
          "row": 9,
          "column": 7
        },
        "end": {
          "row": 9,
          "column": 25
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "util",
        "start": {
          "row": 9,
          "column": 7
        },
        "end": {
          "row": 9,
          "column": 11
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 9,
          "column": 13
        },
        "end": {
          "row": 9,
          "column": 25
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "Rule::Rule(const Rule &other) : blank_(Blank{}), type(BlankType) {\n  *this = other;\n}",
        "start": {
          "row": 11,
          "column": 1
        },
        "end": {
          "row": 13,
          "column": 2
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::Rule(const Rule &other)",
        "start": {
          "row": 11,
          "column": 1
        },
        "end": {
          "row": 11,
          "column": 30
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::Rule",
        "start": {
          "row": 11,
          "column": 1
        },
        "end": {
          "row": 11,
          "column": 11
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 11,
          "column": 1
        },
        "end": {
          "row": 11,
          "column": 5
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 11,
          "column": 7
        },
        "end": {
          "row": 11,
          "column": 11
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Rule &other)",
        "start": {
          "row": 11,
          "column": 11
        },
        "end": {
          "row": 11,
          "column": 30
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Rule &other",
        "start": {
          "row": 11,
          "column": 12
        },
        "end": {
          "row": 11,
          "column": 29
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 11,
          "column": 12
        },
        "end": {
          "row": 11,
          "column": 17
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 11,
          "column": 18
        },
        "end": {
          "row": 11,
          "column": 22
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&other",
        "start": {
          "row": 11,
          "column": 23
        },
        "end": {
          "row": 11,
          "column": 29
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 11,
          "column": 24
        },
        "end": {
          "row": 11,
          "column": 29
        }
      },
      {
        "kind": "field_initializer_list",
        "name": "query",
        "text": ": blank_(Blank{}), type(BlankType)",
        "start": {
          "row": 11,
          "column": 31
        },
        "end": {
          "row": 11,
          "column": 65
        }
      },
      {
        "kind": "field_initializer",
        "name": "query",
        "text": "blank_(Blank{})",
        "start": {
          "row": 11,
          "column": 33
        },
        "end": {
          "row": 11,
          "column": 48
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 11,
          "column": 33
        },
        "end": {
          "row": 11,
          "column": 39
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(Blank{})",
        "start": {
          "row": 11,
          "column": 39
        },
        "end": {
          "row": 11,
          "column": 48
        }
      },
      {
        "kind": "compound_literal_expression",
        "name": "query",
        "text": "Blank{}",
        "start": {
          "row": 11,
          "column": 40
        },
        "end": {
          "row": 11,
          "column": 47
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 11,
          "column": 40
        },
        "end": {
          "row": 11,
          "column": 45
        }
      },
      {
        "kind": "initializer_list",
        "name": "query",
        "text": "{}",
        "start": {
          "row": 11,
          "column": 45
        },
        "end": {
          "row": 11,
          "column": 47
        }
      },
      {
        "kind": "field_initializer",
        "name": "query",
        "text": "type(BlankType)",
        "start": {
          "row": 11,
          "column": 50
        },
        "end": {
          "row": 11,
          "column": 65
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 11,
          "column": 50
        },
        "end": {
          "row": 11,
          "column": 54
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(BlankType)",
        "start": {
          "row": 11,
          "column": 54
        },
        "end": {
          "row": 11,
          "column": 65
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "BlankType",
        "start": {
          "row": 11,
          "column": 55
        },
        "end": {
          "row": 11,
          "column": 64
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  *this = other;\n}",
        "start": {
          "row": 11,
          "column": 66
        },
        "end": {
          "row": 13,
          "column": 2
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "*this = other;",
        "start": {
          "row": 12,
          "column": 3
        },
        "end": {
          "row": 12,
          "column": 17
        }
      },
      {
        "kind": "assignment_expression",
        "name": "query",
        "text": "*this = other",
        "start": {
          "row": 12,
          "column": 3
        },
        "end": {
          "row": 12,
          "column": 16
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "*this",
        "start": {
          "row": 12,
          "column": 3
        },
        "end": {
          "row": 12,
          "column": 8
        }
      },
      {
        "kind": "this",
        "name": "query",
        "text": "this",
        "start": {
          "row": 12,
          "column": 4
        },
        "end": {
          "row": 12,
          "column": 8
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 12,
          "column": 11
        },
        "end": {
          "row": 12,
          "column": 16
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "Rule::Rule(Rule &&other) noexcept : blank_(Blank{}), type(BlankType) {\n  *this = move(other);\n}",
        "start": {
          "row": 15,
          "column": 1
        },
        "end": {
          "row": 17,
          "column": 2
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::Rule(Rule &&other) noexcept",
        "start": {
          "row": 15,
          "column": 1
        },
        "end": {
          "row": 15,
          "column": 34
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::Rule",
        "start": {
          "row": 15,
          "column": 1
        },
        "end": {
          "row": 15,
          "column": 11
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 15,
          "column": 1
        },
        "end": {
          "row": 15,
          "column": 5
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 15,
          "column": 7
        },
        "end": {
          "row": 15,
          "column": 11
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Rule &&other)",
        "start": {
          "row": 15,
          "column": 11
        },
        "end": {
          "row": 15,
          "column": 25
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Rule &&other",
        "start": {
          "row": 15,
          "column": 12
        },
        "end": {
          "row": 15,
          "column": 24
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 15,
          "column": 12
        },
        "end": {
          "row": 15,
          "column": 16
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&&other",
        "start": {
          "row": 15,
          "column": 17
        },
        "end": {
          "row": 15,
          "column": 24
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 15,
          "column": 19
        },
        "end": {
          "row": 15,
          "column": 24
        }
      },
      {
        "kind": "noexcept",
        "name": "query",
        "text": "noexcept",
        "start": {
          "row": 15,
          "column": 26
        },
        "end": {
          "row": 15,
          "column": 34
        }
      },
      {
        "kind": "field_initializer_list",
        "name": "query",
        "text": ": blank_(Blank{}), type(BlankType)",
        "start": {
          "row": 15,
          "column": 35
        },
        "end": {
          "row": 15,
          "column": 69
        }
      },
      {
        "kind": "field_initializer",
        "name": "query",
        "text": "blank_(Blank{})",
        "start": {
          "row": 15,
          "column": 37
        },
        "end": {
          "row": 15,
          "column": 52
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 15,
          "column": 37
        },
        "end": {
          "row": 15,
          "column": 43
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(Blank{})",
        "start": {
          "row": 15,
          "column": 43
        },
        "end": {
          "row": 15,
          "column": 52
        }
      },
      {
        "kind": "compound_literal_expression",
        "name": "query",
        "text": "Blank{}",
        "start": {
          "row": 15,
          "column": 44
        },
        "end": {
          "row": 15,
          "column": 51
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 15,
          "column": 44
        },
        "end": {
          "row": 15,
          "column": 49
        }
      },
      {
        "kind": "initializer_list",
        "name": "query",
        "text": "{}",
        "start": {
          "row": 15,
          "column": 49
        },
        "end": {
          "row": 15,
          "column": 51
        }
      },
      {
        "kind": "field_initializer",
        "name": "query",
        "text": "type(BlankType)",
        "start": {
          "row": 15,
          "column": 54
        },
        "end": {
          "row": 15,
          "column": 69
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 15,
          "column": 54
        },
        "end": {
          "row": 15,
          "column": 58
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(BlankType)",
        "start": {
          "row": 15,
          "column": 58
        },
        "end": {
          "row": 15,
          "column": 69
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "BlankType",
        "start": {
          "row": 15,
          "column": 59
        },
        "end": {
          "row": 15,
          "column": 68
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  *this = move(other);\n}",
        "start": {
          "row": 15,
          "column": 70
        },
        "end": {
          "row": 17,
          "column": 2
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "*this = move(other);",
        "start": {
          "row": 16,
          "column": 3
        },
        "end": {
          "row": 16,
          "column": 23
        }
      },
      {
        "kind": "assignment_expression",
        "name": "query",
        "text": "*this = move(other)",
        "start": {
          "row": 16,
          "column": 3
        },
        "end": {
          "row": 16,
          "column": 22
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "*this",
        "start": {
          "row": 16,
          "column": 3
        },
        "end": {
          "row": 16,
          "column": 8
        }
      },
      {
        "kind": "this",
        "name": "query",
        "text": "this",
        "start": {
          "row": 16,
          "column": 4
        },
        "end": {
          "row": 16,
          "column": 8
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other)",
        "start": {
          "row": 16,
          "column": 11
        },
        "end": {
          "row": 16,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 16,
          "column": 11
        },
        "end": {
          "row": 16,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other)",
        "start": {
          "row": 16,
          "column": 15
        },
        "end": {
          "row": 16,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 16,
          "column": 16
        },
        "end": {
          "row": 16,
          "column": 21
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "static void destroy_value(Rule *rule) {\n  switch (rule->type) {\n    case Rule::BlankType: return rule->blank_.~Blank();\n    case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();\n    case Rule::StringType: return rule->string_ .~String();\n    case Rule::PatternType: return rule->pattern_ .~Pattern();\n    case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();\n    case Rule::SymbolType: return rule->symbol_ .~Symbol();\n    case Rule::ChoiceType: return rule->choice_ .~Choice();\n    case Rule::MetadataType: return rule->metadata_ .~Metadata();\n    case Rule::RepeatType: return rule->repeat_ .~Repeat();\n    case Rule::SeqType: return rule->seq_ .~Seq();\n  }\n}",
        "start": {
          "row": 19,
          "column": 1
        },
        "end": {
          "row": 32,
          "column": 2
        }
      },
      {
        "kind": "storage_class_specifier",
        "name": "query",
        "text": "static",
        "start": {
          "row": 19,
          "column": 1
        },
        "end": {
          "row": 19,
          "column": 7
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 19,
          "column": 8
        },
        "end": {
          "row": 19,
          "column": 12
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "destroy_value(Rule *rule)",
        "start": {
          "row": 19,
          "column": 13
        },
        "end": {
          "row": 19,
          "column": 38
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "destroy_value",
        "start": {
          "row": 19,
          "column": 13
        },
        "end": {
          "row": 19,
          "column": 26
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Rule *rule)",
        "start": {
          "row": 19,
          "column": 26
        },
        "end": {
          "row": 19,
          "column": 38
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Rule *rule",
        "start": {
          "row": 19,
          "column": 27
        },
        "end": {
          "row": 19,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 19,
          "column": 27
        },
        "end": {
          "row": 19,
          "column": 31
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*rule",
        "start": {
          "row": 19,
          "column": 32
        },
        "end": {
          "row": 19,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 19,
          "column": 33
        },
        "end": {
          "row": 19,
          "column": 37
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  switch (rule->type) {\n    case Rule::BlankType: return rule->blank_.~Blank();\n    case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();\n    case Rule::StringType: return rule->string_ .~String();\n    case Rule::PatternType: return rule->pattern_ .~Pattern();\n    case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();\n    case Rule::SymbolType: return rule->symbol_ .~Symbol();\n    case Rule::ChoiceType: return rule->choice_ .~Choice();\n    case Rule::MetadataType: return rule->metadata_ .~Metadata();\n    case Rule::RepeatType: return rule->repeat_ .~Repeat();\n    case Rule::SeqType: return rule->seq_ .~Seq();\n  }\n}",
        "start": {
          "row": 19,
          "column": 39
        },
        "end": {
          "row": 32,
          "column": 2
        }
      },
      {
        "kind": "switch_statement",
        "name": "query",
        "text": "switch (rule->type) {\n    case Rule::BlankType: return rule->blank_.~Blank();\n    case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();\n    case Rule::StringType: return rule->string_ .~String();\n    case Rule::PatternType: return rule->pattern_ .~Pattern();\n    case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();\n    case Rule::SymbolType: return rule->symbol_ .~Symbol();\n    case Rule::ChoiceType: return rule->choice_ .~Choice();\n    case Rule::MetadataType: return rule->metadata_ .~Metadata();\n    case Rule::RepeatType: return rule->repeat_ .~Repeat();\n    case Rule::SeqType: return rule->seq_ .~Seq();\n  }",
        "start": {
          "row": 20,
          "column": 3
        },
        "end": {
          "row": 31,
          "column": 4
        }
      },
      {
        "kind": "condition_clause",
        "name": "query",
        "text": "(rule->type)",
        "start": {
          "row": 20,
          "column": 10
        },
        "end": {
          "row": 20,
          "column": 22
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->type",
        "start": {
          "row": 20,
          "column": 11
        },
        "end": {
          "row": 20,
          "column": 21
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 20,
          "column": 11
        },
        "end": {
          "row": 20,
          "column": 15
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 20,
          "column": 17
        },
        "end": {
          "row": 20,
          "column": 21
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    case Rule::BlankType: return rule->blank_.~Blank();\n    case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();\n    case Rule::StringType: return rule->string_ .~String();\n    case Rule::PatternType: return rule->pattern_ .~Pattern();\n    case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();\n    case Rule::SymbolType: return rule->symbol_ .~Symbol();\n    case Rule::ChoiceType: return rule->choice_ .~Choice();\n    case Rule::MetadataType: return rule->metadata_ .~Metadata();\n    case Rule::RepeatType: return rule->repeat_ .~Repeat();\n    case Rule::SeqType: return rule->seq_ .~Seq();\n  }",
        "start": {
          "row": 20,
          "column": 23
        },
        "end": {
          "row": 31,
          "column": 4
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::BlankType: return rule->blank_.~Blank();",
        "start": {
          "row": 21,
          "column": 5
        },
        "end": {
          "row": 21,
          "column": 56
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::BlankType",
        "start": {
          "row": 21,
          "column": 10
        },
        "end": {
          "row": 21,
          "column": 25
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 21,
          "column": 10
        },
        "end": {
          "row": 21,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "BlankType",
        "start": {
          "row": 21,
          "column": 16
        },
        "end": {
          "row": 21,
          "column": 25
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->blank_.~Blank();",
        "start": {
          "row": 21,
          "column": 27
        },
        "end": {
          "row": 21,
          "column": 56
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->blank_.~Blank()",
        "start": {
          "row": 21,
          "column": 34
        },
        "end": {
          "row": 21,
          "column": 55
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->blank_.~Blank",
        "start": {
          "row": 21,
          "column": 34
        },
        "end": {
          "row": 21,
          "column": 53
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->blank_",
        "start": {
          "row": 21,
          "column": 34
        },
        "end": {
          "row": 21,
          "column": 46
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 21,
          "column": 34
        },
        "end": {
          "row": 21,
          "column": 38
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 21,
          "column": 40
        },
        "end": {
          "row": 21,
          "column": 46
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~Blank",
        "start": {
          "row": 21,
          "column": 47
        },
        "end": {
          "row": 21,
          "column": 53
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 21,
          "column": 48
        },
        "end": {
          "row": 21,
          "column": 53
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 21,
          "column": 53
        },
        "end": {
          "row": 21,
          "column": 55
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::CharacterSetType: return rule->character_set_.~CharacterSet();",
        "start": {
          "row": 22,
          "column": 5
        },
        "end": {
          "row": 22,
          "column": 78
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::CharacterSetType",
        "start": {
          "row": 22,
          "column": 10
        },
        "end": {
          "row": 22,
          "column": 32
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 22,
          "column": 10
        },
        "end": {
          "row": 22,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "CharacterSetType",
        "start": {
          "row": 22,
          "column": 16
        },
        "end": {
          "row": 22,
          "column": 32
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->character_set_.~CharacterSet();",
        "start": {
          "row": 22,
          "column": 34
        },
        "end": {
          "row": 22,
          "column": 78
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->character_set_.~CharacterSet()",
        "start": {
          "row": 22,
          "column": 41
        },
        "end": {
          "row": 22,
          "column": 77
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->character_set_.~CharacterSet",
        "start": {
          "row": 22,
          "column": 41
        },
        "end": {
          "row": 22,
          "column": 75
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->character_set_",
        "start": {
          "row": 22,
          "column": 41
        },
        "end": {
          "row": 22,
          "column": 61
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 22,
          "column": 41
        },
        "end": {
          "row": 22,
          "column": 45
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "character_set_",
        "start": {
          "row": 22,
          "column": 47
        },
        "end": {
          "row": 22,
          "column": 61
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~CharacterSet",
        "start": {
          "row": 22,
          "column": 62
        },
        "end": {
          "row": 22,
          "column": 75
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "CharacterSet",
        "start": {
          "row": 22,
          "column": 63
        },
        "end": {
          "row": 22,
          "column": 75
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 22,
          "column": 75
        },
        "end": {
          "row": 22,
          "column": 77
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::StringType: return rule->string_ .~String();",
        "start": {
          "row": 23,
          "column": 5
        },
        "end": {
          "row": 23,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::StringType",
        "start": {
          "row": 23,
          "column": 10
        },
        "end": {
          "row": 23,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 23,
          "column": 10
        },
        "end": {
          "row": 23,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "StringType",
        "start": {
          "row": 23,
          "column": 16
        },
        "end": {
          "row": 23,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->string_ .~String();",
        "start": {
          "row": 23,
          "column": 28
        },
        "end": {
          "row": 23,
          "column": 60
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->string_ .~String()",
        "start": {
          "row": 23,
          "column": 35
        },
        "end": {
          "row": 23,
          "column": 59
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->string_ .~String",
        "start": {
          "row": 23,
          "column": 35
        },
        "end": {
          "row": 23,
          "column": 57
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->string_",
        "start": {
          "row": 23,
          "column": 35
        },
        "end": {
          "row": 23,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 23,
          "column": 35
        },
        "end": {
          "row": 23,
          "column": 39
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "string_",
        "start": {
          "row": 23,
          "column": 41
        },
        "end": {
          "row": 23,
          "column": 48
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~String",
        "start": {
          "row": 23,
          "column": 50
        },
        "end": {
          "row": 23,
          "column": 57
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "String",
        "start": {
          "row": 23,
          "column": 51
        },
        "end": {
          "row": 23,
          "column": 57
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 23,
          "column": 57
        },
        "end": {
          "row": 23,
          "column": 59
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::PatternType: return rule->pattern_ .~Pattern();",
        "start": {
          "row": 24,
          "column": 5
        },
        "end": {
          "row": 24,
          "column": 63
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::PatternType",
        "start": {
          "row": 24,
          "column": 10
        },
        "end": {
          "row": 24,
          "column": 27
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 24,
          "column": 10
        },
        "end": {
          "row": 24,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "PatternType",
        "start": {
          "row": 24,
          "column": 16
        },
        "end": {
          "row": 24,
          "column": 27
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->pattern_ .~Pattern();",
        "start": {
          "row": 24,
          "column": 29
        },
        "end": {
          "row": 24,
          "column": 63
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->pattern_ .~Pattern()",
        "start": {
          "row": 24,
          "column": 36
        },
        "end": {
          "row": 24,
          "column": 62
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->pattern_ .~Pattern",
        "start": {
          "row": 24,
          "column": 36
        },
        "end": {
          "row": 24,
          "column": 60
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->pattern_",
        "start": {
          "row": 24,
          "column": 36
        },
        "end": {
          "row": 24,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 24,
          "column": 36
        },
        "end": {
          "row": 24,
          "column": 40
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "pattern_",
        "start": {
          "row": 24,
          "column": 42
        },
        "end": {
          "row": 24,
          "column": 50
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~Pattern",
        "start": {
          "row": 24,
          "column": 52
        },
        "end": {
          "row": 24,
          "column": 60
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Pattern",
        "start": {
          "row": 24,
          "column": 53
        },
        "end": {
          "row": 24,
          "column": 60
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 24,
          "column": 60
        },
        "end": {
          "row": 24,
          "column": 62
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::NamedSymbolType: return rule->named_symbol_.~NamedSymbol();",
        "start": {
          "row": 25,
          "column": 5
        },
        "end": {
          "row": 25,
          "column": 75
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::NamedSymbolType",
        "start": {
          "row": 25,
          "column": 10
        },
        "end": {
          "row": 25,
          "column": 31
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 25,
          "column": 10
        },
        "end": {
          "row": 25,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "NamedSymbolType",
        "start": {
          "row": 25,
          "column": 16
        },
        "end": {
          "row": 25,
          "column": 31
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->named_symbol_.~NamedSymbol();",
        "start": {
          "row": 25,
          "column": 33
        },
        "end": {
          "row": 25,
          "column": 75
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->named_symbol_.~NamedSymbol()",
        "start": {
          "row": 25,
          "column": 40
        },
        "end": {
          "row": 25,
          "column": 74
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->named_symbol_.~NamedSymbol",
        "start": {
          "row": 25,
          "column": 40
        },
        "end": {
          "row": 25,
          "column": 72
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->named_symbol_",
        "start": {
          "row": 25,
          "column": 40
        },
        "end": {
          "row": 25,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 25,
          "column": 40
        },
        "end": {
          "row": 25,
          "column": 44
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "named_symbol_",
        "start": {
          "row": 25,
          "column": 46
        },
        "end": {
          "row": 25,
          "column": 59
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~NamedSymbol",
        "start": {
          "row": 25,
          "column": 60
        },
        "end": {
          "row": 25,
          "column": 72
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "NamedSymbol",
        "start": {
          "row": 25,
          "column": 61
        },
        "end": {
          "row": 25,
          "column": 72
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 25,
          "column": 72
        },
        "end": {
          "row": 25,
          "column": 74
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::SymbolType: return rule->symbol_ .~Symbol();",
        "start": {
          "row": 26,
          "column": 5
        },
        "end": {
          "row": 26,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::SymbolType",
        "start": {
          "row": 26,
          "column": 10
        },
        "end": {
          "row": 26,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 26,
          "column": 10
        },
        "end": {
          "row": 26,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SymbolType",
        "start": {
          "row": 26,
          "column": 16
        },
        "end": {
          "row": 26,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->symbol_ .~Symbol();",
        "start": {
          "row": 26,
          "column": 28
        },
        "end": {
          "row": 26,
          "column": 60
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->symbol_ .~Symbol()",
        "start": {
          "row": 26,
          "column": 35
        },
        "end": {
          "row": 26,
          "column": 59
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->symbol_ .~Symbol",
        "start": {
          "row": 26,
          "column": 35
        },
        "end": {
          "row": 26,
          "column": 57
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->symbol_",
        "start": {
          "row": 26,
          "column": 35
        },
        "end": {
          "row": 26,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 26,
          "column": 35
        },
        "end": {
          "row": 26,
          "column": 39
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "symbol_",
        "start": {
          "row": 26,
          "column": 41
        },
        "end": {
          "row": 26,
          "column": 48
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~Symbol",
        "start": {
          "row": 26,
          "column": 50
        },
        "end": {
          "row": 26,
          "column": 57
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 26,
          "column": 51
        },
        "end": {
          "row": 26,
          "column": 57
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 26,
          "column": 57
        },
        "end": {
          "row": 26,
          "column": 59
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::ChoiceType: return rule->choice_ .~Choice();",
        "start": {
          "row": 27,
          "column": 5
        },
        "end": {
          "row": 27,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::ChoiceType",
        "start": {
          "row": 27,
          "column": 10
        },
        "end": {
          "row": 27,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 27,
          "column": 10
        },
        "end": {
          "row": 27,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "ChoiceType",
        "start": {
          "row": 27,
          "column": 16
        },
        "end": {
          "row": 27,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->choice_ .~Choice();",
        "start": {
          "row": 27,
          "column": 28
        },
        "end": {
          "row": 27,
          "column": 60
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->choice_ .~Choice()",
        "start": {
          "row": 27,
          "column": 35
        },
        "end": {
          "row": 27,
          "column": 59
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->choice_ .~Choice",
        "start": {
          "row": 27,
          "column": 35
        },
        "end": {
          "row": 27,
          "column": 57
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->choice_",
        "start": {
          "row": 27,
          "column": 35
        },
        "end": {
          "row": 27,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 27,
          "column": 35
        },
        "end": {
          "row": 27,
          "column": 39
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "choice_",
        "start": {
          "row": 27,
          "column": 41
        },
        "end": {
          "row": 27,
          "column": 48
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~Choice",
        "start": {
          "row": 27,
          "column": 50
        },
        "end": {
          "row": 27,
          "column": 57
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 27,
          "column": 51
        },
        "end": {
          "row": 27,
          "column": 57
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 27,
          "column": 57
        },
        "end": {
          "row": 27,
          "column": 59
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::MetadataType: return rule->metadata_ .~Metadata();",
        "start": {
          "row": 28,
          "column": 5
        },
        "end": {
          "row": 28,
          "column": 66
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::MetadataType",
        "start": {
          "row": 28,
          "column": 10
        },
        "end": {
          "row": 28,
          "column": 28
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 28,
          "column": 10
        },
        "end": {
          "row": 28,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "MetadataType",
        "start": {
          "row": 28,
          "column": 16
        },
        "end": {
          "row": 28,
          "column": 28
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->metadata_ .~Metadata();",
        "start": {
          "row": 28,
          "column": 30
        },
        "end": {
          "row": 28,
          "column": 66
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->metadata_ .~Metadata()",
        "start": {
          "row": 28,
          "column": 37
        },
        "end": {
          "row": 28,
          "column": 65
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->metadata_ .~Metadata",
        "start": {
          "row": 28,
          "column": 37
        },
        "end": {
          "row": 28,
          "column": 63
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->metadata_",
        "start": {
          "row": 28,
          "column": 37
        },
        "end": {
          "row": 28,
          "column": 52
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 28,
          "column": 37
        },
        "end": {
          "row": 28,
          "column": 41
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "metadata_",
        "start": {
          "row": 28,
          "column": 43
        },
        "end": {
          "row": 28,
          "column": 52
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~Metadata",
        "start": {
          "row": 28,
          "column": 54
        },
        "end": {
          "row": 28,
          "column": 63
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Metadata",
        "start": {
          "row": 28,
          "column": 55
        },
        "end": {
          "row": 28,
          "column": 63
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 28,
          "column": 63
        },
        "end": {
          "row": 28,
          "column": 65
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::RepeatType: return rule->repeat_ .~Repeat();",
        "start": {
          "row": 29,
          "column": 5
        },
        "end": {
          "row": 29,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::RepeatType",
        "start": {
          "row": 29,
          "column": 10
        },
        "end": {
          "row": 29,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 29,
          "column": 10
        },
        "end": {
          "row": 29,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "RepeatType",
        "start": {
          "row": 29,
          "column": 16
        },
        "end": {
          "row": 29,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->repeat_ .~Repeat();",
        "start": {
          "row": 29,
          "column": 28
        },
        "end": {
          "row": 29,
          "column": 60
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->repeat_ .~Repeat()",
        "start": {
          "row": 29,
          "column": 35
        },
        "end": {
          "row": 29,
          "column": 59
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->repeat_ .~Repeat",
        "start": {
          "row": 29,
          "column": 35
        },
        "end": {
          "row": 29,
          "column": 57
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->repeat_",
        "start": {
          "row": 29,
          "column": 35
        },
        "end": {
          "row": 29,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 29,
          "column": 35
        },
        "end": {
          "row": 29,
          "column": 39
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "repeat_",
        "start": {
          "row": 29,
          "column": 41
        },
        "end": {
          "row": 29,
          "column": 48
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~Repeat",
        "start": {
          "row": 29,
          "column": 50
        },
        "end": {
          "row": 29,
          "column": 57
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 29,
          "column": 51
        },
        "end": {
          "row": 29,
          "column": 57
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 29,
          "column": 57
        },
        "end": {
          "row": 29,
          "column": 59
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::SeqType: return rule->seq_ .~Seq();",
        "start": {
          "row": 30,
          "column": 5
        },
        "end": {
          "row": 30,
          "column": 51
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::SeqType",
        "start": {
          "row": 30,
          "column": 10
        },
        "end": {
          "row": 30,
          "column": 23
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 30,
          "column": 10
        },
        "end": {
          "row": 30,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SeqType",
        "start": {
          "row": 30,
          "column": 16
        },
        "end": {
          "row": 30,
          "column": 23
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule->seq_ .~Seq();",
        "start": {
          "row": 30,
          "column": 25
        },
        "end": {
          "row": 30,
          "column": 51
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule->seq_ .~Seq()",
        "start": {
          "row": 30,
          "column": 32
        },
        "end": {
          "row": 30,
          "column": 50
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->seq_ .~Seq",
        "start": {
          "row": 30,
          "column": 32
        },
        "end": {
          "row": 30,
          "column": 48
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule->seq_",
        "start": {
          "row": 30,
          "column": 32
        },
        "end": {
          "row": 30,
          "column": 42
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 30,
          "column": 32
        },
        "end": {
          "row": 30,
          "column": 36
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "seq_",
        "start": {
          "row": 30,
          "column": 38
        },
        "end": {
          "row": 30,
          "column": 42
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~Seq",
        "start": {
          "row": 30,
          "column": 44
        },
        "end": {
          "row": 30,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 30,
          "column": 45
        },
        "end": {
          "row": 30,
          "column": 48
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 30,
          "column": 48
        },
        "end": {
          "row": 30,
          "column": 50
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "Rule &Rule::operator=(const Rule &other) {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;\n    case StringType:\n      new (&string_) String(other.string_);\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;\n    case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;\n  }\n  return *this;\n}",
        "start": {
          "row": 34,
          "column": 1
        },
        "end": {
          "row": 70,
          "column": 2
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 34,
          "column": 1
        },
        "end": {
          "row": 34,
          "column": 5
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&Rule::operator=(const Rule &other)",
        "start": {
          "row": 34,
          "column": 6
        },
        "end": {
          "row": 34,
          "column": 41
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::operator=(const Rule &other)",
        "start": {
          "row": 34,
          "column": 7
        },
        "end": {
          "row": 34,
          "column": 41
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::operator=",
        "start": {
          "row": 34,
          "column": 7
        },
        "end": {
          "row": 34,
          "column": 22
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 34,
          "column": 7
        },
        "end": {
          "row": 34,
          "column": 11
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator=",
        "start": {
          "row": 34,
          "column": 13
        },
        "end": {
          "row": 34,
          "column": 22
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Rule &other)",
        "start": {
          "row": 34,
          "column": 22
        },
        "end": {
          "row": 34,
          "column": 41
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Rule &other",
        "start": {
          "row": 34,
          "column": 23
        },
        "end": {
          "row": 34,
          "column": 40
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 34,
          "column": 23
        },
        "end": {
          "row": 34,
          "column": 28
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 34,
          "column": 29
        },
        "end": {
          "row": 34,
          "column": 33
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&other",
        "start": {
          "row": 34,
          "column": 34
        },
        "end": {
          "row": 34,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 34,
          "column": 35
        },
        "end": {
          "row": 34,
          "column": 40
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;\n    case StringType:\n      new (&string_) String(other.string_);\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;\n    case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;\n  }\n  return *this;\n}",
        "start": {
          "row": 34,
          "column": 42
        },
        "end": {
          "row": 70,
          "column": 2
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "destroy_value(this);",
        "start": {
          "row": 35,
          "column": 3
        },
        "end": {
          "row": 35,
          "column": 23
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "destroy_value(this)",
        "start": {
          "row": 35,
          "column": 3
        },
        "end": {
          "row": 35,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "destroy_value",
        "start": {
          "row": 35,
          "column": 3
        },
        "end": {
          "row": 35,
          "column": 16
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(this)",
        "start": {
          "row": 35,
          "column": 16
        },
        "end": {
          "row": 35,
          "column": 22
        }
      },
      {
        "kind": "this",
        "name": "query",
        "text": "this",
        "start": {
          "row": 35,
          "column": 17
        },
        "end": {
          "row": 35,
          "column": 21
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "type = other.type;",
        "start": {
          "row": 36,
          "column": 3
        },
        "end": {
          "row": 36,
          "column": 21
        }
      },
      {
        "kind": "assignment_expression",
        "name": "query",
        "text": "type = other.type",
        "start": {
          "row": 36,
          "column": 3
        },
        "end": {
          "row": 36,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 36,
          "column": 3
        },
        "end": {
          "row": 36,
          "column": 7
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.type",
        "start": {
          "row": 36,
          "column": 10
        },
        "end": {
          "row": 36,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 36,
          "column": 10
        },
        "end": {
          "row": 36,
          "column": 15
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 36,
          "column": 16
        },
        "end": {
          "row": 36,
          "column": 20
        }
      },
      {
        "kind": "switch_statement",
        "name": "query",
        "text": "switch (type) {\n    case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;\n    case StringType:\n      new (&string_) String(other.string_);\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;\n    case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;\n  }",
        "start": {
          "row": 37,
          "column": 3
        },
        "end": {
          "row": 68,
          "column": 4
        }
      },
      {
        "kind": "condition_clause",
        "name": "query",
        "text": "(type)",
        "start": {
          "row": 37,
          "column": 10
        },
        "end": {
          "row": 37,
          "column": 16
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 37,
          "column": 11
        },
        "end": {
          "row": 37,
          "column": 15
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;\n    case StringType:\n      new (&string_) String(other.string_);\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;\n    case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;\n  }",
        "start": {
          "row": 37,
          "column": 17
        },
        "end": {
          "row": 68,
          "column": 4
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case BlankType:\n      new (&blank_) Blank(other.blank_);\n      break;",
        "start": {
          "row": 38,
          "column": 5
        },
        "end": {
          "row": 40,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "BlankType",
        "start": {
          "row": 38,
          "column": 10
        },
        "end": {
          "row": 38,
          "column": 19
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&blank_) Blank(other.blank_);",
        "start": {
          "row": 39,
          "column": 7
        },
        "end": {
          "row": 39,
          "column": 41
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&blank_) Blank(other.blank_)",
        "start": {
          "row": 39,
          "column": 7
        },
        "end": {
          "row": 39,
          "column": 40
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&blank_)",
        "start": {
          "row": 39,
          "column": 11
        },
        "end": {
          "row": 39,
          "column": 20
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&blank_",
        "start": {
          "row": 39,
          "column": 12
        },
        "end": {
          "row": 39,
          "column": 19
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 39,
          "column": 13
        },
        "end": {
          "row": 39,
          "column": 19
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 39,
          "column": 21
        },
        "end": {
          "row": 39,
          "column": 26
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.blank_)",
        "start": {
          "row": 39,
          "column": 26
        },
        "end": {
          "row": 39,
          "column": 40
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.blank_",
        "start": {
          "row": 39,
          "column": 27
        },
        "end": {
          "row": 39,
          "column": 39
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 39,
          "column": 27
        },
        "end": {
          "row": 39,
          "column": 32
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 39,
          "column": 33
        },
        "end": {
          "row": 39,
          "column": 39
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 40,
          "column": 7
        },
        "end": {
          "row": 40,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case CharacterSetType:\n      new (&character_set_) CharacterSet(other.character_set_);\n      break;",
        "start": {
          "row": 41,
          "column": 5
        },
        "end": {
          "row": 43,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "CharacterSetType",
        "start": {
          "row": 41,
          "column": 10
        },
        "end": {
          "row": 41,
          "column": 26
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&character_set_) CharacterSet(other.character_set_);",
        "start": {
          "row": 42,
          "column": 7
        },
        "end": {
          "row": 42,
          "column": 64
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&character_set_) CharacterSet(other.character_set_)",
        "start": {
          "row": 42,
          "column": 7
        },
        "end": {
          "row": 42,
          "column": 63
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&character_set_)",
        "start": {
          "row": 42,
          "column": 11
        },
        "end": {
          "row": 42,
          "column": 28
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&character_set_",
        "start": {
          "row": 42,
          "column": 12
        },
        "end": {
          "row": 42,
          "column": 27
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "character_set_",
        "start": {
          "row": 42,
          "column": 13
        },
        "end": {
          "row": 42,
          "column": 27
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "CharacterSet",
        "start": {
          "row": 42,
          "column": 29
        },
        "end": {
          "row": 42,
          "column": 41
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.character_set_)",
        "start": {
          "row": 42,
          "column": 41
        },
        "end": {
          "row": 42,
          "column": 63
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.character_set_",
        "start": {
          "row": 42,
          "column": 42
        },
        "end": {
          "row": 42,
          "column": 62
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 42,
          "column": 42
        },
        "end": {
          "row": 42,
          "column": 47
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "character_set_",
        "start": {
          "row": 42,
          "column": 48
        },
        "end": {
          "row": 42,
          "column": 62
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 43,
          "column": 7
        },
        "end": {
          "row": 43,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case StringType:\n      new (&string_) String(other.string_);\n      break;",
        "start": {
          "row": 44,
          "column": 5
        },
        "end": {
          "row": 46,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "StringType",
        "start": {
          "row": 44,
          "column": 10
        },
        "end": {
          "row": 44,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&string_) String(other.string_);",
        "start": {
          "row": 45,
          "column": 7
        },
        "end": {
          "row": 45,
          "column": 44
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&string_) String(other.string_)",
        "start": {
          "row": 45,
          "column": 7
        },
        "end": {
          "row": 45,
          "column": 43
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&string_)",
        "start": {
          "row": 45,
          "column": 11
        },
        "end": {
          "row": 45,
          "column": 21
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&string_",
        "start": {
          "row": 45,
          "column": 12
        },
        "end": {
          "row": 45,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "string_",
        "start": {
          "row": 45,
          "column": 13
        },
        "end": {
          "row": 45,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "String",
        "start": {
          "row": 45,
          "column": 22
        },
        "end": {
          "row": 45,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.string_)",
        "start": {
          "row": 45,
          "column": 28
        },
        "end": {
          "row": 45,
          "column": 43
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.string_",
        "start": {
          "row": 45,
          "column": 29
        },
        "end": {
          "row": 45,
          "column": 42
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 45,
          "column": 29
        },
        "end": {
          "row": 45,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "string_",
        "start": {
          "row": 45,
          "column": 35
        },
        "end": {
          "row": 45,
          "column": 42
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 46,
          "column": 7
        },
        "end": {
          "row": 46,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case PatternType:\n      new (&pattern_) Pattern(other.pattern_);\n      break;",
        "start": {
          "row": 47,
          "column": 5
        },
        "end": {
          "row": 49,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "PatternType",
        "start": {
          "row": 47,
          "column": 10
        },
        "end": {
          "row": 47,
          "column": 21
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&pattern_) Pattern(other.pattern_);",
        "start": {
          "row": 48,
          "column": 7
        },
        "end": {
          "row": 48,
          "column": 47
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&pattern_) Pattern(other.pattern_)",
        "start": {
          "row": 48,
          "column": 7
        },
        "end": {
          "row": 48,
          "column": 46
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&pattern_)",
        "start": {
          "row": 48,
          "column": 11
        },
        "end": {
          "row": 48,
          "column": 22
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&pattern_",
        "start": {
          "row": 48,
          "column": 12
        },
        "end": {
          "row": 48,
          "column": 21
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "pattern_",
        "start": {
          "row": 48,
          "column": 13
        },
        "end": {
          "row": 48,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Pattern",
        "start": {
          "row": 48,
          "column": 23
        },
        "end": {
          "row": 48,
          "column": 30
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.pattern_)",
        "start": {
          "row": 48,
          "column": 30
        },
        "end": {
          "row": 48,
          "column": 46
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.pattern_",
        "start": {
          "row": 48,
          "column": 31
        },
        "end": {
          "row": 48,
          "column": 45
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 48,
          "column": 31
        },
        "end": {
          "row": 48,
          "column": 36
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "pattern_",
        "start": {
          "row": 48,
          "column": 37
        },
        "end": {
          "row": 48,
          "column": 45
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 49,
          "column": 7
        },
        "end": {
          "row": 49,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(other.named_symbol_);\n      break;",
        "start": {
          "row": 50,
          "column": 5
        },
        "end": {
          "row": 52,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "NamedSymbolType",
        "start": {
          "row": 50,
          "column": 10
        },
        "end": {
          "row": 50,
          "column": 25
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&named_symbol_) NamedSymbol(other.named_symbol_);",
        "start": {
          "row": 51,
          "column": 7
        },
        "end": {
          "row": 51,
          "column": 61
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&named_symbol_) NamedSymbol(other.named_symbol_)",
        "start": {
          "row": 51,
          "column": 7
        },
        "end": {
          "row": 51,
          "column": 60
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&named_symbol_)",
        "start": {
          "row": 51,
          "column": 11
        },
        "end": {
          "row": 51,
          "column": 27
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&named_symbol_",
        "start": {
          "row": 51,
          "column": 12
        },
        "end": {
          "row": 51,
          "column": 26
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "named_symbol_",
        "start": {
          "row": 51,
          "column": 13
        },
        "end": {
          "row": 51,
          "column": 26
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "NamedSymbol",
        "start": {
          "row": 51,
          "column": 28
        },
        "end": {
          "row": 51,
          "column": 39
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.named_symbol_)",
        "start": {
          "row": 51,
          "column": 39
        },
        "end": {
          "row": 51,
          "column": 60
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.named_symbol_",
        "start": {
          "row": 51,
          "column": 40
        },
        "end": {
          "row": 51,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 51,
          "column": 40
        },
        "end": {
          "row": 51,
          "column": 45
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "named_symbol_",
        "start": {
          "row": 51,
          "column": 46
        },
        "end": {
          "row": 51,
          "column": 59
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 52,
          "column": 7
        },
        "end": {
          "row": 52,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case SymbolType:\n      new (&symbol_) Symbol(other.symbol_);\n      break;",
        "start": {
          "row": 53,
          "column": 5
        },
        "end": {
          "row": 55,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SymbolType",
        "start": {
          "row": 53,
          "column": 10
        },
        "end": {
          "row": 53,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&symbol_) Symbol(other.symbol_);",
        "start": {
          "row": 54,
          "column": 7
        },
        "end": {
          "row": 54,
          "column": 44
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&symbol_) Symbol(other.symbol_)",
        "start": {
          "row": 54,
          "column": 7
        },
        "end": {
          "row": 54,
          "column": 43
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&symbol_)",
        "start": {
          "row": 54,
          "column": 11
        },
        "end": {
          "row": 54,
          "column": 21
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&symbol_",
        "start": {
          "row": 54,
          "column": 12
        },
        "end": {
          "row": 54,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol_",
        "start": {
          "row": 54,
          "column": 13
        },
        "end": {
          "row": 54,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 54,
          "column": 22
        },
        "end": {
          "row": 54,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.symbol_)",
        "start": {
          "row": 54,
          "column": 28
        },
        "end": {
          "row": 54,
          "column": 43
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.symbol_",
        "start": {
          "row": 54,
          "column": 29
        },
        "end": {
          "row": 54,
          "column": 42
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 54,
          "column": 29
        },
        "end": {
          "row": 54,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "symbol_",
        "start": {
          "row": 54,
          "column": 35
        },
        "end": {
          "row": 54,
          "column": 42
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 55,
          "column": 7
        },
        "end": {
          "row": 55,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case ChoiceType:\n      new (&choice_) Choice(other.choice_);\n      break;",
        "start": {
          "row": 56,
          "column": 5
        },
        "end": {
          "row": 58,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "ChoiceType",
        "start": {
          "row": 56,
          "column": 10
        },
        "end": {
          "row": 56,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&choice_) Choice(other.choice_);",
        "start": {
          "row": 57,
          "column": 7
        },
        "end": {
          "row": 57,
          "column": 44
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&choice_) Choice(other.choice_)",
        "start": {
          "row": 57,
          "column": 7
        },
        "end": {
          "row": 57,
          "column": 43
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&choice_)",
        "start": {
          "row": 57,
          "column": 11
        },
        "end": {
          "row": 57,
          "column": 21
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&choice_",
        "start": {
          "row": 57,
          "column": 12
        },
        "end": {
          "row": 57,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "choice_",
        "start": {
          "row": 57,
          "column": 13
        },
        "end": {
          "row": 57,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 57,
          "column": 22
        },
        "end": {
          "row": 57,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.choice_)",
        "start": {
          "row": 57,
          "column": 28
        },
        "end": {
          "row": 57,
          "column": 43
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.choice_",
        "start": {
          "row": 57,
          "column": 29
        },
        "end": {
          "row": 57,
          "column": 42
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 57,
          "column": 29
        },
        "end": {
          "row": 57,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "choice_",
        "start": {
          "row": 57,
          "column": 35
        },
        "end": {
          "row": 57,
          "column": 42
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 58,
          "column": 7
        },
        "end": {
          "row": 58,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case MetadataType:\n      new (&metadata_) Metadata(other.metadata_);\n      break;",
        "start": {
          "row": 59,
          "column": 5
        },
        "end": {
          "row": 61,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "MetadataType",
        "start": {
          "row": 59,
          "column": 10
        },
        "end": {
          "row": 59,
          "column": 22
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&metadata_) Metadata(other.metadata_);",
        "start": {
          "row": 60,
          "column": 7
        },
        "end": {
          "row": 60,
          "column": 50
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&metadata_) Metadata(other.metadata_)",
        "start": {
          "row": 60,
          "column": 7
        },
        "end": {
          "row": 60,
          "column": 49
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&metadata_)",
        "start": {
          "row": 60,
          "column": 11
        },
        "end": {
          "row": 60,
          "column": 23
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&metadata_",
        "start": {
          "row": 60,
          "column": 12
        },
        "end": {
          "row": 60,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata_",
        "start": {
          "row": 60,
          "column": 13
        },
        "end": {
          "row": 60,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Metadata",
        "start": {
          "row": 60,
          "column": 24
        },
        "end": {
          "row": 60,
          "column": 32
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.metadata_)",
        "start": {
          "row": 60,
          "column": 32
        },
        "end": {
          "row": 60,
          "column": 49
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.metadata_",
        "start": {
          "row": 60,
          "column": 33
        },
        "end": {
          "row": 60,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 60,
          "column": 33
        },
        "end": {
          "row": 60,
          "column": 38
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "metadata_",
        "start": {
          "row": 60,
          "column": 39
        },
        "end": {
          "row": 60,
          "column": 48
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 61,
          "column": 7
        },
        "end": {
          "row": 61,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case RepeatType:\n      new (&repeat_) Repeat(other.repeat_);\n      break;",
        "start": {
          "row": 62,
          "column": 5
        },
        "end": {
          "row": 64,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "RepeatType",
        "start": {
          "row": 62,
          "column": 10
        },
        "end": {
          "row": 62,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&repeat_) Repeat(other.repeat_);",
        "start": {
          "row": 63,
          "column": 7
        },
        "end": {
          "row": 63,
          "column": 44
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&repeat_) Repeat(other.repeat_)",
        "start": {
          "row": 63,
          "column": 7
        },
        "end": {
          "row": 63,
          "column": 43
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&repeat_)",
        "start": {
          "row": 63,
          "column": 11
        },
        "end": {
          "row": 63,
          "column": 21
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&repeat_",
        "start": {
          "row": 63,
          "column": 12
        },
        "end": {
          "row": 63,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "repeat_",
        "start": {
          "row": 63,
          "column": 13
        },
        "end": {
          "row": 63,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 63,
          "column": 22
        },
        "end": {
          "row": 63,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.repeat_)",
        "start": {
          "row": 63,
          "column": 28
        },
        "end": {
          "row": 63,
          "column": 43
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.repeat_",
        "start": {
          "row": 63,
          "column": 29
        },
        "end": {
          "row": 63,
          "column": 42
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 63,
          "column": 29
        },
        "end": {
          "row": 63,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "repeat_",
        "start": {
          "row": 63,
          "column": 35
        },
        "end": {
          "row": 63,
          "column": 42
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 64,
          "column": 7
        },
        "end": {
          "row": 64,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case SeqType:\n      new (&seq_) Seq(other.seq_);\n      break;",
        "start": {
          "row": 65,
          "column": 5
        },
        "end": {
          "row": 67,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SeqType",
        "start": {
          "row": 65,
          "column": 10
        },
        "end": {
          "row": 65,
          "column": 17
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&seq_) Seq(other.seq_);",
        "start": {
          "row": 66,
          "column": 7
        },
        "end": {
          "row": 66,
          "column": 35
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&seq_) Seq(other.seq_)",
        "start": {
          "row": 66,
          "column": 7
        },
        "end": {
          "row": 66,
          "column": 34
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&seq_)",
        "start": {
          "row": 66,
          "column": 11
        },
        "end": {
          "row": 66,
          "column": 18
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&seq_",
        "start": {
          "row": 66,
          "column": 12
        },
        "end": {
          "row": 66,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "seq_",
        "start": {
          "row": 66,
          "column": 13
        },
        "end": {
          "row": 66,
          "column": 17
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 66,
          "column": 19
        },
        "end": {
          "row": 66,
          "column": 22
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.seq_)",
        "start": {
          "row": 66,
          "column": 22
        },
        "end": {
          "row": 66,
          "column": 34
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.seq_",
        "start": {
          "row": 66,
          "column": 23
        },
        "end": {
          "row": 66,
          "column": 33
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 66,
          "column": 23
        },
        "end": {
          "row": 66,
          "column": 28
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "seq_",
        "start": {
          "row": 66,
          "column": 29
        },
        "end": {
          "row": 66,
          "column": 33
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 67,
          "column": 7
        },
        "end": {
          "row": 67,
          "column": 13
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return *this;",
        "start": {
          "row": 69,
          "column": 3
        },
        "end": {
          "row": 69,
          "column": 16
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "*this",
        "start": {
          "row": 69,
          "column": 10
        },
        "end": {
          "row": 69,
          "column": 15
        }
      },
      {
        "kind": "this",
        "name": "query",
        "text": "this",
        "start": {
          "row": 69,
          "column": 11
        },
        "end": {
          "row": 69,
          "column": 15
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "Rule &Rule::operator=(Rule &&other) noexcept {\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;\n    case StringType:\n      new (&string_) String(move(other.string_));\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;\n    case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;\n  }\n  other.type = BlankType;\n  other.blank_ = Blank{};\n  return *this;\n}",
        "start": {
          "row": 72,
          "column": 1
        },
        "end": {
          "row": 110,
          "column": 2
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 72,
          "column": 1
        },
        "end": {
          "row": 72,
          "column": 5
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&Rule::operator=(Rule &&other) noexcept",
        "start": {
          "row": 72,
          "column": 6
        },
        "end": {
          "row": 72,
          "column": 45
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::operator=(Rule &&other) noexcept",
        "start": {
          "row": 72,
          "column": 7
        },
        "end": {
          "row": 72,
          "column": 45
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::operator=",
        "start": {
          "row": 72,
          "column": 7
        },
        "end": {
          "row": 72,
          "column": 22
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 72,
          "column": 7
        },
        "end": {
          "row": 72,
          "column": 11
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator=",
        "start": {
          "row": 72,
          "column": 13
        },
        "end": {
          "row": 72,
          "column": 22
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Rule &&other)",
        "start": {
          "row": 72,
          "column": 22
        },
        "end": {
          "row": 72,
          "column": 36
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Rule &&other",
        "start": {
          "row": 72,
          "column": 23
        },
        "end": {
          "row": 72,
          "column": 35
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 72,
          "column": 23
        },
        "end": {
          "row": 72,
          "column": 27
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&&other",
        "start": {
          "row": 72,
          "column": 28
        },
        "end": {
          "row": 72,
          "column": 35
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 72,
          "column": 30
        },
        "end": {
          "row": 72,
          "column": 35
        }
      },
      {
        "kind": "noexcept",
        "name": "query",
        "text": "noexcept",
        "start": {
          "row": 72,
          "column": 37
        },
        "end": {
          "row": 72,
          "column": 45
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  destroy_value(this);\n  type = other.type;\n  switch (type) {\n    case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;\n    case StringType:\n      new (&string_) String(move(other.string_));\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;\n    case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;\n  }\n  other.type = BlankType;\n  other.blank_ = Blank{};\n  return *this;\n}",
        "start": {
          "row": 72,
          "column": 46
        },
        "end": {
          "row": 110,
          "column": 2
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "destroy_value(this);",
        "start": {
          "row": 73,
          "column": 3
        },
        "end": {
          "row": 73,
          "column": 23
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "destroy_value(this)",
        "start": {
          "row": 73,
          "column": 3
        },
        "end": {
          "row": 73,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "destroy_value",
        "start": {
          "row": 73,
          "column": 3
        },
        "end": {
          "row": 73,
          "column": 16
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(this)",
        "start": {
          "row": 73,
          "column": 16
        },
        "end": {
          "row": 73,
          "column": 22
        }
      },
      {
        "kind": "this",
        "name": "query",
        "text": "this",
        "start": {
          "row": 73,
          "column": 17
        },
        "end": {
          "row": 73,
          "column": 21
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "type = other.type;",
        "start": {
          "row": 74,
          "column": 3
        },
        "end": {
          "row": 74,
          "column": 21
        }
      },
      {
        "kind": "assignment_expression",
        "name": "query",
        "text": "type = other.type",
        "start": {
          "row": 74,
          "column": 3
        },
        "end": {
          "row": 74,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 74,
          "column": 3
        },
        "end": {
          "row": 74,
          "column": 7
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.type",
        "start": {
          "row": 74,
          "column": 10
        },
        "end": {
          "row": 74,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 74,
          "column": 10
        },
        "end": {
          "row": 74,
          "column": 15
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 74,
          "column": 16
        },
        "end": {
          "row": 74,
          "column": 20
        }
      },
      {
        "kind": "switch_statement",
        "name": "query",
        "text": "switch (type) {\n    case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;\n    case StringType:\n      new (&string_) String(move(other.string_));\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;\n    case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;\n  }",
        "start": {
          "row": 75,
          "column": 3
        },
        "end": {
          "row": 106,
          "column": 4
        }
      },
      {
        "kind": "condition_clause",
        "name": "query",
        "text": "(type)",
        "start": {
          "row": 75,
          "column": 10
        },
        "end": {
          "row": 75,
          "column": 16
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 75,
          "column": 11
        },
        "end": {
          "row": 75,
          "column": 15
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;\n    case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;\n    case StringType:\n      new (&string_) String(move(other.string_));\n      break;\n    case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;\n    case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;\n    case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;\n    case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;\n    case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;\n    case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;\n    case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;\n  }",
        "start": {
          "row": 75,
          "column": 17
        },
        "end": {
          "row": 106,
          "column": 4
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case BlankType:\n      new (&blank_) Blank(move(other.blank_));\n      break;",
        "start": {
          "row": 76,
          "column": 5
        },
        "end": {
          "row": 78,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "BlankType",
        "start": {
          "row": 76,
          "column": 10
        },
        "end": {
          "row": 76,
          "column": 19
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&blank_) Blank(move(other.blank_));",
        "start": {
          "row": 77,
          "column": 7
        },
        "end": {
          "row": 77,
          "column": 47
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&blank_) Blank(move(other.blank_))",
        "start": {
          "row": 77,
          "column": 7
        },
        "end": {
          "row": 77,
          "column": 46
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&blank_)",
        "start": {
          "row": 77,
          "column": 11
        },
        "end": {
          "row": 77,
          "column": 20
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&blank_",
        "start": {
          "row": 77,
          "column": 12
        },
        "end": {
          "row": 77,
          "column": 19
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 77,
          "column": 13
        },
        "end": {
          "row": 77,
          "column": 19
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 77,
          "column": 21
        },
        "end": {
          "row": 77,
          "column": 26
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.blank_))",
        "start": {
          "row": 77,
          "column": 26
        },
        "end": {
          "row": 77,
          "column": 46
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.blank_)",
        "start": {
          "row": 77,
          "column": 27
        },
        "end": {
          "row": 77,
          "column": 45
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 77,
          "column": 27
        },
        "end": {
          "row": 77,
          "column": 31
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.blank_)",
        "start": {
          "row": 77,
          "column": 31
        },
        "end": {
          "row": 77,
          "column": 45
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.blank_",
        "start": {
          "row": 77,
          "column": 32
        },
        "end": {
          "row": 77,
          "column": 44
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 77,
          "column": 32
        },
        "end": {
          "row": 77,
          "column": 37
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 77,
          "column": 38
        },
        "end": {
          "row": 77,
          "column": 44
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 78,
          "column": 7
        },
        "end": {
          "row": 78,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case CharacterSetType:\n      new (&character_set_) CharacterSet(move(other.character_set_));\n      break;",
        "start": {
          "row": 79,
          "column": 5
        },
        "end": {
          "row": 81,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "CharacterSetType",
        "start": {
          "row": 79,
          "column": 10
        },
        "end": {
          "row": 79,
          "column": 26
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&character_set_) CharacterSet(move(other.character_set_));",
        "start": {
          "row": 80,
          "column": 7
        },
        "end": {
          "row": 80,
          "column": 70
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&character_set_) CharacterSet(move(other.character_set_))",
        "start": {
          "row": 80,
          "column": 7
        },
        "end": {
          "row": 80,
          "column": 69
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&character_set_)",
        "start": {
          "row": 80,
          "column": 11
        },
        "end": {
          "row": 80,
          "column": 28
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&character_set_",
        "start": {
          "row": 80,
          "column": 12
        },
        "end": {
          "row": 80,
          "column": 27
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "character_set_",
        "start": {
          "row": 80,
          "column": 13
        },
        "end": {
          "row": 80,
          "column": 27
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "CharacterSet",
        "start": {
          "row": 80,
          "column": 29
        },
        "end": {
          "row": 80,
          "column": 41
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.character_set_))",
        "start": {
          "row": 80,
          "column": 41
        },
        "end": {
          "row": 80,
          "column": 69
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.character_set_)",
        "start": {
          "row": 80,
          "column": 42
        },
        "end": {
          "row": 80,
          "column": 68
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 80,
          "column": 42
        },
        "end": {
          "row": 80,
          "column": 46
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.character_set_)",
        "start": {
          "row": 80,
          "column": 46
        },
        "end": {
          "row": 80,
          "column": 68
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.character_set_",
        "start": {
          "row": 80,
          "column": 47
        },
        "end": {
          "row": 80,
          "column": 67
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 80,
          "column": 47
        },
        "end": {
          "row": 80,
          "column": 52
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "character_set_",
        "start": {
          "row": 80,
          "column": 53
        },
        "end": {
          "row": 80,
          "column": 67
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 81,
          "column": 7
        },
        "end": {
          "row": 81,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case StringType:\n      new (&string_) String(move(other.string_));\n      break;",
        "start": {
          "row": 82,
          "column": 5
        },
        "end": {
          "row": 84,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "StringType",
        "start": {
          "row": 82,
          "column": 10
        },
        "end": {
          "row": 82,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&string_) String(move(other.string_));",
        "start": {
          "row": 83,
          "column": 7
        },
        "end": {
          "row": 83,
          "column": 50
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&string_) String(move(other.string_))",
        "start": {
          "row": 83,
          "column": 7
        },
        "end": {
          "row": 83,
          "column": 49
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&string_)",
        "start": {
          "row": 83,
          "column": 11
        },
        "end": {
          "row": 83,
          "column": 21
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&string_",
        "start": {
          "row": 83,
          "column": 12
        },
        "end": {
          "row": 83,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "string_",
        "start": {
          "row": 83,
          "column": 13
        },
        "end": {
          "row": 83,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "String",
        "start": {
          "row": 83,
          "column": 22
        },
        "end": {
          "row": 83,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.string_))",
        "start": {
          "row": 83,
          "column": 28
        },
        "end": {
          "row": 83,
          "column": 49
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.string_)",
        "start": {
          "row": 83,
          "column": 29
        },
        "end": {
          "row": 83,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 83,
          "column": 29
        },
        "end": {
          "row": 83,
          "column": 33
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.string_)",
        "start": {
          "row": 83,
          "column": 33
        },
        "end": {
          "row": 83,
          "column": 48
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.string_",
        "start": {
          "row": 83,
          "column": 34
        },
        "end": {
          "row": 83,
          "column": 47
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 83,
          "column": 34
        },
        "end": {
          "row": 83,
          "column": 39
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "string_",
        "start": {
          "row": 83,
          "column": 40
        },
        "end": {
          "row": 83,
          "column": 47
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 84,
          "column": 7
        },
        "end": {
          "row": 84,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case PatternType:\n      new (&pattern_) Pattern(move(other.pattern_));\n      break;",
        "start": {
          "row": 85,
          "column": 5
        },
        "end": {
          "row": 87,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "PatternType",
        "start": {
          "row": 85,
          "column": 10
        },
        "end": {
          "row": 85,
          "column": 21
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&pattern_) Pattern(move(other.pattern_));",
        "start": {
          "row": 86,
          "column": 7
        },
        "end": {
          "row": 86,
          "column": 53
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&pattern_) Pattern(move(other.pattern_))",
        "start": {
          "row": 86,
          "column": 7
        },
        "end": {
          "row": 86,
          "column": 52
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&pattern_)",
        "start": {
          "row": 86,
          "column": 11
        },
        "end": {
          "row": 86,
          "column": 22
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&pattern_",
        "start": {
          "row": 86,
          "column": 12
        },
        "end": {
          "row": 86,
          "column": 21
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "pattern_",
        "start": {
          "row": 86,
          "column": 13
        },
        "end": {
          "row": 86,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Pattern",
        "start": {
          "row": 86,
          "column": 23
        },
        "end": {
          "row": 86,
          "column": 30
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.pattern_))",
        "start": {
          "row": 86,
          "column": 30
        },
        "end": {
          "row": 86,
          "column": 52
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.pattern_)",
        "start": {
          "row": 86,
          "column": 31
        },
        "end": {
          "row": 86,
          "column": 51
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 86,
          "column": 31
        },
        "end": {
          "row": 86,
          "column": 35
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.pattern_)",
        "start": {
          "row": 86,
          "column": 35
        },
        "end": {
          "row": 86,
          "column": 51
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.pattern_",
        "start": {
          "row": 86,
          "column": 36
        },
        "end": {
          "row": 86,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 86,
          "column": 36
        },
        "end": {
          "row": 86,
          "column": 41
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "pattern_",
        "start": {
          "row": 86,
          "column": 42
        },
        "end": {
          "row": 86,
          "column": 50
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 87,
          "column": 7
        },
        "end": {
          "row": 87,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case NamedSymbolType:\n      new (&named_symbol_) NamedSymbol(move(other.named_symbol_));\n      break;",
        "start": {
          "row": 88,
          "column": 5
        },
        "end": {
          "row": 90,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "NamedSymbolType",
        "start": {
          "row": 88,
          "column": 10
        },
        "end": {
          "row": 88,
          "column": 25
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&named_symbol_) NamedSymbol(move(other.named_symbol_));",
        "start": {
          "row": 89,
          "column": 7
        },
        "end": {
          "row": 89,
          "column": 67
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&named_symbol_) NamedSymbol(move(other.named_symbol_))",
        "start": {
          "row": 89,
          "column": 7
        },
        "end": {
          "row": 89,
          "column": 66
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&named_symbol_)",
        "start": {
          "row": 89,
          "column": 11
        },
        "end": {
          "row": 89,
          "column": 27
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&named_symbol_",
        "start": {
          "row": 89,
          "column": 12
        },
        "end": {
          "row": 89,
          "column": 26
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "named_symbol_",
        "start": {
          "row": 89,
          "column": 13
        },
        "end": {
          "row": 89,
          "column": 26
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "NamedSymbol",
        "start": {
          "row": 89,
          "column": 28
        },
        "end": {
          "row": 89,
          "column": 39
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.named_symbol_))",
        "start": {
          "row": 89,
          "column": 39
        },
        "end": {
          "row": 89,
          "column": 66
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.named_symbol_)",
        "start": {
          "row": 89,
          "column": 40
        },
        "end": {
          "row": 89,
          "column": 65
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 89,
          "column": 40
        },
        "end": {
          "row": 89,
          "column": 44
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.named_symbol_)",
        "start": {
          "row": 89,
          "column": 44
        },
        "end": {
          "row": 89,
          "column": 65
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.named_symbol_",
        "start": {
          "row": 89,
          "column": 45
        },
        "end": {
          "row": 89,
          "column": 64
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 89,
          "column": 45
        },
        "end": {
          "row": 89,
          "column": 50
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "named_symbol_",
        "start": {
          "row": 89,
          "column": 51
        },
        "end": {
          "row": 89,
          "column": 64
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 90,
          "column": 7
        },
        "end": {
          "row": 90,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case SymbolType:\n      new (&symbol_) Symbol(move(other.symbol_));\n      break;",
        "start": {
          "row": 91,
          "column": 5
        },
        "end": {
          "row": 93,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SymbolType",
        "start": {
          "row": 91,
          "column": 10
        },
        "end": {
          "row": 91,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&symbol_) Symbol(move(other.symbol_));",
        "start": {
          "row": 92,
          "column": 7
        },
        "end": {
          "row": 92,
          "column": 50
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&symbol_) Symbol(move(other.symbol_))",
        "start": {
          "row": 92,
          "column": 7
        },
        "end": {
          "row": 92,
          "column": 49
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&symbol_)",
        "start": {
          "row": 92,
          "column": 11
        },
        "end": {
          "row": 92,
          "column": 21
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&symbol_",
        "start": {
          "row": 92,
          "column": 12
        },
        "end": {
          "row": 92,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol_",
        "start": {
          "row": 92,
          "column": 13
        },
        "end": {
          "row": 92,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 92,
          "column": 22
        },
        "end": {
          "row": 92,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.symbol_))",
        "start": {
          "row": 92,
          "column": 28
        },
        "end": {
          "row": 92,
          "column": 49
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.symbol_)",
        "start": {
          "row": 92,
          "column": 29
        },
        "end": {
          "row": 92,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 92,
          "column": 29
        },
        "end": {
          "row": 92,
          "column": 33
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.symbol_)",
        "start": {
          "row": 92,
          "column": 33
        },
        "end": {
          "row": 92,
          "column": 48
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.symbol_",
        "start": {
          "row": 92,
          "column": 34
        },
        "end": {
          "row": 92,
          "column": 47
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 92,
          "column": 34
        },
        "end": {
          "row": 92,
          "column": 39
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "symbol_",
        "start": {
          "row": 92,
          "column": 40
        },
        "end": {
          "row": 92,
          "column": 47
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 93,
          "column": 7
        },
        "end": {
          "row": 93,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case ChoiceType:\n      new (&choice_) Choice(move(other.choice_));\n      break;",
        "start": {
          "row": 94,
          "column": 5
        },
        "end": {
          "row": 96,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "ChoiceType",
        "start": {
          "row": 94,
          "column": 10
        },
        "end": {
          "row": 94,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&choice_) Choice(move(other.choice_));",
        "start": {
          "row": 95,
          "column": 7
        },
        "end": {
          "row": 95,
          "column": 50
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&choice_) Choice(move(other.choice_))",
        "start": {
          "row": 95,
          "column": 7
        },
        "end": {
          "row": 95,
          "column": 49
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&choice_)",
        "start": {
          "row": 95,
          "column": 11
        },
        "end": {
          "row": 95,
          "column": 21
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&choice_",
        "start": {
          "row": 95,
          "column": 12
        },
        "end": {
          "row": 95,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "choice_",
        "start": {
          "row": 95,
          "column": 13
        },
        "end": {
          "row": 95,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 95,
          "column": 22
        },
        "end": {
          "row": 95,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.choice_))",
        "start": {
          "row": 95,
          "column": 28
        },
        "end": {
          "row": 95,
          "column": 49
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.choice_)",
        "start": {
          "row": 95,
          "column": 29
        },
        "end": {
          "row": 95,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 95,
          "column": 29
        },
        "end": {
          "row": 95,
          "column": 33
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.choice_)",
        "start": {
          "row": 95,
          "column": 33
        },
        "end": {
          "row": 95,
          "column": 48
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.choice_",
        "start": {
          "row": 95,
          "column": 34
        },
        "end": {
          "row": 95,
          "column": 47
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 95,
          "column": 34
        },
        "end": {
          "row": 95,
          "column": 39
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "choice_",
        "start": {
          "row": 95,
          "column": 40
        },
        "end": {
          "row": 95,
          "column": 47
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 96,
          "column": 7
        },
        "end": {
          "row": 96,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case MetadataType:\n      new (&metadata_) Metadata(move(other.metadata_));\n      break;",
        "start": {
          "row": 97,
          "column": 5
        },
        "end": {
          "row": 99,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "MetadataType",
        "start": {
          "row": 97,
          "column": 10
        },
        "end": {
          "row": 97,
          "column": 22
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&metadata_) Metadata(move(other.metadata_));",
        "start": {
          "row": 98,
          "column": 7
        },
        "end": {
          "row": 98,
          "column": 56
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&metadata_) Metadata(move(other.metadata_))",
        "start": {
          "row": 98,
          "column": 7
        },
        "end": {
          "row": 98,
          "column": 55
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&metadata_)",
        "start": {
          "row": 98,
          "column": 11
        },
        "end": {
          "row": 98,
          "column": 23
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&metadata_",
        "start": {
          "row": 98,
          "column": 12
        },
        "end": {
          "row": 98,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata_",
        "start": {
          "row": 98,
          "column": 13
        },
        "end": {
          "row": 98,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Metadata",
        "start": {
          "row": 98,
          "column": 24
        },
        "end": {
          "row": 98,
          "column": 32
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.metadata_))",
        "start": {
          "row": 98,
          "column": 32
        },
        "end": {
          "row": 98,
          "column": 55
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.metadata_)",
        "start": {
          "row": 98,
          "column": 33
        },
        "end": {
          "row": 98,
          "column": 54
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 98,
          "column": 33
        },
        "end": {
          "row": 98,
          "column": 37
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.metadata_)",
        "start": {
          "row": 98,
          "column": 37
        },
        "end": {
          "row": 98,
          "column": 54
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.metadata_",
        "start": {
          "row": 98,
          "column": 38
        },
        "end": {
          "row": 98,
          "column": 53
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 98,
          "column": 38
        },
        "end": {
          "row": 98,
          "column": 43
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "metadata_",
        "start": {
          "row": 98,
          "column": 44
        },
        "end": {
          "row": 98,
          "column": 53
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 99,
          "column": 7
        },
        "end": {
          "row": 99,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case RepeatType:\n      new (&repeat_) Repeat(move(other.repeat_));\n      break;",
        "start": {
          "row": 100,
          "column": 5
        },
        "end": {
          "row": 102,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "RepeatType",
        "start": {
          "row": 100,
          "column": 10
        },
        "end": {
          "row": 100,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&repeat_) Repeat(move(other.repeat_));",
        "start": {
          "row": 101,
          "column": 7
        },
        "end": {
          "row": 101,
          "column": 50
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&repeat_) Repeat(move(other.repeat_))",
        "start": {
          "row": 101,
          "column": 7
        },
        "end": {
          "row": 101,
          "column": 49
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&repeat_)",
        "start": {
          "row": 101,
          "column": 11
        },
        "end": {
          "row": 101,
          "column": 21
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&repeat_",
        "start": {
          "row": 101,
          "column": 12
        },
        "end": {
          "row": 101,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "repeat_",
        "start": {
          "row": 101,
          "column": 13
        },
        "end": {
          "row": 101,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 101,
          "column": 22
        },
        "end": {
          "row": 101,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.repeat_))",
        "start": {
          "row": 101,
          "column": 28
        },
        "end": {
          "row": 101,
          "column": 49
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.repeat_)",
        "start": {
          "row": 101,
          "column": 29
        },
        "end": {
          "row": 101,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 101,
          "column": 29
        },
        "end": {
          "row": 101,
          "column": 33
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.repeat_)",
        "start": {
          "row": 101,
          "column": 33
        },
        "end": {
          "row": 101,
          "column": 48
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.repeat_",
        "start": {
          "row": 101,
          "column": 34
        },
        "end": {
          "row": 101,
          "column": 47
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 101,
          "column": 34
        },
        "end": {
          "row": 101,
          "column": 39
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "repeat_",
        "start": {
          "row": 101,
          "column": 40
        },
        "end": {
          "row": 101,
          "column": 47
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 102,
          "column": 7
        },
        "end": {
          "row": 102,
          "column": 13
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case SeqType:\n      new (&seq_) Seq(move(other.seq_));\n      break;",
        "start": {
          "row": 103,
          "column": 5
        },
        "end": {
          "row": 105,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SeqType",
        "start": {
          "row": 103,
          "column": 10
        },
        "end": {
          "row": 103,
          "column": 17
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new (&seq_) Seq(move(other.seq_));",
        "start": {
          "row": 104,
          "column": 7
        },
        "end": {
          "row": 104,
          "column": 41
        }
      },
      {
        "kind": "new_expression",
        "name": "query",
        "text": "new (&seq_) Seq(move(other.seq_))",
        "start": {
          "row": 104,
          "column": 7
        },
        "end": {
          "row": 104,
          "column": 40
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&seq_)",
        "start": {
          "row": 104,
          "column": 11
        },
        "end": {
          "row": 104,
          "column": 18
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&seq_",
        "start": {
          "row": 104,
          "column": 12
        },
        "end": {
          "row": 104,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "seq_",
        "start": {
          "row": 104,
          "column": 13
        },
        "end": {
          "row": 104,
          "column": 17
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 104,
          "column": 19
        },
        "end": {
          "row": 104,
          "column": 22
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(move(other.seq_))",
        "start": {
          "row": 104,
          "column": 22
        },
        "end": {
          "row": 104,
          "column": 40
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "move(other.seq_)",
        "start": {
          "row": 104,
          "column": 23
        },
        "end": {
          "row": 104,
          "column": 39
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "move",
        "start": {
          "row": 104,
          "column": 23
        },
        "end": {
          "row": 104,
          "column": 27
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(other.seq_)",
        "start": {
          "row": 104,
          "column": 27
        },
        "end": {
          "row": 104,
          "column": 39
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.seq_",
        "start": {
          "row": 104,
          "column": 28
        },
        "end": {
          "row": 104,
          "column": 38
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 104,
          "column": 28
        },
        "end": {
          "row": 104,
          "column": 33
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "seq_",
        "start": {
          "row": 104,
          "column": 34
        },
        "end": {
          "row": 104,
          "column": 38
        }
      },
      {
        "kind": "break_statement",
        "name": "query",
        "text": "break;",
        "start": {
          "row": 105,
          "column": 7
        },
        "end": {
          "row": 105,
          "column": 13
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "other.type = BlankType;",
        "start": {
          "row": 107,
          "column": 3
        },
        "end": {
          "row": 107,
          "column": 26
        }
      },
      {
        "kind": "assignment_expression",
        "name": "query",
        "text": "other.type = BlankType",
        "start": {
          "row": 107,
          "column": 3
        },
        "end": {
          "row": 107,
          "column": 25
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.type",
        "start": {
          "row": 107,
          "column": 3
        },
        "end": {
          "row": 107,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 107,
          "column": 3
        },
        "end": {
          "row": 107,
          "column": 8
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 107,
          "column": 9
        },
        "end": {
          "row": 107,
          "column": 13
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "BlankType",
        "start": {
          "row": 107,
          "column": 16
        },
        "end": {
          "row": 107,
          "column": 25
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "other.blank_ = Blank{};",
        "start": {
          "row": 108,
          "column": 3
        },
        "end": {
          "row": 108,
          "column": 26
        }
      },
      {
        "kind": "assignment_expression",
        "name": "query",
        "text": "other.blank_ = Blank{}",
        "start": {
          "row": 108,
          "column": 3
        },
        "end": {
          "row": 108,
          "column": 25
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.blank_",
        "start": {
          "row": 108,
          "column": 3
        },
        "end": {
          "row": 108,
          "column": 15
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 108,
          "column": 3
        },
        "end": {
          "row": 108,
          "column": 8
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 108,
          "column": 9
        },
        "end": {
          "row": 108,
          "column": 15
        }
      },
      {
        "kind": "compound_literal_expression",
        "name": "query",
        "text": "Blank{}",
        "start": {
          "row": 108,
          "column": 18
        },
        "end": {
          "row": 108,
          "column": 25
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 108,
          "column": 18
        },
        "end": {
          "row": 108,
          "column": 23
        }
      },
      {
        "kind": "initializer_list",
        "name": "query",
        "text": "{}",
        "start": {
          "row": 108,
          "column": 23
        },
        "end": {
          "row": 108,
          "column": 25
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return *this;",
        "start": {
          "row": 109,
          "column": 3
        },
        "end": {
          "row": 109,
          "column": 16
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "*this",
        "start": {
          "row": 109,
          "column": 10
        },
        "end": {
          "row": 109,
          "column": 15
        }
      },
      {
        "kind": "this",
        "name": "query",
        "text": "this",
        "start": {
          "row": 109,
          "column": 11
        },
        "end": {
          "row": 109,
          "column": 15
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "Rule::~Rule() noexcept {\n  destroy_value(this);\n}",
        "start": {
          "row": 112,
          "column": 1
        },
        "end": {
          "row": 114,
          "column": 2
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::~Rule() noexcept",
        "start": {
          "row": 112,
          "column": 1
        },
        "end": {
          "row": 112,
          "column": 23
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::~Rule",
        "start": {
          "row": 112,
          "column": 1
        },
        "end": {
          "row": 112,
          "column": 12
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 112,
          "column": 1
        },
        "end": {
          "row": 112,
          "column": 5
        }
      },
      {
        "kind": "destructor_name",
        "name": "query",
        "text": "~Rule",
        "start": {
          "row": 112,
          "column": 7
        },
        "end": {
          "row": 112,
          "column": 12
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 112,
          "column": 8
        },
        "end": {
          "row": 112,
          "column": 12
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 112,
          "column": 12
        },
        "end": {
          "row": 112,
          "column": 14
        }
      },
      {
        "kind": "noexcept",
        "name": "query",
        "text": "noexcept",
        "start": {
          "row": 112,
          "column": 15
        },
        "end": {
          "row": 112,
          "column": 23
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  destroy_value(this);\n}",
        "start": {
          "row": 112,
          "column": 24
        },
        "end": {
          "row": 114,
          "column": 2
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "destroy_value(this);",
        "start": {
          "row": 113,
          "column": 3
        },
        "end": {
          "row": 113,
          "column": 23
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "destroy_value(this)",
        "start": {
          "row": 113,
          "column": 3
        },
        "end": {
          "row": 113,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "destroy_value",
        "start": {
          "row": 113,
          "column": 3
        },
        "end": {
          "row": 113,
          "column": 16
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(this)",
        "start": {
          "row": 113,
          "column": 16
        },
        "end": {
          "row": 113,
          "column": 22
        }
      },
      {
        "kind": "this",
        "name": "query",
        "text": "this",
        "start": {
          "row": 113,
          "column": 17
        },
        "end": {
          "row": 113,
          "column": 21
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "bool Rule::operator==(const Rule &other) const {\n  if (type != other.type) return false;\n  switch (type) {\n    case Rule::CharacterSetType: return character_set_ == other.character_set_;\n    case Rule::StringType: return string_ == other.string_;\n    case Rule::PatternType: return pattern_ == other.pattern_;\n    case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;\n    case Rule::SymbolType: return symbol_ == other.symbol_;\n    case Rule::ChoiceType: return choice_ == other.choice_;\n    case Rule::MetadataType: return metadata_ == other.metadata_;\n    case Rule::RepeatType: return repeat_ == other.repeat_;\n    case Rule::SeqType: return seq_ == other.seq_;\n    default: return blank_ == other.blank_;\n  }\n}",
        "start": {
          "row": 116,
          "column": 1
        },
        "end": {
          "row": 130,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "bool",
        "start": {
          "row": 116,
          "column": 1
        },
        "end": {
          "row": 116,
          "column": 5
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::operator==(const Rule &other) const",
        "start": {
          "row": 116,
          "column": 6
        },
        "end": {
          "row": 116,
          "column": 47
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::operator==",
        "start": {
          "row": 116,
          "column": 6
        },
        "end": {
          "row": 116,
          "column": 22
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 116,
          "column": 6
        },
        "end": {
          "row": 116,
          "column": 10
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator==",
        "start": {
          "row": 116,
          "column": 12
        },
        "end": {
          "row": 116,
          "column": 22
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Rule &other)",
        "start": {
          "row": 116,
          "column": 22
        },
        "end": {
          "row": 116,
          "column": 41
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Rule &other",
        "start": {
          "row": 116,
          "column": 23
        },
        "end": {
          "row": 116,
          "column": 40
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 116,
          "column": 23
        },
        "end": {
          "row": 116,
          "column": 28
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 116,
          "column": 29
        },
        "end": {
          "row": 116,
          "column": 33
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&other",
        "start": {
          "row": 116,
          "column": 34
        },
        "end": {
          "row": 116,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 116,
          "column": 35
        },
        "end": {
          "row": 116,
          "column": 40
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 116,
          "column": 42
        },
        "end": {
          "row": 116,
          "column": 47
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  if (type != other.type) return false;\n  switch (type) {\n    case Rule::CharacterSetType: return character_set_ == other.character_set_;\n    case Rule::StringType: return string_ == other.string_;\n    case Rule::PatternType: return pattern_ == other.pattern_;\n    case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;\n    case Rule::SymbolType: return symbol_ == other.symbol_;\n    case Rule::ChoiceType: return choice_ == other.choice_;\n    case Rule::MetadataType: return metadata_ == other.metadata_;\n    case Rule::RepeatType: return repeat_ == other.repeat_;\n    case Rule::SeqType: return seq_ == other.seq_;\n    default: return blank_ == other.blank_;\n  }\n}",
        "start": {
          "row": 116,
          "column": 48
        },
        "end": {
          "row": 130,
          "column": 2
        }
      },
      {
        "kind": "if_statement",
        "name": "query",
        "text": "if (type != other.type) return false;",
        "start": {
          "row": 117,
          "column": 3
        },
        "end": {
          "row": 117,
          "column": 40
        }
      },
      {
        "kind": "condition_clause",
        "name": "query",
        "text": "(type != other.type)",
        "start": {
          "row": 117,
          "column": 6
        },
        "end": {
          "row": 117,
          "column": 26
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "type != other.type",
        "start": {
          "row": 117,
          "column": 7
        },
        "end": {
          "row": 117,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 117,
          "column": 7
        },
        "end": {
          "row": 117,
          "column": 11
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.type",
        "start": {
          "row": 117,
          "column": 15
        },
        "end": {
          "row": 117,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 117,
          "column": 15
        },
        "end": {
          "row": 117,
          "column": 20
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 117,
          "column": 21
        },
        "end": {
          "row": 117,
          "column": 25
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return false;",
        "start": {
          "row": 117,
          "column": 27
        },
        "end": {
          "row": 117,
          "column": 40
        }
      },
      {
        "kind": "false",
        "name": "query",
        "text": "false",
        "start": {
          "row": 117,
          "column": 34
        },
        "end": {
          "row": 117,
          "column": 39
        }
      },
      {
        "kind": "switch_statement",
        "name": "query",
        "text": "switch (type) {\n    case Rule::CharacterSetType: return character_set_ == other.character_set_;\n    case Rule::StringType: return string_ == other.string_;\n    case Rule::PatternType: return pattern_ == other.pattern_;\n    case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;\n    case Rule::SymbolType: return symbol_ == other.symbol_;\n    case Rule::ChoiceType: return choice_ == other.choice_;\n    case Rule::MetadataType: return metadata_ == other.metadata_;\n    case Rule::RepeatType: return repeat_ == other.repeat_;\n    case Rule::SeqType: return seq_ == other.seq_;\n    default: return blank_ == other.blank_;\n  }",
        "start": {
          "row": 118,
          "column": 3
        },
        "end": {
          "row": 129,
          "column": 4
        }
      },
      {
        "kind": "condition_clause",
        "name": "query",
        "text": "(type)",
        "start": {
          "row": 118,
          "column": 10
        },
        "end": {
          "row": 118,
          "column": 16
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 118,
          "column": 11
        },
        "end": {
          "row": 118,
          "column": 15
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    case Rule::CharacterSetType: return character_set_ == other.character_set_;\n    case Rule::StringType: return string_ == other.string_;\n    case Rule::PatternType: return pattern_ == other.pattern_;\n    case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;\n    case Rule::SymbolType: return symbol_ == other.symbol_;\n    case Rule::ChoiceType: return choice_ == other.choice_;\n    case Rule::MetadataType: return metadata_ == other.metadata_;\n    case Rule::RepeatType: return repeat_ == other.repeat_;\n    case Rule::SeqType: return seq_ == other.seq_;\n    default: return blank_ == other.blank_;\n  }",
        "start": {
          "row": 118,
          "column": 17
        },
        "end": {
          "row": 129,
          "column": 4
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::CharacterSetType: return character_set_ == other.character_set_;",
        "start": {
          "row": 119,
          "column": 5
        },
        "end": {
          "row": 119,
          "column": 80
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::CharacterSetType",
        "start": {
          "row": 119,
          "column": 10
        },
        "end": {
          "row": 119,
          "column": 32
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 119,
          "column": 10
        },
        "end": {
          "row": 119,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "CharacterSetType",
        "start": {
          "row": 119,
          "column": 16
        },
        "end": {
          "row": 119,
          "column": 32
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return character_set_ == other.character_set_;",
        "start": {
          "row": 119,
          "column": 34
        },
        "end": {
          "row": 119,
          "column": 80
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "character_set_ == other.character_set_",
        "start": {
          "row": 119,
          "column": 41
        },
        "end": {
          "row": 119,
          "column": 79
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "character_set_",
        "start": {
          "row": 119,
          "column": 41
        },
        "end": {
          "row": 119,
          "column": 55
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.character_set_",
        "start": {
          "row": 119,
          "column": 59
        },
        "end": {
          "row": 119,
          "column": 79
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 119,
          "column": 59
        },
        "end": {
          "row": 119,
          "column": 64
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "character_set_",
        "start": {
          "row": 119,
          "column": 65
        },
        "end": {
          "row": 119,
          "column": 79
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::StringType: return string_ == other.string_;",
        "start": {
          "row": 120,
          "column": 5
        },
        "end": {
          "row": 120,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::StringType",
        "start": {
          "row": 120,
          "column": 10
        },
        "end": {
          "row": 120,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 120,
          "column": 10
        },
        "end": {
          "row": 120,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "StringType",
        "start": {
          "row": 120,
          "column": 16
        },
        "end": {
          "row": 120,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return string_ == other.string_;",
        "start": {
          "row": 120,
          "column": 28
        },
        "end": {
          "row": 120,
          "column": 60
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "string_ == other.string_",
        "start": {
          "row": 120,
          "column": 35
        },
        "end": {
          "row": 120,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "string_",
        "start": {
          "row": 120,
          "column": 35
        },
        "end": {
          "row": 120,
          "column": 42
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.string_",
        "start": {
          "row": 120,
          "column": 46
        },
        "end": {
          "row": 120,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 120,
          "column": 46
        },
        "end": {
          "row": 120,
          "column": 51
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "string_",
        "start": {
          "row": 120,
          "column": 52
        },
        "end": {
          "row": 120,
          "column": 59
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::PatternType: return pattern_ == other.pattern_;",
        "start": {
          "row": 121,
          "column": 5
        },
        "end": {
          "row": 121,
          "column": 63
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::PatternType",
        "start": {
          "row": 121,
          "column": 10
        },
        "end": {
          "row": 121,
          "column": 27
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 121,
          "column": 10
        },
        "end": {
          "row": 121,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "PatternType",
        "start": {
          "row": 121,
          "column": 16
        },
        "end": {
          "row": 121,
          "column": 27
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return pattern_ == other.pattern_;",
        "start": {
          "row": 121,
          "column": 29
        },
        "end": {
          "row": 121,
          "column": 63
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "pattern_ == other.pattern_",
        "start": {
          "row": 121,
          "column": 36
        },
        "end": {
          "row": 121,
          "column": 62
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "pattern_",
        "start": {
          "row": 121,
          "column": 36
        },
        "end": {
          "row": 121,
          "column": 44
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.pattern_",
        "start": {
          "row": 121,
          "column": 48
        },
        "end": {
          "row": 121,
          "column": 62
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 121,
          "column": 48
        },
        "end": {
          "row": 121,
          "column": 53
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "pattern_",
        "start": {
          "row": 121,
          "column": 54
        },
        "end": {
          "row": 121,
          "column": 62
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::NamedSymbolType: return named_symbol_ == other.named_symbol_;",
        "start": {
          "row": 122,
          "column": 5
        },
        "end": {
          "row": 122,
          "column": 77
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::NamedSymbolType",
        "start": {
          "row": 122,
          "column": 10
        },
        "end": {
          "row": 122,
          "column": 31
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 122,
          "column": 10
        },
        "end": {
          "row": 122,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "NamedSymbolType",
        "start": {
          "row": 122,
          "column": 16
        },
        "end": {
          "row": 122,
          "column": 31
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return named_symbol_ == other.named_symbol_;",
        "start": {
          "row": 122,
          "column": 33
        },
        "end": {
          "row": 122,
          "column": 77
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "named_symbol_ == other.named_symbol_",
        "start": {
          "row": 122,
          "column": 40
        },
        "end": {
          "row": 122,
          "column": 76
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "named_symbol_",
        "start": {
          "row": 122,
          "column": 40
        },
        "end": {
          "row": 122,
          "column": 53
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.named_symbol_",
        "start": {
          "row": 122,
          "column": 57
        },
        "end": {
          "row": 122,
          "column": 76
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 122,
          "column": 57
        },
        "end": {
          "row": 122,
          "column": 62
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "named_symbol_",
        "start": {
          "row": 122,
          "column": 63
        },
        "end": {
          "row": 122,
          "column": 76
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::SymbolType: return symbol_ == other.symbol_;",
        "start": {
          "row": 123,
          "column": 5
        },
        "end": {
          "row": 123,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::SymbolType",
        "start": {
          "row": 123,
          "column": 10
        },
        "end": {
          "row": 123,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 123,
          "column": 10
        },
        "end": {
          "row": 123,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SymbolType",
        "start": {
          "row": 123,
          "column": 16
        },
        "end": {
          "row": 123,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return symbol_ == other.symbol_;",
        "start": {
          "row": 123,
          "column": 28
        },
        "end": {
          "row": 123,
          "column": 60
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "symbol_ == other.symbol_",
        "start": {
          "row": 123,
          "column": 35
        },
        "end": {
          "row": 123,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol_",
        "start": {
          "row": 123,
          "column": 35
        },
        "end": {
          "row": 123,
          "column": 42
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.symbol_",
        "start": {
          "row": 123,
          "column": 46
        },
        "end": {
          "row": 123,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 123,
          "column": 46
        },
        "end": {
          "row": 123,
          "column": 51
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "symbol_",
        "start": {
          "row": 123,
          "column": 52
        },
        "end": {
          "row": 123,
          "column": 59
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::ChoiceType: return choice_ == other.choice_;",
        "start": {
          "row": 124,
          "column": 5
        },
        "end": {
          "row": 124,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::ChoiceType",
        "start": {
          "row": 124,
          "column": 10
        },
        "end": {
          "row": 124,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 124,
          "column": 10
        },
        "end": {
          "row": 124,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "ChoiceType",
        "start": {
          "row": 124,
          "column": 16
        },
        "end": {
          "row": 124,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return choice_ == other.choice_;",
        "start": {
          "row": 124,
          "column": 28
        },
        "end": {
          "row": 124,
          "column": 60
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "choice_ == other.choice_",
        "start": {
          "row": 124,
          "column": 35
        },
        "end": {
          "row": 124,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "choice_",
        "start": {
          "row": 124,
          "column": 35
        },
        "end": {
          "row": 124,
          "column": 42
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.choice_",
        "start": {
          "row": 124,
          "column": 46
        },
        "end": {
          "row": 124,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 124,
          "column": 46
        },
        "end": {
          "row": 124,
          "column": 51
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "choice_",
        "start": {
          "row": 124,
          "column": 52
        },
        "end": {
          "row": 124,
          "column": 59
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::MetadataType: return metadata_ == other.metadata_;",
        "start": {
          "row": 125,
          "column": 5
        },
        "end": {
          "row": 125,
          "column": 66
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::MetadataType",
        "start": {
          "row": 125,
          "column": 10
        },
        "end": {
          "row": 125,
          "column": 28
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 125,
          "column": 10
        },
        "end": {
          "row": 125,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "MetadataType",
        "start": {
          "row": 125,
          "column": 16
        },
        "end": {
          "row": 125,
          "column": 28
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return metadata_ == other.metadata_;",
        "start": {
          "row": 125,
          "column": 30
        },
        "end": {
          "row": 125,
          "column": 66
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "metadata_ == other.metadata_",
        "start": {
          "row": 125,
          "column": 37
        },
        "end": {
          "row": 125,
          "column": 65
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata_",
        "start": {
          "row": 125,
          "column": 37
        },
        "end": {
          "row": 125,
          "column": 46
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.metadata_",
        "start": {
          "row": 125,
          "column": 50
        },
        "end": {
          "row": 125,
          "column": 65
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 125,
          "column": 50
        },
        "end": {
          "row": 125,
          "column": 55
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "metadata_",
        "start": {
          "row": 125,
          "column": 56
        },
        "end": {
          "row": 125,
          "column": 65
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::RepeatType: return repeat_ == other.repeat_;",
        "start": {
          "row": 126,
          "column": 5
        },
        "end": {
          "row": 126,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::RepeatType",
        "start": {
          "row": 126,
          "column": 10
        },
        "end": {
          "row": 126,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 126,
          "column": 10
        },
        "end": {
          "row": 126,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "RepeatType",
        "start": {
          "row": 126,
          "column": 16
        },
        "end": {
          "row": 126,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return repeat_ == other.repeat_;",
        "start": {
          "row": 126,
          "column": 28
        },
        "end": {
          "row": 126,
          "column": 60
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "repeat_ == other.repeat_",
        "start": {
          "row": 126,
          "column": 35
        },
        "end": {
          "row": 126,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "repeat_",
        "start": {
          "row": 126,
          "column": 35
        },
        "end": {
          "row": 126,
          "column": 42
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.repeat_",
        "start": {
          "row": 126,
          "column": 46
        },
        "end": {
          "row": 126,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 126,
          "column": 46
        },
        "end": {
          "row": 126,
          "column": 51
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "repeat_",
        "start": {
          "row": 126,
          "column": 52
        },
        "end": {
          "row": 126,
          "column": 59
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::SeqType: return seq_ == other.seq_;",
        "start": {
          "row": 127,
          "column": 5
        },
        "end": {
          "row": 127,
          "column": 51
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::SeqType",
        "start": {
          "row": 127,
          "column": 10
        },
        "end": {
          "row": 127,
          "column": 23
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 127,
          "column": 10
        },
        "end": {
          "row": 127,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SeqType",
        "start": {
          "row": 127,
          "column": 16
        },
        "end": {
          "row": 127,
          "column": 23
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return seq_ == other.seq_;",
        "start": {
          "row": 127,
          "column": 25
        },
        "end": {
          "row": 127,
          "column": 51
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "seq_ == other.seq_",
        "start": {
          "row": 127,
          "column": 32
        },
        "end": {
          "row": 127,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "seq_",
        "start": {
          "row": 127,
          "column": 32
        },
        "end": {
          "row": 127,
          "column": 36
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.seq_",
        "start": {
          "row": 127,
          "column": 40
        },
        "end": {
          "row": 127,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 127,
          "column": 40
        },
        "end": {
          "row": 127,
          "column": 45
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "seq_",
        "start": {
          "row": 127,
          "column": 46
        },
        "end": {
          "row": 127,
          "column": 50
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "default: return blank_ == other.blank_;",
        "start": {
          "row": 128,
          "column": 5
        },
        "end": {
          "row": 128,
          "column": 44
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return blank_ == other.blank_;",
        "start": {
          "row": 128,
          "column": 14
        },
        "end": {
          "row": 128,
          "column": 44
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "blank_ == other.blank_",
        "start": {
          "row": 128,
          "column": 21
        },
        "end": {
          "row": 128,
          "column": 43
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 128,
          "column": 21
        },
        "end": {
          "row": 128,
          "column": 27
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "other.blank_",
        "start": {
          "row": 128,
          "column": 31
        },
        "end": {
          "row": 128,
          "column": 43
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "other",
        "start": {
          "row": 128,
          "column": 31
        },
        "end": {
          "row": 128,
          "column": 36
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 128,
          "column": 37
        },
        "end": {
          "row": 128,
          "column": 43
        }
      },
      {
        "kind": "template_declaration",
        "name": "query",
        "text": "template <>\nbool Rule::is<Blank>() const { return type == BlankType; }",
        "start": {
          "row": 132,
          "column": 1
        },
        "end": {
          "row": 133,
          "column": 59
        }
      },
      {
        "kind": "template_parameter_list",
        "name": "query",
        "text": "<>",
        "start": {
          "row": 132,
          "column": 10
        },
        "end": {
          "row": 132,
          "column": 12
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "bool Rule::is<Blank>() const { return type == BlankType; }",
        "start": {
          "row": 133,
          "column": 1
        },
        "end": {
          "row": 133,
          "column": 59
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "bool",
        "start": {
          "row": 133,
          "column": 1
        },
        "end": {
          "row": 133,
          "column": 5
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::is<Blank>() const",
        "start": {
          "row": 133,
          "column": 6
        },
        "end": {
          "row": 133,
          "column": 29
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::is<Blank>",
        "start": {
          "row": 133,
          "column": 6
        },
        "end": {
          "row": 133,
          "column": 21
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 133,
          "column": 6
        },
        "end": {
          "row": 133,
          "column": 10
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "is<Blank>",
        "start": {
          "row": 133,
          "column": 12
        },
        "end": {
          "row": 133,
          "column": 21
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "is",
        "start": {
          "row": 133,
          "column": 12
        },
        "end": {
          "row": 133,
          "column": 14
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Blank>",
        "start": {
          "row": 133,
          "column": 14
        },
        "end": {
          "row": 133,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 133,
          "column": 15
        },
        "end": {
          "row": 133,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 133,
          "column": 15
        },
        "end": {
          "row": 133,
          "column": 20
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 133,
          "column": 21
        },
        "end": {
          "row": 133,
          "column": 23
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 133,
          "column": 24
        },
        "end": {
          "row": 133,
          "column": 29
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{ return type == BlankType; }",
        "start": {
          "row": 133,
          "column": 30
        },
        "end": {
          "row": 133,
          "column": 59
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return type == BlankType;",
        "start": {
          "row": 133,
          "column": 32
        },
        "end": {
          "row": 133,
          "column": 57
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "type == BlankType",
        "start": {
          "row": 133,
          "column": 39
        },
        "end": {
          "row": 133,
          "column": 56
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 133,
          "column": 39
        },
        "end": {
          "row": 133,
          "column": 43
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "BlankType",
        "start": {
          "row": 133,
          "column": 47
        },
        "end": {
          "row": 133,
          "column": 56
        }
      },
      {
        "kind": "template_declaration",
        "name": "query",
        "text": "template <>\nbool Rule::is<Symbol>() const { return type == SymbolType; }",
        "start": {
          "row": 135,
          "column": 1
        },
        "end": {
          "row": 136,
          "column": 61
        }
      },
      {
        "kind": "template_parameter_list",
        "name": "query",
        "text": "<>",
        "start": {
          "row": 135,
          "column": 10
        },
        "end": {
          "row": 135,
          "column": 12
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "bool Rule::is<Symbol>() const { return type == SymbolType; }",
        "start": {
          "row": 136,
          "column": 1
        },
        "end": {
          "row": 136,
          "column": 61
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "bool",
        "start": {
          "row": 136,
          "column": 1
        },
        "end": {
          "row": 136,
          "column": 5
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::is<Symbol>() const",
        "start": {
          "row": 136,
          "column": 6
        },
        "end": {
          "row": 136,
          "column": 30
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::is<Symbol>",
        "start": {
          "row": 136,
          "column": 6
        },
        "end": {
          "row": 136,
          "column": 22
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 136,
          "column": 6
        },
        "end": {
          "row": 136,
          "column": 10
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "is<Symbol>",
        "start": {
          "row": 136,
          "column": 12
        },
        "end": {
          "row": 136,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "is",
        "start": {
          "row": 136,
          "column": 12
        },
        "end": {
          "row": 136,
          "column": 14
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Symbol>",
        "start": {
          "row": 136,
          "column": 14
        },
        "end": {
          "row": 136,
          "column": 22
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 136,
          "column": 15
        },
        "end": {
          "row": 136,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 136,
          "column": 15
        },
        "end": {
          "row": 136,
          "column": 21
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 136,
          "column": 22
        },
        "end": {
          "row": 136,
          "column": 24
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 136,
          "column": 25
        },
        "end": {
          "row": 136,
          "column": 30
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{ return type == SymbolType; }",
        "start": {
          "row": 136,
          "column": 31
        },
        "end": {
          "row": 136,
          "column": 61
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return type == SymbolType;",
        "start": {
          "row": 136,
          "column": 33
        },
        "end": {
          "row": 136,
          "column": 59
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "type == SymbolType",
        "start": {
          "row": 136,
          "column": 40
        },
        "end": {
          "row": 136,
          "column": 58
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 136,
          "column": 40
        },
        "end": {
          "row": 136,
          "column": 44
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SymbolType",
        "start": {
          "row": 136,
          "column": 48
        },
        "end": {
          "row": 136,
          "column": 58
        }
      },
      {
        "kind": "template_declaration",
        "name": "query",
        "text": "template <>\nbool Rule::is<Repeat>() const { return type == RepeatType; }",
        "start": {
          "row": 138,
          "column": 1
        },
        "end": {
          "row": 139,
          "column": 61
        }
      },
      {
        "kind": "template_parameter_list",
        "name": "query",
        "text": "<>",
        "start": {
          "row": 138,
          "column": 10
        },
        "end": {
          "row": 138,
          "column": 12
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "bool Rule::is<Repeat>() const { return type == RepeatType; }",
        "start": {
          "row": 139,
          "column": 1
        },
        "end": {
          "row": 139,
          "column": 61
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "bool",
        "start": {
          "row": 139,
          "column": 1
        },
        "end": {
          "row": 139,
          "column": 5
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::is<Repeat>() const",
        "start": {
          "row": 139,
          "column": 6
        },
        "end": {
          "row": 139,
          "column": 30
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::is<Repeat>",
        "start": {
          "row": 139,
          "column": 6
        },
        "end": {
          "row": 139,
          "column": 22
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 139,
          "column": 6
        },
        "end": {
          "row": 139,
          "column": 10
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "is<Repeat>",
        "start": {
          "row": 139,
          "column": 12
        },
        "end": {
          "row": 139,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "is",
        "start": {
          "row": 139,
          "column": 12
        },
        "end": {
          "row": 139,
          "column": 14
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Repeat>",
        "start": {
          "row": 139,
          "column": 14
        },
        "end": {
          "row": 139,
          "column": 22
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 139,
          "column": 15
        },
        "end": {
          "row": 139,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 139,
          "column": 15
        },
        "end": {
          "row": 139,
          "column": 21
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 139,
          "column": 22
        },
        "end": {
          "row": 139,
          "column": 24
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 139,
          "column": 25
        },
        "end": {
          "row": 139,
          "column": 30
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{ return type == RepeatType; }",
        "start": {
          "row": 139,
          "column": 31
        },
        "end": {
          "row": 139,
          "column": 61
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return type == RepeatType;",
        "start": {
          "row": 139,
          "column": 33
        },
        "end": {
          "row": 139,
          "column": 59
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "type == RepeatType",
        "start": {
          "row": 139,
          "column": 40
        },
        "end": {
          "row": 139,
          "column": 58
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 139,
          "column": 40
        },
        "end": {
          "row": 139,
          "column": 44
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "RepeatType",
        "start": {
          "row": 139,
          "column": 48
        },
        "end": {
          "row": 139,
          "column": 58
        }
      },
      {
        "kind": "template_declaration",
        "name": "query",
        "text": "template <>\nconst Symbol & Rule::get_unchecked<Symbol>() const { return symbol_; }",
        "start": {
          "row": 141,
          "column": 1
        },
        "end": {
          "row": 142,
          "column": 71
        }
      },
      {
        "kind": "template_parameter_list",
        "name": "query",
        "text": "<>",
        "start": {
          "row": 141,
          "column": 10
        },
        "end": {
          "row": 141,
          "column": 12
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "const Symbol & Rule::get_unchecked<Symbol>() const { return symbol_; }",
        "start": {
          "row": 142,
          "column": 1
        },
        "end": {
          "row": 142,
          "column": 71
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 142,
          "column": 1
        },
        "end": {
          "row": 142,
          "column": 6
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 142,
          "column": 7
        },
        "end": {
          "row": 142,
          "column": 13
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "& Rule::get_unchecked<Symbol>() const",
        "start": {
          "row": 142,
          "column": 14
        },
        "end": {
          "row": 142,
          "column": 51
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::get_unchecked<Symbol>() const",
        "start": {
          "row": 142,
          "column": 16
        },
        "end": {
          "row": 142,
          "column": 51
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::get_unchecked<Symbol>",
        "start": {
          "row": 142,
          "column": 16
        },
        "end": {
          "row": 142,
          "column": 43
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 142,
          "column": 16
        },
        "end": {
          "row": 142,
          "column": 20
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "get_unchecked<Symbol>",
        "start": {
          "row": 142,
          "column": 22
        },
        "end": {
          "row": 142,
          "column": 43
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "get_unchecked",
        "start": {
          "row": 142,
          "column": 22
        },
        "end": {
          "row": 142,
          "column": 35
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Symbol>",
        "start": {
          "row": 142,
          "column": 35
        },
        "end": {
          "row": 142,
          "column": 43
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 142,
          "column": 36
        },
        "end": {
          "row": 142,
          "column": 42
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 142,
          "column": 36
        },
        "end": {
          "row": 142,
          "column": 42
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 142,
          "column": 43
        },
        "end": {
          "row": 142,
          "column": 45
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 142,
          "column": 46
        },
        "end": {
          "row": 142,
          "column": 51
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{ return symbol_; }",
        "start": {
          "row": 142,
          "column": 52
        },
        "end": {
          "row": 142,
          "column": 71
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return symbol_;",
        "start": {
          "row": 142,
          "column": 54
        },
        "end": {
          "row": 142,
          "column": 69
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol_",
        "start": {
          "row": 142,
          "column": 61
        },
        "end": {
          "row": 142,
          "column": 68
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "static inline void add_choice_element(std::vector<Rule> *elements, const Rule &new_rule) {\n  new_rule.match(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  );\n}",
        "start": {
          "row": 144,
          "column": 1
        },
        "end": {
          "row": 159,
          "column": 2
        }
      },
      {
        "kind": "storage_class_specifier",
        "name": "query",
        "text": "static",
        "start": {
          "row": 144,
          "column": 1
        },
        "end": {
          "row": 144,
          "column": 7
        }
      },
      {
        "kind": "storage_class_specifier",
        "name": "query",
        "text": "inline",
        "start": {
          "row": 144,
          "column": 8
        },
        "end": {
          "row": 144,
          "column": 14
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "void",
        "start": {
          "row": 144,
          "column": 15
        },
        "end": {
          "row": 144,
          "column": 19
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "add_choice_element(std::vector<Rule> *elements, const Rule &new_rule)",
        "start": {
          "row": 144,
          "column": 20
        },
        "end": {
          "row": 144,
          "column": 89
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "add_choice_element",
        "start": {
          "row": 144,
          "column": 20
        },
        "end": {
          "row": 144,
          "column": 38
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(std::vector<Rule> *elements, const Rule &new_rule)",
        "start": {
          "row": 144,
          "column": 38
        },
        "end": {
          "row": 144,
          "column": 89
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "std::vector<Rule> *elements",
        "start": {
          "row": 144,
          "column": 39
        },
        "end": {
          "row": 144,
          "column": 66
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "std::vector<Rule>",
        "start": {
          "row": 144,
          "column": 39
        },
        "end": {
          "row": 144,
          "column": 56
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 144,
          "column": 39
        },
        "end": {
          "row": 144,
          "column": 42
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "vector<Rule>",
        "start": {
          "row": 144,
          "column": 44
        },
        "end": {
          "row": 144,
          "column": 56
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "vector",
        "start": {
          "row": 144,
          "column": 44
        },
        "end": {
          "row": 144,
          "column": 50
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Rule>",
        "start": {
          "row": 144,
          "column": 50
        },
        "end": {
          "row": 144,
          "column": 56
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 144,
          "column": 51
        },
        "end": {
          "row": 144,
          "column": 55
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 144,
          "column": 51
        },
        "end": {
          "row": 144,
          "column": 55
        }
      },
      {
        "kind": "pointer_declarator",
        "name": "query",
        "text": "*elements",
        "start": {
          "row": 144,
          "column": 57
        },
        "end": {
          "row": 144,
          "column": 66
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 144,
          "column": 58
        },
        "end": {
          "row": 144,
          "column": 66
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Rule &new_rule",
        "start": {
          "row": 144,
          "column": 68
        },
        "end": {
          "row": 144,
          "column": 88
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 144,
          "column": 68
        },
        "end": {
          "row": 144,
          "column": 73
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 144,
          "column": 74
        },
        "end": {
          "row": 144,
          "column": 78
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&new_rule",
        "start": {
          "row": 144,
          "column": 79
        },
        "end": {
          "row": 144,
          "column": 88
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "new_rule",
        "start": {
          "row": 144,
          "column": 80
        },
        "end": {
          "row": 144,
          "column": 88
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  new_rule.match(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  );\n}",
        "start": {
          "row": 144,
          "column": 90
        },
        "end": {
          "row": 159,
          "column": 2
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "new_rule.match(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  );",
        "start": {
          "row": 145,
          "column": 3
        },
        "end": {
          "row": 158,
          "column": 5
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "new_rule.match(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  )",
        "start": {
          "row": 145,
          "column": 3
        },
        "end": {
          "row": 158,
          "column": 4
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "new_rule.match",
        "start": {
          "row": 145,
          "column": 3
        },
        "end": {
          "row": 145,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "new_rule",
        "start": {
          "row": 145,
          "column": 3
        },
        "end": {
          "row": 145,
          "column": 11
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "match",
        "start": {
          "row": 145,
          "column": 12
        },
        "end": {
          "row": 145,
          "column": 17
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(\n    [elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    },\n\n    [elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }\n  )",
        "start": {
          "row": 145,
          "column": 17
        },
        "end": {
          "row": 158,
          "column": 4
        }
      },
      {
        "kind": "lambda_expression",
        "name": "query",
        "text": "[elements](Choice choice) {\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    }",
        "start": {
          "row": 146,
          "column": 5
        },
        "end": {
          "row": 150,
          "column": 6
        }
      },
      {
        "kind": "lambda_capture_specifier",
        "name": "query",
        "text": "[elements]",
        "start": {
          "row": 146,
          "column": 5
        },
        "end": {
          "row": 146,
          "column": 15
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 146,
          "column": 6
        },
        "end": {
          "row": 146,
          "column": 14
        }
      },
      {
        "kind": "abstract_function_declarator",
        "name": "query",
        "text": "(Choice choice)",
        "start": {
          "row": 146,
          "column": 15
        },
        "end": {
          "row": 146,
          "column": 30
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Choice choice)",
        "start": {
          "row": 146,
          "column": 15
        },
        "end": {
          "row": 146,
          "column": 30
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Choice choice",
        "start": {
          "row": 146,
          "column": 16
        },
        "end": {
          "row": 146,
          "column": 29
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 146,
          "column": 16
        },
        "end": {
          "row": 146,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "choice",
        "start": {
          "row": 146,
          "column": 23
        },
        "end": {
          "row": 146,
          "column": 29
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n      for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }\n    }",
        "start": {
          "row": 146,
          "column": 31
        },
        "end": {
          "row": 150,
          "column": 6
        }
      },
      {
        "kind": "for_range_loop",
        "name": "query",
        "text": "for (auto &element : choice.elements) {\n        add_choice_element(elements, element);\n      }",
        "start": {
          "row": 147,
          "column": 7
        },
        "end": {
          "row": 149,
          "column": 8
        }
      },
      {
        "kind": "auto",
        "name": "query",
        "text": "auto",
        "start": {
          "row": 147,
          "column": 12
        },
        "end": {
          "row": 147,
          "column": 16
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&element",
        "start": {
          "row": 147,
          "column": 17
        },
        "end": {
          "row": 147,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "element",
        "start": {
          "row": 147,
          "column": 18
        },
        "end": {
          "row": 147,
          "column": 25
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "choice.elements",
        "start": {
          "row": 147,
          "column": 28
        },
        "end": {
          "row": 147,
          "column": 43
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "choice",
        "start": {
          "row": 147,
          "column": 28
        },
        "end": {
          "row": 147,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 147,
          "column": 35
        },
        "end": {
          "row": 147,
          "column": 43
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n        add_choice_element(elements, element);\n      }",
        "start": {
          "row": 147,
          "column": 45
        },
        "end": {
          "row": 149,
          "column": 8
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "add_choice_element(elements, element);",
        "start": {
          "row": 148,
          "column": 9
        },
        "end": {
          "row": 148,
          "column": 47
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "add_choice_element(elements, element)",
        "start": {
          "row": 148,
          "column": 9
        },
        "end": {
          "row": 148,
          "column": 46
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "add_choice_element",
        "start": {
          "row": 148,
          "column": 9
        },
        "end": {
          "row": 148,
          "column": 27
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(elements, element)",
        "start": {
          "row": 148,
          "column": 27
        },
        "end": {
          "row": 148,
          "column": 46
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 148,
          "column": 28
        },
        "end": {
          "row": 148,
          "column": 36
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "element",
        "start": {
          "row": 148,
          "column": 38
        },
        "end": {
          "row": 148,
          "column": 45
        }
      },
      {
        "kind": "lambda_expression",
        "name": "query",
        "text": "[elements](auto rule) {\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }",
        "start": {
          "row": 152,
          "column": 5
        },
        "end": {
          "row": 157,
          "column": 6
        }
      },
      {
        "kind": "lambda_capture_specifier",
        "name": "query",
        "text": "[elements]",
        "start": {
          "row": 152,
          "column": 5
        },
        "end": {
          "row": 152,
          "column": 15
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 152,
          "column": 6
        },
        "end": {
          "row": 152,
          "column": 14
        }
      },
      {
        "kind": "abstract_function_declarator",
        "name": "query",
        "text": "(auto rule)",
        "start": {
          "row": 152,
          "column": 15
        },
        "end": {
          "row": 152,
          "column": 26
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(auto rule)",
        "start": {
          "row": 152,
          "column": 15
        },
        "end": {
          "row": 152,
          "column": 26
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "auto rule",
        "start": {
          "row": 152,
          "column": 16
        },
        "end": {
          "row": 152,
          "column": 25
        }
      },
      {
        "kind": "auto",
        "name": "query",
        "text": "auto",
        "start": {
          "row": 152,
          "column": 16
        },
        "end": {
          "row": 152,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 152,
          "column": 21
        },
        "end": {
          "row": 152,
          "column": 25
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n      for (auto &element : *elements) {\n        if (element == rule) return;\n      }\n      elements->push_back(rule);\n    }",
        "start": {
          "row": 152,
          "column": 27
        },
        "end": {
          "row": 157,
          "column": 6
        }
      },
      {
        "kind": "for_range_loop",
        "name": "query",
        "text": "for (auto &element : *elements) {\n        if (element == rule) return;\n      }",
        "start": {
          "row": 153,
          "column": 7
        },
        "end": {
          "row": 155,
          "column": 8
        }
      },
      {
        "kind": "auto",
        "name": "query",
        "text": "auto",
        "start": {
          "row": 153,
          "column": 12
        },
        "end": {
          "row": 153,
          "column": 16
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&element",
        "start": {
          "row": 153,
          "column": 17
        },
        "end": {
          "row": 153,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "element",
        "start": {
          "row": 153,
          "column": 18
        },
        "end": {
          "row": 153,
          "column": 25
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "*elements",
        "start": {
          "row": 153,
          "column": 28
        },
        "end": {
          "row": 153,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 153,
          "column": 29
        },
        "end": {
          "row": 153,
          "column": 37
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n        if (element == rule) return;\n      }",
        "start": {
          "row": 153,
          "column": 39
        },
        "end": {
          "row": 155,
          "column": 8
        }
      },
      {
        "kind": "if_statement",
        "name": "query",
        "text": "if (element == rule) return;",
        "start": {
          "row": 154,
          "column": 9
        },
        "end": {
          "row": 154,
          "column": 37
        }
      },
      {
        "kind": "condition_clause",
        "name": "query",
        "text": "(element == rule)",
        "start": {
          "row": 154,
          "column": 12
        },
        "end": {
          "row": 154,
          "column": 29
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "element == rule",
        "start": {
          "row": 154,
          "column": 13
        },
        "end": {
          "row": 154,
          "column": 28
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "element",
        "start": {
          "row": 154,
          "column": 13
        },
        "end": {
          "row": 154,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 154,
          "column": 24
        },
        "end": {
          "row": 154,
          "column": 28
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return;",
        "start": {
          "row": 154,
          "column": 30
        },
        "end": {
          "row": 154,
          "column": 37
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "elements->push_back(rule);",
        "start": {
          "row": 156,
          "column": 7
        },
        "end": {
          "row": 156,
          "column": 33
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "elements->push_back(rule)",
        "start": {
          "row": 156,
          "column": 7
        },
        "end": {
          "row": 156,
          "column": 32
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "elements->push_back",
        "start": {
          "row": 156,
          "column": 7
        },
        "end": {
          "row": 156,
          "column": 26
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 156,
          "column": 7
        },
        "end": {
          "row": 156,
          "column": 15
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "push_back",
        "start": {
          "row": 156,
          "column": 17
        },
        "end": {
          "row": 156,
          "column": 26
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule)",
        "start": {
          "row": 156,
          "column": 26
        },
        "end": {
          "row": 156,
          "column": 32
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 156,
          "column": 27
        },
        "end": {
          "row": 156,
          "column": 31
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "Rule Rule::choice(const vector<Rule> &rules) {\n  vector<Rule> elements;\n  for (auto &element : rules) {\n    add_choice_element(&elements, element);\n  }\n  return (elements.size() == 1) ? elements.front() : Choice{elements};\n}",
        "start": {
          "row": 161,
          "column": 1
        },
        "end": {
          "row": 167,
          "column": 2
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 161,
          "column": 1
        },
        "end": {
          "row": 161,
          "column": 5
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::choice(const vector<Rule> &rules)",
        "start": {
          "row": 161,
          "column": 6
        },
        "end": {
          "row": 161,
          "column": 45
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::choice",
        "start": {
          "row": 161,
          "column": 6
        },
        "end": {
          "row": 161,
          "column": 18
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 161,
          "column": 6
        },
        "end": {
          "row": 161,
          "column": 10
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "choice",
        "start": {
          "row": 161,
          "column": 12
        },
        "end": {
          "row": 161,
          "column": 18
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const vector<Rule> &rules)",
        "start": {
          "row": 161,
          "column": 18
        },
        "end": {
          "row": 161,
          "column": 45
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const vector<Rule> &rules",
        "start": {
          "row": 161,
          "column": 19
        },
        "end": {
          "row": 161,
          "column": 44
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 161,
          "column": 19
        },
        "end": {
          "row": 161,
          "column": 24
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "vector<Rule>",
        "start": {
          "row": 161,
          "column": 25
        },
        "end": {
          "row": 161,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "vector",
        "start": {
          "row": 161,
          "column": 25
        },
        "end": {
          "row": 161,
          "column": 31
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Rule>",
        "start": {
          "row": 161,
          "column": 31
        },
        "end": {
          "row": 161,
          "column": 37
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 161,
          "column": 32
        },
        "end": {
          "row": 161,
          "column": 36
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 161,
          "column": 32
        },
        "end": {
          "row": 161,
          "column": 36
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&rules",
        "start": {
          "row": 161,
          "column": 38
        },
        "end": {
          "row": 161,
          "column": 44
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rules",
        "start": {
          "row": 161,
          "column": 39
        },
        "end": {
          "row": 161,
          "column": 44
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  vector<Rule> elements;\n  for (auto &element : rules) {\n    add_choice_element(&elements, element);\n  }\n  return (elements.size() == 1) ? elements.front() : Choice{elements};\n}",
        "start": {
          "row": 161,
          "column": 46
        },
        "end": {
          "row": 167,
          "column": 2
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "vector<Rule> elements;",
        "start": {
          "row": 162,
          "column": 3
        },
        "end": {
          "row": 162,
          "column": 25
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "vector<Rule>",
        "start": {
          "row": 162,
          "column": 3
        },
        "end": {
          "row": 162,
          "column": 15
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "vector",
        "start": {
          "row": 162,
          "column": 3
        },
        "end": {
          "row": 162,
          "column": 9
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Rule>",
        "start": {
          "row": 162,
          "column": 9
        },
        "end": {
          "row": 162,
          "column": 15
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 162,
          "column": 10
        },
        "end": {
          "row": 162,
          "column": 14
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 162,
          "column": 10
        },
        "end": {
          "row": 162,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 162,
          "column": 16
        },
        "end": {
          "row": 162,
          "column": 24
        }
      },
      {
        "kind": "for_range_loop",
        "name": "query",
        "text": "for (auto &element : rules) {\n    add_choice_element(&elements, element);\n  }",
        "start": {
          "row": 163,
          "column": 3
        },
        "end": {
          "row": 165,
          "column": 4
        }
      },
      {
        "kind": "auto",
        "name": "query",
        "text": "auto",
        "start": {
          "row": 163,
          "column": 8
        },
        "end": {
          "row": 163,
          "column": 12
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&element",
        "start": {
          "row": 163,
          "column": 13
        },
        "end": {
          "row": 163,
          "column": 21
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "element",
        "start": {
          "row": 163,
          "column": 14
        },
        "end": {
          "row": 163,
          "column": 21
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rules",
        "start": {
          "row": 163,
          "column": 24
        },
        "end": {
          "row": 163,
          "column": 29
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    add_choice_element(&elements, element);\n  }",
        "start": {
          "row": 163,
          "column": 31
        },
        "end": {
          "row": 165,
          "column": 4
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "add_choice_element(&elements, element);",
        "start": {
          "row": 164,
          "column": 5
        },
        "end": {
          "row": 164,
          "column": 44
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "add_choice_element(&elements, element)",
        "start": {
          "row": 164,
          "column": 5
        },
        "end": {
          "row": 164,
          "column": 43
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "add_choice_element",
        "start": {
          "row": 164,
          "column": 5
        },
        "end": {
          "row": 164,
          "column": 23
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&elements, element)",
        "start": {
          "row": 164,
          "column": 23
        },
        "end": {
          "row": 164,
          "column": 43
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&elements",
        "start": {
          "row": 164,
          "column": 24
        },
        "end": {
          "row": 164,
          "column": 33
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 164,
          "column": 25
        },
        "end": {
          "row": 164,
          "column": 33
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "element",
        "start": {
          "row": 164,
          "column": 35
        },
        "end": {
          "row": 164,
          "column": 42
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return (elements.size() == 1) ? elements.front() : Choice{elements};",
        "start": {
          "row": 166,
          "column": 3
        },
        "end": {
          "row": 166,
          "column": 71
        }
      },
      {
        "kind": "conditional_expression",
        "name": "query",
        "text": "(elements.size() == 1) ? elements.front() : Choice{elements}",
        "start": {
          "row": 166,
          "column": 10
        },
        "end": {
          "row": 166,
          "column": 70
        }
      },
      {
        "kind": "parenthesized_expression",
        "name": "query",
        "text": "(elements.size() == 1)",
        "start": {
          "row": 166,
          "column": 10
        },
        "end": {
          "row": 166,
          "column": 32
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "elements.size() == 1",
        "start": {
          "row": 166,
          "column": 11
        },
        "end": {
          "row": 166,
          "column": 31
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "elements.size()",
        "start": {
          "row": 166,
          "column": 11
        },
        "end": {
          "row": 166,
          "column": 26
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "elements.size",
        "start": {
          "row": 166,
          "column": 11
        },
        "end": {
          "row": 166,
          "column": 24
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 166,
          "column": 11
        },
        "end": {
          "row": 166,
          "column": 19
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "size",
        "start": {
          "row": 166,
          "column": 20
        },
        "end": {
          "row": 166,
          "column": 24
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 166,
          "column": 24
        },
        "end": {
          "row": 166,
          "column": 26
        }
      },
      {
        "kind": "number_literal",
        "name": "query",
        "text": "1",
        "start": {
          "row": 166,
          "column": 30
        },
        "end": {
          "row": 166,
          "column": 31
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "elements.front()",
        "start": {
          "row": 166,
          "column": 35
        },
        "end": {
          "row": 166,
          "column": 51
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "elements.front",
        "start": {
          "row": 166,
          "column": 35
        },
        "end": {
          "row": 166,
          "column": 49
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 166,
          "column": 35
        },
        "end": {
          "row": 166,
          "column": 43
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "front",
        "start": {
          "row": 166,
          "column": 44
        },
        "end": {
          "row": 166,
          "column": 49
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 166,
          "column": 49
        },
        "end": {
          "row": 166,
          "column": 51
        }
      },
      {
        "kind": "compound_literal_expression",
        "name": "query",
        "text": "Choice{elements}",
        "start": {
          "row": 166,
          "column": 54
        },
        "end": {
          "row": 166,
          "column": 70
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 166,
          "column": 54
        },
        "end": {
          "row": 166,
          "column": 60
        }
      },
      {
        "kind": "initializer_list",
        "name": "query",
        "text": "{elements}",
        "start": {
          "row": 166,
          "column": 60
        },
        "end": {
          "row": 166,
          "column": 70
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 166,
          "column": 61
        },
        "end": {
          "row": 166,
          "column": 69
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "Rule Rule::repeat(const Rule &rule) {\n  return rule.is<Repeat>() ? rule : Repeat{rule};\n}",
        "start": {
          "row": 169,
          "column": 1
        },
        "end": {
          "row": 171,
          "column": 2
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 169,
          "column": 1
        },
        "end": {
          "row": 169,
          "column": 5
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::repeat(const Rule &rule)",
        "start": {
          "row": 169,
          "column": 6
        },
        "end": {
          "row": 169,
          "column": 36
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::repeat",
        "start": {
          "row": 169,
          "column": 6
        },
        "end": {
          "row": 169,
          "column": 18
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 169,
          "column": 6
        },
        "end": {
          "row": 169,
          "column": 10
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "repeat",
        "start": {
          "row": 169,
          "column": 12
        },
        "end": {
          "row": 169,
          "column": 18
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Rule &rule)",
        "start": {
          "row": 169,
          "column": 18
        },
        "end": {
          "row": 169,
          "column": 36
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Rule &rule",
        "start": {
          "row": 169,
          "column": 19
        },
        "end": {
          "row": 169,
          "column": 35
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 169,
          "column": 19
        },
        "end": {
          "row": 169,
          "column": 24
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 169,
          "column": 25
        },
        "end": {
          "row": 169,
          "column": 29
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&rule",
        "start": {
          "row": 169,
          "column": 30
        },
        "end": {
          "row": 169,
          "column": 35
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 169,
          "column": 31
        },
        "end": {
          "row": 169,
          "column": 35
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  return rule.is<Repeat>() ? rule : Repeat{rule};\n}",
        "start": {
          "row": 169,
          "column": 37
        },
        "end": {
          "row": 171,
          "column": 2
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return rule.is<Repeat>() ? rule : Repeat{rule};",
        "start": {
          "row": 170,
          "column": 3
        },
        "end": {
          "row": 170,
          "column": 50
        }
      },
      {
        "kind": "conditional_expression",
        "name": "query",
        "text": "rule.is<Repeat>() ? rule : Repeat{rule}",
        "start": {
          "row": 170,
          "column": 10
        },
        "end": {
          "row": 170,
          "column": 49
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule.is<Repeat>()",
        "start": {
          "row": 170,
          "column": 10
        },
        "end": {
          "row": 170,
          "column": 27
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.is<Repeat>",
        "start": {
          "row": 170,
          "column": 10
        },
        "end": {
          "row": 170,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 170,
          "column": 10
        },
        "end": {
          "row": 170,
          "column": 14
        }
      },
      {
        "kind": "template_method",
        "name": "query",
        "text": "is<Repeat>",
        "start": {
          "row": 170,
          "column": 15
        },
        "end": {
          "row": 170,
          "column": 25
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "is",
        "start": {
          "row": 170,
          "column": 15
        },
        "end": {
          "row": 170,
          "column": 17
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Repeat>",
        "start": {
          "row": 170,
          "column": 17
        },
        "end": {
          "row": 170,
          "column": 25
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 170,
          "column": 18
        },
        "end": {
          "row": 170,
          "column": 24
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 170,
          "column": 18
        },
        "end": {
          "row": 170,
          "column": 24
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 170,
          "column": 25
        },
        "end": {
          "row": 170,
          "column": 27
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 170,
          "column": 30
        },
        "end": {
          "row": 170,
          "column": 34
        }
      },
      {
        "kind": "compound_literal_expression",
        "name": "query",
        "text": "Repeat{rule}",
        "start": {
          "row": 170,
          "column": 37
        },
        "end": {
          "row": 170,
          "column": 49
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 170,
          "column": 37
        },
        "end": {
          "row": 170,
          "column": 43
        }
      },
      {
        "kind": "initializer_list",
        "name": "query",
        "text": "{rule}",
        "start": {
          "row": 170,
          "column": 43
        },
        "end": {
          "row": 170,
          "column": 49
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 170,
          "column": 44
        },
        "end": {
          "row": 170,
          "column": 48
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "Rule Rule::seq(const vector<Rule> &rules) {\n  Rule result;\n  for (const auto &rule : rules) {\n    rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );\n  }\n  return result;\n}",
        "start": {
          "row": 173,
          "column": 1
        },
        "end": {
          "row": 193,
          "column": 2
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 173,
          "column": 1
        },
        "end": {
          "row": 173,
          "column": 5
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "Rule::seq(const vector<Rule> &rules)",
        "start": {
          "row": 173,
          "column": 6
        },
        "end": {
          "row": 173,
          "column": 42
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::seq",
        "start": {
          "row": 173,
          "column": 6
        },
        "end": {
          "row": 173,
          "column": 15
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 173,
          "column": 6
        },
        "end": {
          "row": 173,
          "column": 10
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "seq",
        "start": {
          "row": 173,
          "column": 12
        },
        "end": {
          "row": 173,
          "column": 15
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const vector<Rule> &rules)",
        "start": {
          "row": 173,
          "column": 15
        },
        "end": {
          "row": 173,
          "column": 42
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const vector<Rule> &rules",
        "start": {
          "row": 173,
          "column": 16
        },
        "end": {
          "row": 173,
          "column": 41
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 173,
          "column": 16
        },
        "end": {
          "row": 173,
          "column": 21
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "vector<Rule>",
        "start": {
          "row": 173,
          "column": 22
        },
        "end": {
          "row": 173,
          "column": 34
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "vector",
        "start": {
          "row": 173,
          "column": 22
        },
        "end": {
          "row": 173,
          "column": 28
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Rule>",
        "start": {
          "row": 173,
          "column": 28
        },
        "end": {
          "row": 173,
          "column": 34
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 173,
          "column": 29
        },
        "end": {
          "row": 173,
          "column": 33
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 173,
          "column": 29
        },
        "end": {
          "row": 173,
          "column": 33
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&rules",
        "start": {
          "row": 173,
          "column": 35
        },
        "end": {
          "row": 173,
          "column": 41
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rules",
        "start": {
          "row": 173,
          "column": 36
        },
        "end": {
          "row": 173,
          "column": 41
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  Rule result;\n  for (const auto &rule : rules) {\n    rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );\n  }\n  return result;\n}",
        "start": {
          "row": 173,
          "column": 43
        },
        "end": {
          "row": 193,
          "column": 2
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "Rule result;",
        "start": {
          "row": 174,
          "column": 3
        },
        "end": {
          "row": 174,
          "column": 15
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 174,
          "column": 3
        },
        "end": {
          "row": 174,
          "column": 7
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 174,
          "column": 8
        },
        "end": {
          "row": 174,
          "column": 14
        }
      },
      {
        "kind": "for_range_loop",
        "name": "query",
        "text": "for (const auto &rule : rules) {\n    rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );\n  }",
        "start": {
          "row": 175,
          "column": 3
        },
        "end": {
          "row": 191,
          "column": 4
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 175,
          "column": 8
        },
        "end": {
          "row": 175,
          "column": 13
        }
      },
      {
        "kind": "auto",
        "name": "query",
        "text": "auto",
        "start": {
          "row": 175,
          "column": 14
        },
        "end": {
          "row": 175,
          "column": 18
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&rule",
        "start": {
          "row": 175,
          "column": 19
        },
        "end": {
          "row": 175,
          "column": 24
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 175,
          "column": 20
        },
        "end": {
          "row": 175,
          "column": 24
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rules",
        "start": {
          "row": 175,
          "column": 27
        },
        "end": {
          "row": 175,
          "column": 32
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );\n  }",
        "start": {
          "row": 175,
          "column": 34
        },
        "end": {
          "row": 191,
          "column": 4
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    );",
        "start": {
          "row": 176,
          "column": 5
        },
        "end": {
          "row": 190,
          "column": 7
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "rule.match(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    )",
        "start": {
          "row": 176,
          "column": 5
        },
        "end": {
          "row": 190,
          "column": 6
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.match",
        "start": {
          "row": 176,
          "column": 5
        },
        "end": {
          "row": 176,
          "column": 15
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 176,
          "column": 5
        },
        "end": {
          "row": 176,
          "column": 9
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "match",
        "start": {
          "row": 176,
          "column": 10
        },
        "end": {
          "row": 176,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(\n      [](Blank) {},\n      [&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      },\n      [&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }\n    )",
        "start": {
          "row": 176,
          "column": 15
        },
        "end": {
          "row": 190,
          "column": 6
        }
      },
      {
        "kind": "lambda_expression",
        "name": "query",
        "text": "[](Blank) {}",
        "start": {
          "row": 177,
          "column": 7
        },
        "end": {
          "row": 177,
          "column": 19
        }
      },
      {
        "kind": "lambda_capture_specifier",
        "name": "query",
        "text": "[]",
        "start": {
          "row": 177,
          "column": 7
        },
        "end": {
          "row": 177,
          "column": 9
        }
      },
      {
        "kind": "abstract_function_declarator",
        "name": "query",
        "text": "(Blank)",
        "start": {
          "row": 177,
          "column": 9
        },
        "end": {
          "row": 177,
          "column": 16
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Blank)",
        "start": {
          "row": 177,
          "column": 9
        },
        "end": {
          "row": 177,
          "column": 16
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 177,
          "column": 10
        },
        "end": {
          "row": 177,
          "column": 15
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 177,
          "column": 10
        },
        "end": {
          "row": 177,
          "column": 15
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{}",
        "start": {
          "row": 177,
          "column": 17
        },
        "end": {
          "row": 177,
          "column": 19
        }
      },
      {
        "kind": "lambda_expression",
        "name": "query",
        "text": "[&](Metadata metadata) {\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      }",
        "start": {
          "row": 178,
          "column": 7
        },
        "end": {
          "row": 182,
          "column": 8
        }
      },
      {
        "kind": "lambda_capture_specifier",
        "name": "query",
        "text": "[&]",
        "start": {
          "row": 178,
          "column": 7
        },
        "end": {
          "row": 178,
          "column": 10
        }
      },
      {
        "kind": "lambda_default_capture",
        "name": "query",
        "text": "&",
        "start": {
          "row": 178,
          "column": 8
        },
        "end": {
          "row": 178,
          "column": 9
        }
      },
      {
        "kind": "abstract_function_declarator",
        "name": "query",
        "text": "(Metadata metadata)",
        "start": {
          "row": 178,
          "column": 10
        },
        "end": {
          "row": 178,
          "column": 29
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(Metadata metadata)",
        "start": {
          "row": 178,
          "column": 10
        },
        "end": {
          "row": 178,
          "column": 29
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "Metadata metadata",
        "start": {
          "row": 178,
          "column": 11
        },
        "end": {
          "row": 178,
          "column": 28
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Metadata",
        "start": {
          "row": 178,
          "column": 11
        },
        "end": {
          "row": 178,
          "column": 19
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 178,
          "column": 20
        },
        "end": {
          "row": 178,
          "column": 28
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n        if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }\n      }",
        "start": {
          "row": 178,
          "column": 30
        },
        "end": {
          "row": 182,
          "column": 8
        }
      },
      {
        "kind": "if_statement",
        "name": "query",
        "text": "if (!metadata.rule->is<Blank>()) {\n          result = Seq{result, rule};\n        }",
        "start": {
          "row": 179,
          "column": 9
        },
        "end": {
          "row": 181,
          "column": 10
        }
      },
      {
        "kind": "condition_clause",
        "name": "query",
        "text": "(!metadata.rule->is<Blank>())",
        "start": {
          "row": 179,
          "column": 12
        },
        "end": {
          "row": 179,
          "column": 41
        }
      },
      {
        "kind": "unary_expression",
        "name": "query",
        "text": "!metadata.rule->is<Blank>()",
        "start": {
          "row": 179,
          "column": 13
        },
        "end": {
          "row": 179,
          "column": 40
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "metadata.rule->is<Blank>()",
        "start": {
          "row": 179,
          "column": 14
        },
        "end": {
          "row": 179,
          "column": 40
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.rule->is<Blank>",
        "start": {
          "row": 179,
          "column": 14
        },
        "end": {
          "row": 179,
          "column": 38
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.rule",
        "start": {
          "row": 179,
          "column": 14
        },
        "end": {
          "row": 179,
          "column": 27
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 179,
          "column": 14
        },
        "end": {
          "row": 179,
          "column": 22
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 179,
          "column": 23
        },
        "end": {
          "row": 179,
          "column": 27
        }
      },
      {
        "kind": "template_method",
        "name": "query",
        "text": "is<Blank>",
        "start": {
          "row": 179,
          "column": 29
        },
        "end": {
          "row": 179,
          "column": 38
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "is",
        "start": {
          "row": 179,
          "column": 29
        },
        "end": {
          "row": 179,
          "column": 31
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Blank>",
        "start": {
          "row": 179,
          "column": 31
        },
        "end": {
          "row": 179,
          "column": 38
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 179,
          "column": 32
        },
        "end": {
          "row": 179,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 179,
          "column": 32
        },
        "end": {
          "row": 179,
          "column": 37
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 179,
          "column": 38
        },
        "end": {
          "row": 179,
          "column": 40
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n          result = Seq{result, rule};\n        }",
        "start": {
          "row": 179,
          "column": 42
        },
        "end": {
          "row": 181,
          "column": 10
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "result = Seq{result, rule};",
        "start": {
          "row": 180,
          "column": 11
        },
        "end": {
          "row": 180,
          "column": 38
        }
      },
      {
        "kind": "assignment_expression",
        "name": "query",
        "text": "result = Seq{result, rule}",
        "start": {
          "row": 180,
          "column": 11
        },
        "end": {
          "row": 180,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 180,
          "column": 11
        },
        "end": {
          "row": 180,
          "column": 17
        }
      },
      {
        "kind": "compound_literal_expression",
        "name": "query",
        "text": "Seq{result, rule}",
        "start": {
          "row": 180,
          "column": 20
        },
        "end": {
          "row": 180,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 180,
          "column": 20
        },
        "end": {
          "row": 180,
          "column": 23
        }
      },
      {
        "kind": "initializer_list",
        "name": "query",
        "text": "{result, rule}",
        "start": {
          "row": 180,
          "column": 23
        },
        "end": {
          "row": 180,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 180,
          "column": 24
        },
        "end": {
          "row": 180,
          "column": 30
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 180,
          "column": 32
        },
        "end": {
          "row": 180,
          "column": 36
        }
      },
      {
        "kind": "lambda_expression",
        "name": "query",
        "text": "[&](auto) {\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }",
        "start": {
          "row": 183,
          "column": 7
        },
        "end": {
          "row": 189,
          "column": 8
        }
      },
      {
        "kind": "lambda_capture_specifier",
        "name": "query",
        "text": "[&]",
        "start": {
          "row": 183,
          "column": 7
        },
        "end": {
          "row": 183,
          "column": 10
        }
      },
      {
        "kind": "lambda_default_capture",
        "name": "query",
        "text": "&",
        "start": {
          "row": 183,
          "column": 8
        },
        "end": {
          "row": 183,
          "column": 9
        }
      },
      {
        "kind": "abstract_function_declarator",
        "name": "query",
        "text": "(auto)",
        "start": {
          "row": 183,
          "column": 10
        },
        "end": {
          "row": 183,
          "column": 16
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(auto)",
        "start": {
          "row": 183,
          "column": 10
        },
        "end": {
          "row": 183,
          "column": 16
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "auto",
        "start": {
          "row": 183,
          "column": 11
        },
        "end": {
          "row": 183,
          "column": 15
        }
      },
      {
        "kind": "auto",
        "name": "query",
        "text": "auto",
        "start": {
          "row": 183,
          "column": 11
        },
        "end": {
          "row": 183,
          "column": 15
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n        if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }\n      }",
        "start": {
          "row": 183,
          "column": 17
        },
        "end": {
          "row": 189,
          "column": 8
        }
      },
      {
        "kind": "if_statement",
        "name": "query",
        "text": "if (result.is<Blank>()) {\n          result = rule;\n        } else {\n          result = Seq{result, rule};\n        }",
        "start": {
          "row": 184,
          "column": 9
        },
        "end": {
          "row": 188,
          "column": 10
        }
      },
      {
        "kind": "condition_clause",
        "name": "query",
        "text": "(result.is<Blank>())",
        "start": {
          "row": 184,
          "column": 12
        },
        "end": {
          "row": 184,
          "column": 32
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "result.is<Blank>()",
        "start": {
          "row": 184,
          "column": 13
        },
        "end": {
          "row": 184,
          "column": 31
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "result.is<Blank>",
        "start": {
          "row": 184,
          "column": 13
        },
        "end": {
          "row": 184,
          "column": 29
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 184,
          "column": 13
        },
        "end": {
          "row": 184,
          "column": 19
        }
      },
      {
        "kind": "template_method",
        "name": "query",
        "text": "is<Blank>",
        "start": {
          "row": 184,
          "column": 20
        },
        "end": {
          "row": 184,
          "column": 29
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "is",
        "start": {
          "row": 184,
          "column": 20
        },
        "end": {
          "row": 184,
          "column": 22
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Blank>",
        "start": {
          "row": 184,
          "column": 22
        },
        "end": {
          "row": 184,
          "column": 29
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 184,
          "column": 23
        },
        "end": {
          "row": 184,
          "column": 28
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 184,
          "column": 23
        },
        "end": {
          "row": 184,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 184,
          "column": 29
        },
        "end": {
          "row": 184,
          "column": 31
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n          result = rule;\n        }",
        "start": {
          "row": 184,
          "column": 33
        },
        "end": {
          "row": 186,
          "column": 10
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "result = rule;",
        "start": {
          "row": 185,
          "column": 11
        },
        "end": {
          "row": 185,
          "column": 25
        }
      },
      {
        "kind": "assignment_expression",
        "name": "query",
        "text": "result = rule",
        "start": {
          "row": 185,
          "column": 11
        },
        "end": {
          "row": 185,
          "column": 24
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 185,
          "column": 11
        },
        "end": {
          "row": 185,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 185,
          "column": 20
        },
        "end": {
          "row": 185,
          "column": 24
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n          result = Seq{result, rule};\n        }",
        "start": {
          "row": 186,
          "column": 16
        },
        "end": {
          "row": 188,
          "column": 10
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "result = Seq{result, rule};",
        "start": {
          "row": 187,
          "column": 11
        },
        "end": {
          "row": 187,
          "column": 38
        }
      },
      {
        "kind": "assignment_expression",
        "name": "query",
        "text": "result = Seq{result, rule}",
        "start": {
          "row": 187,
          "column": 11
        },
        "end": {
          "row": 187,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 187,
          "column": 11
        },
        "end": {
          "row": 187,
          "column": 17
        }
      },
      {
        "kind": "compound_literal_expression",
        "name": "query",
        "text": "Seq{result, rule}",
        "start": {
          "row": 187,
          "column": 20
        },
        "end": {
          "row": 187,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 187,
          "column": 20
        },
        "end": {
          "row": 187,
          "column": 23
        }
      },
      {
        "kind": "initializer_list",
        "name": "query",
        "text": "{result, rule}",
        "start": {
          "row": 187,
          "column": 23
        },
        "end": {
          "row": 187,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 187,
          "column": 24
        },
        "end": {
          "row": 187,
          "column": 30
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 187,
          "column": 32
        },
        "end": {
          "row": 187,
          "column": 36
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result;",
        "start": {
          "row": 192,
          "column": 3
        },
        "end": {
          "row": 192,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 192,
          "column": 10
        },
        "end": {
          "row": 192,
          "column": 16
        }
      },
      {
        "kind": "comment",
        "name": "query",
        "text": "// namespace rules",
        "start": {
          "row": 195,
          "column": 4
        },
        "end": {
          "row": 195,
          "column": 22
        }
      },
      {
        "kind": "comment",
        "name": "query",
        "text": "// namespace tree_sitter",
        "start": {
          "row": 196,
          "column": 4
        },
        "end": {
          "row": 196,
          "column": 28
        }
      },
      {
        "kind": "namespace_definition",
        "name": "query",
        "text": "namespace std {\n\nsize_t hash<Symbol>::operator()(const Symbol &symbol) const {\n  auto result = hash<int>()(symbol.index);\n  hash_combine(&result, hash<int>()(symbol.type));\n  return result;\n}\n\nsize_t hash<NamedSymbol>::operator()(const NamedSymbol &symbol) const {\n  return hash<string>()(symbol.value);\n}\n\nsize_t hash<Pattern>::operator()(const Pattern &symbol) const {\n  return hash<string>()(symbol.value);\n}\n\nsize_t hash<String>::operator()(const String &symbol) const {\n  return hash<string>()(symbol.value);\n}\n\nsize_t hash<CharacterSet>::operator()(const CharacterSet &character_set) const {\n  size_t result = 0;\n  hash_combine(&result, character_set.includes_all);\n  hash_combine(&result, character_set.included_chars.size());\n  for (uint32_t c : character_set.included_chars) {\n    hash_combine(&result, c);\n  }\n  hash_combine(&result, character_set.excluded_chars.size());\n  for (uint32_t c : character_set.excluded_chars) {\n    hash_combine(&result, c);\n  }\n  return result;\n}\n\nsize_t hash<Blank>::operator()(const Blank &blank) const {\n  return 0;\n}\n\nsize_t hash<Choice>::operator()(const Choice &choice) const {\n  size_t result = 0;\n  for (const auto &element : choice.elements) {\n    symmetric_hash_combine(&result, element);\n  }\n  return result;\n}\n\nsize_t hash<Repeat>::operator()(const Repeat &repeat) const {\n  size_t result = 0;\n  hash_combine(&result, *repeat.rule);\n  return result;\n}\n\nsize_t hash<Seq>::operator()(const Seq &seq) const {\n  size_t result = 0;\n  hash_combine(&result, *seq.left);\n  hash_combine(&result, *seq.right);\n  return result;\n}\n\nsize_t hash<Metadata>::operator()(const Metadata &metadata) const {\n  size_t result = 0;\n  hash_combine(&result, *metadata.rule);\n  hash_combine(&result, metadata.params.precedence);\n  hash_combine<int>(&result, metadata.params.associativity);\n  hash_combine(&result, metadata.params.has_precedence);\n  hash_combine(&result, metadata.params.has_associativity);\n  hash_combine(&result, metadata.params.is_token);\n  hash_combine(&result, metadata.params.is_string);\n  hash_combine(&result, metadata.params.is_active);\n  hash_combine(&result, metadata.params.is_main_token);\n  return result;\n}\n\nsize_t hash<Rule>::operator()(const Rule &rule) const {\n  size_t result = hash<int>()(rule.type);\n  switch (rule.type) {\n    case Rule::CharacterSetType: return result ^ hash<CharacterSet>()(rule.character_set_);\n    case Rule::StringType: return result ^ hash<String>()(rule.string_);\n    case Rule::PatternType: return result ^ hash<Pattern>()(rule.pattern_);\n    case Rule::NamedSymbolType: return result ^ hash<NamedSymbol>()(rule.named_symbol_);\n    case Rule::SymbolType: return result ^ hash<Symbol>()(rule.symbol_);\n    case Rule::ChoiceType: return result ^ hash<Choice>()(rule.choice_);\n    case Rule::MetadataType: return result ^ hash<Metadata>()(rule.metadata_);\n    case Rule::RepeatType: return result ^ hash<Repeat>()(rule.repeat_);\n    case Rule::SeqType: return result ^ hash<Seq>()(rule.seq_);\n    default: return result ^ hash<Blank>()(rule.blank_);\n  }\n}\n\n}",
        "start": {
          "row": 198,
          "column": 1
        },
        "end": {
          "row": 287,
          "column": 2
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "std",
        "start": {
          "row": 198,
          "column": 11
        },
        "end": {
          "row": 198,
          "column": 14
        }
      },
      {
        "kind": "declaration_list",
        "name": "query",
        "text": "{\n\nsize_t hash<Symbol>::operator()(const Symbol &symbol) const {\n  auto result = hash<int>()(symbol.index);\n  hash_combine(&result, hash<int>()(symbol.type));\n  return result;\n}\n\nsize_t hash<NamedSymbol>::operator()(const NamedSymbol &symbol) const {\n  return hash<string>()(symbol.value);\n}\n\nsize_t hash<Pattern>::operator()(const Pattern &symbol) const {\n  return hash<string>()(symbol.value);\n}\n\nsize_t hash<String>::operator()(const String &symbol) const {\n  return hash<string>()(symbol.value);\n}\n\nsize_t hash<CharacterSet>::operator()(const CharacterSet &character_set) const {\n  size_t result = 0;\n  hash_combine(&result, character_set.includes_all);\n  hash_combine(&result, character_set.included_chars.size());\n  for (uint32_t c : character_set.included_chars) {\n    hash_combine(&result, c);\n  }\n  hash_combine(&result, character_set.excluded_chars.size());\n  for (uint32_t c : character_set.excluded_chars) {\n    hash_combine(&result, c);\n  }\n  return result;\n}\n\nsize_t hash<Blank>::operator()(const Blank &blank) const {\n  return 0;\n}\n\nsize_t hash<Choice>::operator()(const Choice &choice) const {\n  size_t result = 0;\n  for (const auto &element : choice.elements) {\n    symmetric_hash_combine(&result, element);\n  }\n  return result;\n}\n\nsize_t hash<Repeat>::operator()(const Repeat &repeat) const {\n  size_t result = 0;\n  hash_combine(&result, *repeat.rule);\n  return result;\n}\n\nsize_t hash<Seq>::operator()(const Seq &seq) const {\n  size_t result = 0;\n  hash_combine(&result, *seq.left);\n  hash_combine(&result, *seq.right);\n  return result;\n}\n\nsize_t hash<Metadata>::operator()(const Metadata &metadata) const {\n  size_t result = 0;\n  hash_combine(&result, *metadata.rule);\n  hash_combine(&result, metadata.params.precedence);\n  hash_combine<int>(&result, metadata.params.associativity);\n  hash_combine(&result, metadata.params.has_precedence);\n  hash_combine(&result, metadata.params.has_associativity);\n  hash_combine(&result, metadata.params.is_token);\n  hash_combine(&result, metadata.params.is_string);\n  hash_combine(&result, metadata.params.is_active);\n  hash_combine(&result, metadata.params.is_main_token);\n  return result;\n}\n\nsize_t hash<Rule>::operator()(const Rule &rule) const {\n  size_t result = hash<int>()(rule.type);\n  switch (rule.type) {\n    case Rule::CharacterSetType: return result ^ hash<CharacterSet>()(rule.character_set_);\n    case Rule::StringType: return result ^ hash<String>()(rule.string_);\n    case Rule::PatternType: return result ^ hash<Pattern>()(rule.pattern_);\n    case Rule::NamedSymbolType: return result ^ hash<NamedSymbol>()(rule.named_symbol_);\n    case Rule::SymbolType: return result ^ hash<Symbol>()(rule.symbol_);\n    case Rule::ChoiceType: return result ^ hash<Choice>()(rule.choice_);\n    case Rule::MetadataType: return result ^ hash<Metadata>()(rule.metadata_);\n    case Rule::RepeatType: return result ^ hash<Repeat>()(rule.repeat_);\n    case Rule::SeqType: return result ^ hash<Seq>()(rule.seq_);\n    default: return result ^ hash<Blank>()(rule.blank_);\n  }\n}\n\n}",
        "start": {
          "row": 198,
          "column": 15
        },
        "end": {
          "row": 287,
          "column": 2
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<Symbol>::operator()(const Symbol &symbol) const {\n  auto result = hash<int>()(symbol.index);\n  hash_combine(&result, hash<int>()(symbol.type));\n  return result;\n}",
        "start": {
          "row": 200,
          "column": 1
        },
        "end": {
          "row": 204,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 200,
          "column": 1
        },
        "end": {
          "row": 200,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<Symbol>::operator()(const Symbol &symbol) const",
        "start": {
          "row": 200,
          "column": 8
        },
        "end": {
          "row": 200,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<Symbol>::operator()",
        "start": {
          "row": 200,
          "column": 8
        },
        "end": {
          "row": 200,
          "column": 32
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<Symbol>",
        "start": {
          "row": 200,
          "column": 8
        },
        "end": {
          "row": 200,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 200,
          "column": 8
        },
        "end": {
          "row": 200,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Symbol>",
        "start": {
          "row": 200,
          "column": 12
        },
        "end": {
          "row": 200,
          "column": 20
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 200,
          "column": 13
        },
        "end": {
          "row": 200,
          "column": 19
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 200,
          "column": 13
        },
        "end": {
          "row": 200,
          "column": 19
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 200,
          "column": 22
        },
        "end": {
          "row": 200,
          "column": 32
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Symbol &symbol)",
        "start": {
          "row": 200,
          "column": 32
        },
        "end": {
          "row": 200,
          "column": 54
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Symbol &symbol",
        "start": {
          "row": 200,
          "column": 33
        },
        "end": {
          "row": 200,
          "column": 53
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 200,
          "column": 33
        },
        "end": {
          "row": 200,
          "column": 38
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 200,
          "column": 39
        },
        "end": {
          "row": 200,
          "column": 45
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&symbol",
        "start": {
          "row": 200,
          "column": 46
        },
        "end": {
          "row": 200,
          "column": 53
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol",
        "start": {
          "row": 200,
          "column": 47
        },
        "end": {
          "row": 200,
          "column": 53
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 200,
          "column": 55
        },
        "end": {
          "row": 200,
          "column": 60
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  auto result = hash<int>()(symbol.index);\n  hash_combine(&result, hash<int>()(symbol.type));\n  return result;\n}",
        "start": {
          "row": 200,
          "column": 61
        },
        "end": {
          "row": 204,
          "column": 2
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "auto result = hash<int>()(symbol.index);",
        "start": {
          "row": 201,
          "column": 3
        },
        "end": {
          "row": 201,
          "column": 43
        }
      },
      {
        "kind": "auto",
        "name": "query",
        "text": "auto",
        "start": {
          "row": 201,
          "column": 3
        },
        "end": {
          "row": 201,
          "column": 7
        }
      },
      {
        "kind": "init_declarator",
        "name": "query",
        "text": "result = hash<int>()(symbol.index)",
        "start": {
          "row": 201,
          "column": 8
        },
        "end": {
          "row": 201,
          "column": 42
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 201,
          "column": 8
        },
        "end": {
          "row": 201,
          "column": 14
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<int>()(symbol.index)",
        "start": {
          "row": 201,
          "column": 17
        },
        "end": {
          "row": 201,
          "column": 42
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<int>()",
        "start": {
          "row": 201,
          "column": 17
        },
        "end": {
          "row": 201,
          "column": 28
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<int>",
        "start": {
          "row": 201,
          "column": 17
        },
        "end": {
          "row": 201,
          "column": 26
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 201,
          "column": 17
        },
        "end": {
          "row": 201,
          "column": 21
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<int>",
        "start": {
          "row": 201,
          "column": 21
        },
        "end": {
          "row": 201,
          "column": 26
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "int",
        "start": {
          "row": 201,
          "column": 22
        },
        "end": {
          "row": 201,
          "column": 25
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "int",
        "start": {
          "row": 201,
          "column": 22
        },
        "end": {
          "row": 201,
          "column": 25
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 201,
          "column": 26
        },
        "end": {
          "row": 201,
          "column": 28
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(symbol.index)",
        "start": {
          "row": 201,
          "column": 28
        },
        "end": {
          "row": 201,
          "column": 42
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "symbol.index",
        "start": {
          "row": 201,
          "column": 29
        },
        "end": {
          "row": 201,
          "column": 41
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol",
        "start": {
          "row": 201,
          "column": 29
        },
        "end": {
          "row": 201,
          "column": 35
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "index",
        "start": {
          "row": 201,
          "column": 36
        },
        "end": {
          "row": 201,
          "column": 41
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, hash<int>()(symbol.type));",
        "start": {
          "row": 202,
          "column": 3
        },
        "end": {
          "row": 202,
          "column": 51
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, hash<int>()(symbol.type))",
        "start": {
          "row": 202,
          "column": 3
        },
        "end": {
          "row": 202,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 202,
          "column": 3
        },
        "end": {
          "row": 202,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, hash<int>()(symbol.type))",
        "start": {
          "row": 202,
          "column": 15
        },
        "end": {
          "row": 202,
          "column": 50
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 202,
          "column": 16
        },
        "end": {
          "row": 202,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 202,
          "column": 17
        },
        "end": {
          "row": 202,
          "column": 23
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<int>()(symbol.type)",
        "start": {
          "row": 202,
          "column": 25
        },
        "end": {
          "row": 202,
          "column": 49
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<int>()",
        "start": {
          "row": 202,
          "column": 25
        },
        "end": {
          "row": 202,
          "column": 36
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<int>",
        "start": {
          "row": 202,
          "column": 25
        },
        "end": {
          "row": 202,
          "column": 34
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 202,
          "column": 25
        },
        "end": {
          "row": 202,
          "column": 29
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<int>",
        "start": {
          "row": 202,
          "column": 29
        },
        "end": {
          "row": 202,
          "column": 34
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "int",
        "start": {
          "row": 202,
          "column": 30
        },
        "end": {
          "row": 202,
          "column": 33
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "int",
        "start": {
          "row": 202,
          "column": 30
        },
        "end": {
          "row": 202,
          "column": 33
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 202,
          "column": 34
        },
        "end": {
          "row": 202,
          "column": 36
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(symbol.type)",
        "start": {
          "row": 202,
          "column": 36
        },
        "end": {
          "row": 202,
          "column": 49
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "symbol.type",
        "start": {
          "row": 202,
          "column": 37
        },
        "end": {
          "row": 202,
          "column": 48
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol",
        "start": {
          "row": 202,
          "column": 37
        },
        "end": {
          "row": 202,
          "column": 43
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 202,
          "column": 44
        },
        "end": {
          "row": 202,
          "column": 48
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result;",
        "start": {
          "row": 203,
          "column": 3
        },
        "end": {
          "row": 203,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 203,
          "column": 10
        },
        "end": {
          "row": 203,
          "column": 16
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<NamedSymbol>::operator()(const NamedSymbol &symbol) const {\n  return hash<string>()(symbol.value);\n}",
        "start": {
          "row": 206,
          "column": 1
        },
        "end": {
          "row": 208,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 206,
          "column": 1
        },
        "end": {
          "row": 206,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<NamedSymbol>::operator()(const NamedSymbol &symbol) const",
        "start": {
          "row": 206,
          "column": 8
        },
        "end": {
          "row": 206,
          "column": 70
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<NamedSymbol>::operator()",
        "start": {
          "row": 206,
          "column": 8
        },
        "end": {
          "row": 206,
          "column": 37
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<NamedSymbol>",
        "start": {
          "row": 206,
          "column": 8
        },
        "end": {
          "row": 206,
          "column": 25
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 206,
          "column": 8
        },
        "end": {
          "row": 206,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<NamedSymbol>",
        "start": {
          "row": 206,
          "column": 12
        },
        "end": {
          "row": 206,
          "column": 25
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "NamedSymbol",
        "start": {
          "row": 206,
          "column": 13
        },
        "end": {
          "row": 206,
          "column": 24
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "NamedSymbol",
        "start": {
          "row": 206,
          "column": 13
        },
        "end": {
          "row": 206,
          "column": 24
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 206,
          "column": 27
        },
        "end": {
          "row": 206,
          "column": 37
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const NamedSymbol &symbol)",
        "start": {
          "row": 206,
          "column": 37
        },
        "end": {
          "row": 206,
          "column": 64
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const NamedSymbol &symbol",
        "start": {
          "row": 206,
          "column": 38
        },
        "end": {
          "row": 206,
          "column": 63
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 206,
          "column": 38
        },
        "end": {
          "row": 206,
          "column": 43
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "NamedSymbol",
        "start": {
          "row": 206,
          "column": 44
        },
        "end": {
          "row": 206,
          "column": 55
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&symbol",
        "start": {
          "row": 206,
          "column": 56
        },
        "end": {
          "row": 206,
          "column": 63
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol",
        "start": {
          "row": 206,
          "column": 57
        },
        "end": {
          "row": 206,
          "column": 63
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 206,
          "column": 65
        },
        "end": {
          "row": 206,
          "column": 70
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  return hash<string>()(symbol.value);\n}",
        "start": {
          "row": 206,
          "column": 71
        },
        "end": {
          "row": 208,
          "column": 2
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return hash<string>()(symbol.value);",
        "start": {
          "row": 207,
          "column": 3
        },
        "end": {
          "row": 207,
          "column": 39
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<string>()(symbol.value)",
        "start": {
          "row": 207,
          "column": 10
        },
        "end": {
          "row": 207,
          "column": 38
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<string>()",
        "start": {
          "row": 207,
          "column": 10
        },
        "end": {
          "row": 207,
          "column": 24
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<string>",
        "start": {
          "row": 207,
          "column": 10
        },
        "end": {
          "row": 207,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 207,
          "column": 10
        },
        "end": {
          "row": 207,
          "column": 14
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<string>",
        "start": {
          "row": 207,
          "column": 14
        },
        "end": {
          "row": 207,
          "column": 22
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "string",
        "start": {
          "row": 207,
          "column": 15
        },
        "end": {
          "row": 207,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "string",
        "start": {
          "row": 207,
          "column": 15
        },
        "end": {
          "row": 207,
          "column": 21
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 207,
          "column": 22
        },
        "end": {
          "row": 207,
          "column": 24
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(symbol.value)",
        "start": {
          "row": 207,
          "column": 24
        },
        "end": {
          "row": 207,
          "column": 38
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "symbol.value",
        "start": {
          "row": 207,
          "column": 25
        },
        "end": {
          "row": 207,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol",
        "start": {
          "row": 207,
          "column": 25
        },
        "end": {
          "row": 207,
          "column": 31
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "value",
        "start": {
          "row": 207,
          "column": 32
        },
        "end": {
          "row": 207,
          "column": 37
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<Pattern>::operator()(const Pattern &symbol) const {\n  return hash<string>()(symbol.value);\n}",
        "start": {
          "row": 210,
          "column": 1
        },
        "end": {
          "row": 212,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 210,
          "column": 1
        },
        "end": {
          "row": 210,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<Pattern>::operator()(const Pattern &symbol) const",
        "start": {
          "row": 210,
          "column": 8
        },
        "end": {
          "row": 210,
          "column": 62
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<Pattern>::operator()",
        "start": {
          "row": 210,
          "column": 8
        },
        "end": {
          "row": 210,
          "column": 33
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<Pattern>",
        "start": {
          "row": 210,
          "column": 8
        },
        "end": {
          "row": 210,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 210,
          "column": 8
        },
        "end": {
          "row": 210,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Pattern>",
        "start": {
          "row": 210,
          "column": 12
        },
        "end": {
          "row": 210,
          "column": 21
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Pattern",
        "start": {
          "row": 210,
          "column": 13
        },
        "end": {
          "row": 210,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Pattern",
        "start": {
          "row": 210,
          "column": 13
        },
        "end": {
          "row": 210,
          "column": 20
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 210,
          "column": 23
        },
        "end": {
          "row": 210,
          "column": 33
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Pattern &symbol)",
        "start": {
          "row": 210,
          "column": 33
        },
        "end": {
          "row": 210,
          "column": 56
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Pattern &symbol",
        "start": {
          "row": 210,
          "column": 34
        },
        "end": {
          "row": 210,
          "column": 55
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 210,
          "column": 34
        },
        "end": {
          "row": 210,
          "column": 39
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Pattern",
        "start": {
          "row": 210,
          "column": 40
        },
        "end": {
          "row": 210,
          "column": 47
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&symbol",
        "start": {
          "row": 210,
          "column": 48
        },
        "end": {
          "row": 210,
          "column": 55
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol",
        "start": {
          "row": 210,
          "column": 49
        },
        "end": {
          "row": 210,
          "column": 55
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 210,
          "column": 57
        },
        "end": {
          "row": 210,
          "column": 62
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  return hash<string>()(symbol.value);\n}",
        "start": {
          "row": 210,
          "column": 63
        },
        "end": {
          "row": 212,
          "column": 2
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return hash<string>()(symbol.value);",
        "start": {
          "row": 211,
          "column": 3
        },
        "end": {
          "row": 211,
          "column": 39
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<string>()(symbol.value)",
        "start": {
          "row": 211,
          "column": 10
        },
        "end": {
          "row": 211,
          "column": 38
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<string>()",
        "start": {
          "row": 211,
          "column": 10
        },
        "end": {
          "row": 211,
          "column": 24
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<string>",
        "start": {
          "row": 211,
          "column": 10
        },
        "end": {
          "row": 211,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 211,
          "column": 10
        },
        "end": {
          "row": 211,
          "column": 14
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<string>",
        "start": {
          "row": 211,
          "column": 14
        },
        "end": {
          "row": 211,
          "column": 22
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "string",
        "start": {
          "row": 211,
          "column": 15
        },
        "end": {
          "row": 211,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "string",
        "start": {
          "row": 211,
          "column": 15
        },
        "end": {
          "row": 211,
          "column": 21
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 211,
          "column": 22
        },
        "end": {
          "row": 211,
          "column": 24
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(symbol.value)",
        "start": {
          "row": 211,
          "column": 24
        },
        "end": {
          "row": 211,
          "column": 38
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "symbol.value",
        "start": {
          "row": 211,
          "column": 25
        },
        "end": {
          "row": 211,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol",
        "start": {
          "row": 211,
          "column": 25
        },
        "end": {
          "row": 211,
          "column": 31
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "value",
        "start": {
          "row": 211,
          "column": 32
        },
        "end": {
          "row": 211,
          "column": 37
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<String>::operator()(const String &symbol) const {\n  return hash<string>()(symbol.value);\n}",
        "start": {
          "row": 214,
          "column": 1
        },
        "end": {
          "row": 216,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 214,
          "column": 1
        },
        "end": {
          "row": 214,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<String>::operator()(const String &symbol) const",
        "start": {
          "row": 214,
          "column": 8
        },
        "end": {
          "row": 214,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<String>::operator()",
        "start": {
          "row": 214,
          "column": 8
        },
        "end": {
          "row": 214,
          "column": 32
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<String>",
        "start": {
          "row": 214,
          "column": 8
        },
        "end": {
          "row": 214,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 214,
          "column": 8
        },
        "end": {
          "row": 214,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<String>",
        "start": {
          "row": 214,
          "column": 12
        },
        "end": {
          "row": 214,
          "column": 20
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "String",
        "start": {
          "row": 214,
          "column": 13
        },
        "end": {
          "row": 214,
          "column": 19
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "String",
        "start": {
          "row": 214,
          "column": 13
        },
        "end": {
          "row": 214,
          "column": 19
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 214,
          "column": 22
        },
        "end": {
          "row": 214,
          "column": 32
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const String &symbol)",
        "start": {
          "row": 214,
          "column": 32
        },
        "end": {
          "row": 214,
          "column": 54
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const String &symbol",
        "start": {
          "row": 214,
          "column": 33
        },
        "end": {
          "row": 214,
          "column": 53
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 214,
          "column": 33
        },
        "end": {
          "row": 214,
          "column": 38
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "String",
        "start": {
          "row": 214,
          "column": 39
        },
        "end": {
          "row": 214,
          "column": 45
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&symbol",
        "start": {
          "row": 214,
          "column": 46
        },
        "end": {
          "row": 214,
          "column": 53
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol",
        "start": {
          "row": 214,
          "column": 47
        },
        "end": {
          "row": 214,
          "column": 53
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 214,
          "column": 55
        },
        "end": {
          "row": 214,
          "column": 60
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  return hash<string>()(symbol.value);\n}",
        "start": {
          "row": 214,
          "column": 61
        },
        "end": {
          "row": 216,
          "column": 2
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return hash<string>()(symbol.value);",
        "start": {
          "row": 215,
          "column": 3
        },
        "end": {
          "row": 215,
          "column": 39
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<string>()(symbol.value)",
        "start": {
          "row": 215,
          "column": 10
        },
        "end": {
          "row": 215,
          "column": 38
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<string>()",
        "start": {
          "row": 215,
          "column": 10
        },
        "end": {
          "row": 215,
          "column": 24
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<string>",
        "start": {
          "row": 215,
          "column": 10
        },
        "end": {
          "row": 215,
          "column": 22
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 215,
          "column": 10
        },
        "end": {
          "row": 215,
          "column": 14
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<string>",
        "start": {
          "row": 215,
          "column": 14
        },
        "end": {
          "row": 215,
          "column": 22
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "string",
        "start": {
          "row": 215,
          "column": 15
        },
        "end": {
          "row": 215,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "string",
        "start": {
          "row": 215,
          "column": 15
        },
        "end": {
          "row": 215,
          "column": 21
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 215,
          "column": 22
        },
        "end": {
          "row": 215,
          "column": 24
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(symbol.value)",
        "start": {
          "row": 215,
          "column": 24
        },
        "end": {
          "row": 215,
          "column": 38
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "symbol.value",
        "start": {
          "row": 215,
          "column": 25
        },
        "end": {
          "row": 215,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symbol",
        "start": {
          "row": 215,
          "column": 25
        },
        "end": {
          "row": 215,
          "column": 31
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "value",
        "start": {
          "row": 215,
          "column": 32
        },
        "end": {
          "row": 215,
          "column": 37
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<CharacterSet>::operator()(const CharacterSet &character_set) const {\n  size_t result = 0;\n  hash_combine(&result, character_set.includes_all);\n  hash_combine(&result, character_set.included_chars.size());\n  for (uint32_t c : character_set.included_chars) {\n    hash_combine(&result, c);\n  }\n  hash_combine(&result, character_set.excluded_chars.size());\n  for (uint32_t c : character_set.excluded_chars) {\n    hash_combine(&result, c);\n  }\n  return result;\n}",
        "start": {
          "row": 218,
          "column": 1
        },
        "end": {
          "row": 230,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 218,
          "column": 1
        },
        "end": {
          "row": 218,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<CharacterSet>::operator()(const CharacterSet &character_set) const",
        "start": {
          "row": 218,
          "column": 8
        },
        "end": {
          "row": 218,
          "column": 79
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<CharacterSet>::operator()",
        "start": {
          "row": 218,
          "column": 8
        },
        "end": {
          "row": 218,
          "column": 38
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<CharacterSet>",
        "start": {
          "row": 218,
          "column": 8
        },
        "end": {
          "row": 218,
          "column": 26
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 218,
          "column": 8
        },
        "end": {
          "row": 218,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<CharacterSet>",
        "start": {
          "row": 218,
          "column": 12
        },
        "end": {
          "row": 218,
          "column": 26
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "CharacterSet",
        "start": {
          "row": 218,
          "column": 13
        },
        "end": {
          "row": 218,
          "column": 25
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "CharacterSet",
        "start": {
          "row": 218,
          "column": 13
        },
        "end": {
          "row": 218,
          "column": 25
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 218,
          "column": 28
        },
        "end": {
          "row": 218,
          "column": 38
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const CharacterSet &character_set)",
        "start": {
          "row": 218,
          "column": 38
        },
        "end": {
          "row": 218,
          "column": 73
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const CharacterSet &character_set",
        "start": {
          "row": 218,
          "column": 39
        },
        "end": {
          "row": 218,
          "column": 72
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 218,
          "column": 39
        },
        "end": {
          "row": 218,
          "column": 44
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "CharacterSet",
        "start": {
          "row": 218,
          "column": 45
        },
        "end": {
          "row": 218,
          "column": 57
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&character_set",
        "start": {
          "row": 218,
          "column": 58
        },
        "end": {
          "row": 218,
          "column": 72
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "character_set",
        "start": {
          "row": 218,
          "column": 59
        },
        "end": {
          "row": 218,
          "column": 72
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 218,
          "column": 74
        },
        "end": {
          "row": 218,
          "column": 79
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  size_t result = 0;\n  hash_combine(&result, character_set.includes_all);\n  hash_combine(&result, character_set.included_chars.size());\n  for (uint32_t c : character_set.included_chars) {\n    hash_combine(&result, c);\n  }\n  hash_combine(&result, character_set.excluded_chars.size());\n  for (uint32_t c : character_set.excluded_chars) {\n    hash_combine(&result, c);\n  }\n  return result;\n}",
        "start": {
          "row": 218,
          "column": 80
        },
        "end": {
          "row": 230,
          "column": 2
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "size_t result = 0;",
        "start": {
          "row": 219,
          "column": 3
        },
        "end": {
          "row": 219,
          "column": 21
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 219,
          "column": 3
        },
        "end": {
          "row": 219,
          "column": 9
        }
      },
      {
        "kind": "init_declarator",
        "name": "query",
        "text": "result = 0",
        "start": {
          "row": 219,
          "column": 10
        },
        "end": {
          "row": 219,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 219,
          "column": 10
        },
        "end": {
          "row": 219,
          "column": 16
        }
      },
      {
        "kind": "number_literal",
        "name": "query",
        "text": "0",
        "start": {
          "row": 219,
          "column": 19
        },
        "end": {
          "row": 219,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, character_set.includes_all);",
        "start": {
          "row": 220,
          "column": 3
        },
        "end": {
          "row": 220,
          "column": 53
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, character_set.includes_all)",
        "start": {
          "row": 220,
          "column": 3
        },
        "end": {
          "row": 220,
          "column": 52
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 220,
          "column": 3
        },
        "end": {
          "row": 220,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, character_set.includes_all)",
        "start": {
          "row": 220,
          "column": 15
        },
        "end": {
          "row": 220,
          "column": 52
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 220,
          "column": 16
        },
        "end": {
          "row": 220,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 220,
          "column": 17
        },
        "end": {
          "row": 220,
          "column": 23
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "character_set.includes_all",
        "start": {
          "row": 220,
          "column": 25
        },
        "end": {
          "row": 220,
          "column": 51
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "character_set",
        "start": {
          "row": 220,
          "column": 25
        },
        "end": {
          "row": 220,
          "column": 38
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "includes_all",
        "start": {
          "row": 220,
          "column": 39
        },
        "end": {
          "row": 220,
          "column": 51
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, character_set.included_chars.size());",
        "start": {
          "row": 221,
          "column": 3
        },
        "end": {
          "row": 221,
          "column": 62
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, character_set.included_chars.size())",
        "start": {
          "row": 221,
          "column": 3
        },
        "end": {
          "row": 221,
          "column": 61
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 221,
          "column": 3
        },
        "end": {
          "row": 221,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, character_set.included_chars.size())",
        "start": {
          "row": 221,
          "column": 15
        },
        "end": {
          "row": 221,
          "column": 61
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 221,
          "column": 16
        },
        "end": {
          "row": 221,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 221,
          "column": 17
        },
        "end": {
          "row": 221,
          "column": 23
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "character_set.included_chars.size()",
        "start": {
          "row": 221,
          "column": 25
        },
        "end": {
          "row": 221,
          "column": 60
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "character_set.included_chars.size",
        "start": {
          "row": 221,
          "column": 25
        },
        "end": {
          "row": 221,
          "column": 58
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "character_set.included_chars",
        "start": {
          "row": 221,
          "column": 25
        },
        "end": {
          "row": 221,
          "column": 53
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "character_set",
        "start": {
          "row": 221,
          "column": 25
        },
        "end": {
          "row": 221,
          "column": 38
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "included_chars",
        "start": {
          "row": 221,
          "column": 39
        },
        "end": {
          "row": 221,
          "column": 53
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "size",
        "start": {
          "row": 221,
          "column": 54
        },
        "end": {
          "row": 221,
          "column": 58
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 221,
          "column": 58
        },
        "end": {
          "row": 221,
          "column": 60
        }
      },
      {
        "kind": "for_range_loop",
        "name": "query",
        "text": "for (uint32_t c : character_set.included_chars) {\n    hash_combine(&result, c);\n  }",
        "start": {
          "row": 222,
          "column": 3
        },
        "end": {
          "row": 224,
          "column": 4
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "uint32_t",
        "start": {
          "row": 222,
          "column": 8
        },
        "end": {
          "row": 222,
          "column": 16
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "c",
        "start": {
          "row": 222,
          "column": 17
        },
        "end": {
          "row": 222,
          "column": 18
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "character_set.included_chars",
        "start": {
          "row": 222,
          "column": 21
        },
        "end": {
          "row": 222,
          "column": 49
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "character_set",
        "start": {
          "row": 222,
          "column": 21
        },
        "end": {
          "row": 222,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "included_chars",
        "start": {
          "row": 222,
          "column": 35
        },
        "end": {
          "row": 222,
          "column": 49
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    hash_combine(&result, c);\n  }",
        "start": {
          "row": 222,
          "column": 51
        },
        "end": {
          "row": 224,
          "column": 4
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, c);",
        "start": {
          "row": 223,
          "column": 5
        },
        "end": {
          "row": 223,
          "column": 30
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, c)",
        "start": {
          "row": 223,
          "column": 5
        },
        "end": {
          "row": 223,
          "column": 29
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 223,
          "column": 5
        },
        "end": {
          "row": 223,
          "column": 17
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, c)",
        "start": {
          "row": 223,
          "column": 17
        },
        "end": {
          "row": 223,
          "column": 29
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 223,
          "column": 18
        },
        "end": {
          "row": 223,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 223,
          "column": 19
        },
        "end": {
          "row": 223,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "c",
        "start": {
          "row": 223,
          "column": 27
        },
        "end": {
          "row": 223,
          "column": 28
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, character_set.excluded_chars.size());",
        "start": {
          "row": 225,
          "column": 3
        },
        "end": {
          "row": 225,
          "column": 62
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, character_set.excluded_chars.size())",
        "start": {
          "row": 225,
          "column": 3
        },
        "end": {
          "row": 225,
          "column": 61
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 225,
          "column": 3
        },
        "end": {
          "row": 225,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, character_set.excluded_chars.size())",
        "start": {
          "row": 225,
          "column": 15
        },
        "end": {
          "row": 225,
          "column": 61
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 225,
          "column": 16
        },
        "end": {
          "row": 225,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 225,
          "column": 17
        },
        "end": {
          "row": 225,
          "column": 23
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "character_set.excluded_chars.size()",
        "start": {
          "row": 225,
          "column": 25
        },
        "end": {
          "row": 225,
          "column": 60
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "character_set.excluded_chars.size",
        "start": {
          "row": 225,
          "column": 25
        },
        "end": {
          "row": 225,
          "column": 58
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "character_set.excluded_chars",
        "start": {
          "row": 225,
          "column": 25
        },
        "end": {
          "row": 225,
          "column": 53
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "character_set",
        "start": {
          "row": 225,
          "column": 25
        },
        "end": {
          "row": 225,
          "column": 38
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "excluded_chars",
        "start": {
          "row": 225,
          "column": 39
        },
        "end": {
          "row": 225,
          "column": 53
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "size",
        "start": {
          "row": 225,
          "column": 54
        },
        "end": {
          "row": 225,
          "column": 58
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 225,
          "column": 58
        },
        "end": {
          "row": 225,
          "column": 60
        }
      },
      {
        "kind": "for_range_loop",
        "name": "query",
        "text": "for (uint32_t c : character_set.excluded_chars) {\n    hash_combine(&result, c);\n  }",
        "start": {
          "row": 226,
          "column": 3
        },
        "end": {
          "row": 228,
          "column": 4
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "uint32_t",
        "start": {
          "row": 226,
          "column": 8
        },
        "end": {
          "row": 226,
          "column": 16
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "c",
        "start": {
          "row": 226,
          "column": 17
        },
        "end": {
          "row": 226,
          "column": 18
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "character_set.excluded_chars",
        "start": {
          "row": 226,
          "column": 21
        },
        "end": {
          "row": 226,
          "column": 49
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "character_set",
        "start": {
          "row": 226,
          "column": 21
        },
        "end": {
          "row": 226,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "excluded_chars",
        "start": {
          "row": 226,
          "column": 35
        },
        "end": {
          "row": 226,
          "column": 49
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    hash_combine(&result, c);\n  }",
        "start": {
          "row": 226,
          "column": 51
        },
        "end": {
          "row": 228,
          "column": 4
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, c);",
        "start": {
          "row": 227,
          "column": 5
        },
        "end": {
          "row": 227,
          "column": 30
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, c)",
        "start": {
          "row": 227,
          "column": 5
        },
        "end": {
          "row": 227,
          "column": 29
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 227,
          "column": 5
        },
        "end": {
          "row": 227,
          "column": 17
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, c)",
        "start": {
          "row": 227,
          "column": 17
        },
        "end": {
          "row": 227,
          "column": 29
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 227,
          "column": 18
        },
        "end": {
          "row": 227,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 227,
          "column": 19
        },
        "end": {
          "row": 227,
          "column": 25
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "c",
        "start": {
          "row": 227,
          "column": 27
        },
        "end": {
          "row": 227,
          "column": 28
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result;",
        "start": {
          "row": 229,
          "column": 3
        },
        "end": {
          "row": 229,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 229,
          "column": 10
        },
        "end": {
          "row": 229,
          "column": 16
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<Blank>::operator()(const Blank &blank) const {\n  return 0;\n}",
        "start": {
          "row": 232,
          "column": 1
        },
        "end": {
          "row": 234,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 232,
          "column": 1
        },
        "end": {
          "row": 232,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<Blank>::operator()(const Blank &blank) const",
        "start": {
          "row": 232,
          "column": 8
        },
        "end": {
          "row": 232,
          "column": 57
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<Blank>::operator()",
        "start": {
          "row": 232,
          "column": 8
        },
        "end": {
          "row": 232,
          "column": 31
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<Blank>",
        "start": {
          "row": 232,
          "column": 8
        },
        "end": {
          "row": 232,
          "column": 19
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 232,
          "column": 8
        },
        "end": {
          "row": 232,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Blank>",
        "start": {
          "row": 232,
          "column": 12
        },
        "end": {
          "row": 232,
          "column": 19
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 232,
          "column": 13
        },
        "end": {
          "row": 232,
          "column": 18
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 232,
          "column": 13
        },
        "end": {
          "row": 232,
          "column": 18
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 232,
          "column": 21
        },
        "end": {
          "row": 232,
          "column": 31
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Blank &blank)",
        "start": {
          "row": 232,
          "column": 31
        },
        "end": {
          "row": 232,
          "column": 51
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Blank &blank",
        "start": {
          "row": 232,
          "column": 32
        },
        "end": {
          "row": 232,
          "column": 50
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 232,
          "column": 32
        },
        "end": {
          "row": 232,
          "column": 37
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 232,
          "column": 38
        },
        "end": {
          "row": 232,
          "column": 43
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&blank",
        "start": {
          "row": 232,
          "column": 44
        },
        "end": {
          "row": 232,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "blank",
        "start": {
          "row": 232,
          "column": 45
        },
        "end": {
          "row": 232,
          "column": 50
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 232,
          "column": 52
        },
        "end": {
          "row": 232,
          "column": 57
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  return 0;\n}",
        "start": {
          "row": 232,
          "column": 58
        },
        "end": {
          "row": 234,
          "column": 2
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return 0;",
        "start": {
          "row": 233,
          "column": 3
        },
        "end": {
          "row": 233,
          "column": 12
        }
      },
      {
        "kind": "number_literal",
        "name": "query",
        "text": "0",
        "start": {
          "row": 233,
          "column": 10
        },
        "end": {
          "row": 233,
          "column": 11
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<Choice>::operator()(const Choice &choice) const {\n  size_t result = 0;\n  for (const auto &element : choice.elements) {\n    symmetric_hash_combine(&result, element);\n  }\n  return result;\n}",
        "start": {
          "row": 236,
          "column": 1
        },
        "end": {
          "row": 242,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 236,
          "column": 1
        },
        "end": {
          "row": 236,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<Choice>::operator()(const Choice &choice) const",
        "start": {
          "row": 236,
          "column": 8
        },
        "end": {
          "row": 236,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<Choice>::operator()",
        "start": {
          "row": 236,
          "column": 8
        },
        "end": {
          "row": 236,
          "column": 32
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<Choice>",
        "start": {
          "row": 236,
          "column": 8
        },
        "end": {
          "row": 236,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 236,
          "column": 8
        },
        "end": {
          "row": 236,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Choice>",
        "start": {
          "row": 236,
          "column": 12
        },
        "end": {
          "row": 236,
          "column": 20
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 236,
          "column": 13
        },
        "end": {
          "row": 236,
          "column": 19
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 236,
          "column": 13
        },
        "end": {
          "row": 236,
          "column": 19
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 236,
          "column": 22
        },
        "end": {
          "row": 236,
          "column": 32
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Choice &choice)",
        "start": {
          "row": 236,
          "column": 32
        },
        "end": {
          "row": 236,
          "column": 54
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Choice &choice",
        "start": {
          "row": 236,
          "column": 33
        },
        "end": {
          "row": 236,
          "column": 53
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 236,
          "column": 33
        },
        "end": {
          "row": 236,
          "column": 38
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 236,
          "column": 39
        },
        "end": {
          "row": 236,
          "column": 45
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&choice",
        "start": {
          "row": 236,
          "column": 46
        },
        "end": {
          "row": 236,
          "column": 53
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "choice",
        "start": {
          "row": 236,
          "column": 47
        },
        "end": {
          "row": 236,
          "column": 53
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 236,
          "column": 55
        },
        "end": {
          "row": 236,
          "column": 60
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  size_t result = 0;\n  for (const auto &element : choice.elements) {\n    symmetric_hash_combine(&result, element);\n  }\n  return result;\n}",
        "start": {
          "row": 236,
          "column": 61
        },
        "end": {
          "row": 242,
          "column": 2
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "size_t result = 0;",
        "start": {
          "row": 237,
          "column": 3
        },
        "end": {
          "row": 237,
          "column": 21
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 237,
          "column": 3
        },
        "end": {
          "row": 237,
          "column": 9
        }
      },
      {
        "kind": "init_declarator",
        "name": "query",
        "text": "result = 0",
        "start": {
          "row": 237,
          "column": 10
        },
        "end": {
          "row": 237,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 237,
          "column": 10
        },
        "end": {
          "row": 237,
          "column": 16
        }
      },
      {
        "kind": "number_literal",
        "name": "query",
        "text": "0",
        "start": {
          "row": 237,
          "column": 19
        },
        "end": {
          "row": 237,
          "column": 20
        }
      },
      {
        "kind": "for_range_loop",
        "name": "query",
        "text": "for (const auto &element : choice.elements) {\n    symmetric_hash_combine(&result, element);\n  }",
        "start": {
          "row": 238,
          "column": 3
        },
        "end": {
          "row": 240,
          "column": 4
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 238,
          "column": 8
        },
        "end": {
          "row": 238,
          "column": 13
        }
      },
      {
        "kind": "auto",
        "name": "query",
        "text": "auto",
        "start": {
          "row": 238,
          "column": 14
        },
        "end": {
          "row": 238,
          "column": 18
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&element",
        "start": {
          "row": 238,
          "column": 19
        },
        "end": {
          "row": 238,
          "column": 27
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "element",
        "start": {
          "row": 238,
          "column": 20
        },
        "end": {
          "row": 238,
          "column": 27
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "choice.elements",
        "start": {
          "row": 238,
          "column": 30
        },
        "end": {
          "row": 238,
          "column": 45
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "choice",
        "start": {
          "row": 238,
          "column": 30
        },
        "end": {
          "row": 238,
          "column": 36
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "elements",
        "start": {
          "row": 238,
          "column": 37
        },
        "end": {
          "row": 238,
          "column": 45
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    symmetric_hash_combine(&result, element);\n  }",
        "start": {
          "row": 238,
          "column": 47
        },
        "end": {
          "row": 240,
          "column": 4
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "symmetric_hash_combine(&result, element);",
        "start": {
          "row": 239,
          "column": 5
        },
        "end": {
          "row": 239,
          "column": 46
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "symmetric_hash_combine(&result, element)",
        "start": {
          "row": 239,
          "column": 5
        },
        "end": {
          "row": 239,
          "column": 45
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "symmetric_hash_combine",
        "start": {
          "row": 239,
          "column": 5
        },
        "end": {
          "row": 239,
          "column": 27
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, element)",
        "start": {
          "row": 239,
          "column": 27
        },
        "end": {
          "row": 239,
          "column": 45
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 239,
          "column": 28
        },
        "end": {
          "row": 239,
          "column": 35
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 239,
          "column": 29
        },
        "end": {
          "row": 239,
          "column": 35
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "element",
        "start": {
          "row": 239,
          "column": 37
        },
        "end": {
          "row": 239,
          "column": 44
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result;",
        "start": {
          "row": 241,
          "column": 3
        },
        "end": {
          "row": 241,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 241,
          "column": 10
        },
        "end": {
          "row": 241,
          "column": 16
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<Repeat>::operator()(const Repeat &repeat) const {\n  size_t result = 0;\n  hash_combine(&result, *repeat.rule);\n  return result;\n}",
        "start": {
          "row": 244,
          "column": 1
        },
        "end": {
          "row": 248,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 244,
          "column": 1
        },
        "end": {
          "row": 244,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<Repeat>::operator()(const Repeat &repeat) const",
        "start": {
          "row": 244,
          "column": 8
        },
        "end": {
          "row": 244,
          "column": 60
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<Repeat>::operator()",
        "start": {
          "row": 244,
          "column": 8
        },
        "end": {
          "row": 244,
          "column": 32
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<Repeat>",
        "start": {
          "row": 244,
          "column": 8
        },
        "end": {
          "row": 244,
          "column": 20
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 244,
          "column": 8
        },
        "end": {
          "row": 244,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Repeat>",
        "start": {
          "row": 244,
          "column": 12
        },
        "end": {
          "row": 244,
          "column": 20
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 244,
          "column": 13
        },
        "end": {
          "row": 244,
          "column": 19
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 244,
          "column": 13
        },
        "end": {
          "row": 244,
          "column": 19
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 244,
          "column": 22
        },
        "end": {
          "row": 244,
          "column": 32
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Repeat &repeat)",
        "start": {
          "row": 244,
          "column": 32
        },
        "end": {
          "row": 244,
          "column": 54
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Repeat &repeat",
        "start": {
          "row": 244,
          "column": 33
        },
        "end": {
          "row": 244,
          "column": 53
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 244,
          "column": 33
        },
        "end": {
          "row": 244,
          "column": 38
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 244,
          "column": 39
        },
        "end": {
          "row": 244,
          "column": 45
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&repeat",
        "start": {
          "row": 244,
          "column": 46
        },
        "end": {
          "row": 244,
          "column": 53
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "repeat",
        "start": {
          "row": 244,
          "column": 47
        },
        "end": {
          "row": 244,
          "column": 53
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 244,
          "column": 55
        },
        "end": {
          "row": 244,
          "column": 60
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  size_t result = 0;\n  hash_combine(&result, *repeat.rule);\n  return result;\n}",
        "start": {
          "row": 244,
          "column": 61
        },
        "end": {
          "row": 248,
          "column": 2
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "size_t result = 0;",
        "start": {
          "row": 245,
          "column": 3
        },
        "end": {
          "row": 245,
          "column": 21
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 245,
          "column": 3
        },
        "end": {
          "row": 245,
          "column": 9
        }
      },
      {
        "kind": "init_declarator",
        "name": "query",
        "text": "result = 0",
        "start": {
          "row": 245,
          "column": 10
        },
        "end": {
          "row": 245,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 245,
          "column": 10
        },
        "end": {
          "row": 245,
          "column": 16
        }
      },
      {
        "kind": "number_literal",
        "name": "query",
        "text": "0",
        "start": {
          "row": 245,
          "column": 19
        },
        "end": {
          "row": 245,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, *repeat.rule);",
        "start": {
          "row": 246,
          "column": 3
        },
        "end": {
          "row": 246,
          "column": 39
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, *repeat.rule)",
        "start": {
          "row": 246,
          "column": 3
        },
        "end": {
          "row": 246,
          "column": 38
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 246,
          "column": 3
        },
        "end": {
          "row": 246,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, *repeat.rule)",
        "start": {
          "row": 246,
          "column": 15
        },
        "end": {
          "row": 246,
          "column": 38
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 246,
          "column": 16
        },
        "end": {
          "row": 246,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 246,
          "column": 17
        },
        "end": {
          "row": 246,
          "column": 23
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "*repeat.rule",
        "start": {
          "row": 246,
          "column": 25
        },
        "end": {
          "row": 246,
          "column": 37
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "repeat.rule",
        "start": {
          "row": 246,
          "column": 26
        },
        "end": {
          "row": 246,
          "column": 37
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "repeat",
        "start": {
          "row": 246,
          "column": 26
        },
        "end": {
          "row": 246,
          "column": 32
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 246,
          "column": 33
        },
        "end": {
          "row": 246,
          "column": 37
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result;",
        "start": {
          "row": 247,
          "column": 3
        },
        "end": {
          "row": 247,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 247,
          "column": 10
        },
        "end": {
          "row": 247,
          "column": 16
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<Seq>::operator()(const Seq &seq) const {\n  size_t result = 0;\n  hash_combine(&result, *seq.left);\n  hash_combine(&result, *seq.right);\n  return result;\n}",
        "start": {
          "row": 250,
          "column": 1
        },
        "end": {
          "row": 255,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 250,
          "column": 1
        },
        "end": {
          "row": 250,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<Seq>::operator()(const Seq &seq) const",
        "start": {
          "row": 250,
          "column": 8
        },
        "end": {
          "row": 250,
          "column": 51
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<Seq>::operator()",
        "start": {
          "row": 250,
          "column": 8
        },
        "end": {
          "row": 250,
          "column": 29
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<Seq>",
        "start": {
          "row": 250,
          "column": 8
        },
        "end": {
          "row": 250,
          "column": 17
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 250,
          "column": 8
        },
        "end": {
          "row": 250,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Seq>",
        "start": {
          "row": 250,
          "column": 12
        },
        "end": {
          "row": 250,
          "column": 17
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 250,
          "column": 13
        },
        "end": {
          "row": 250,
          "column": 16
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 250,
          "column": 13
        },
        "end": {
          "row": 250,
          "column": 16
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 250,
          "column": 19
        },
        "end": {
          "row": 250,
          "column": 29
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Seq &seq)",
        "start": {
          "row": 250,
          "column": 29
        },
        "end": {
          "row": 250,
          "column": 45
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Seq &seq",
        "start": {
          "row": 250,
          "column": 30
        },
        "end": {
          "row": 250,
          "column": 44
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 250,
          "column": 30
        },
        "end": {
          "row": 250,
          "column": 35
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 250,
          "column": 36
        },
        "end": {
          "row": 250,
          "column": 39
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&seq",
        "start": {
          "row": 250,
          "column": 40
        },
        "end": {
          "row": 250,
          "column": 44
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "seq",
        "start": {
          "row": 250,
          "column": 41
        },
        "end": {
          "row": 250,
          "column": 44
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 250,
          "column": 46
        },
        "end": {
          "row": 250,
          "column": 51
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  size_t result = 0;\n  hash_combine(&result, *seq.left);\n  hash_combine(&result, *seq.right);\n  return result;\n}",
        "start": {
          "row": 250,
          "column": 52
        },
        "end": {
          "row": 255,
          "column": 2
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "size_t result = 0;",
        "start": {
          "row": 251,
          "column": 3
        },
        "end": {
          "row": 251,
          "column": 21
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 251,
          "column": 3
        },
        "end": {
          "row": 251,
          "column": 9
        }
      },
      {
        "kind": "init_declarator",
        "name": "query",
        "text": "result = 0",
        "start": {
          "row": 251,
          "column": 10
        },
        "end": {
          "row": 251,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 251,
          "column": 10
        },
        "end": {
          "row": 251,
          "column": 16
        }
      },
      {
        "kind": "number_literal",
        "name": "query",
        "text": "0",
        "start": {
          "row": 251,
          "column": 19
        },
        "end": {
          "row": 251,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, *seq.left);",
        "start": {
          "row": 252,
          "column": 3
        },
        "end": {
          "row": 252,
          "column": 36
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, *seq.left)",
        "start": {
          "row": 252,
          "column": 3
        },
        "end": {
          "row": 252,
          "column": 35
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 252,
          "column": 3
        },
        "end": {
          "row": 252,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, *seq.left)",
        "start": {
          "row": 252,
          "column": 15
        },
        "end": {
          "row": 252,
          "column": 35
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 252,
          "column": 16
        },
        "end": {
          "row": 252,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 252,
          "column": 17
        },
        "end": {
          "row": 252,
          "column": 23
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "*seq.left",
        "start": {
          "row": 252,
          "column": 25
        },
        "end": {
          "row": 252,
          "column": 34
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "seq.left",
        "start": {
          "row": 252,
          "column": 26
        },
        "end": {
          "row": 252,
          "column": 34
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "seq",
        "start": {
          "row": 252,
          "column": 26
        },
        "end": {
          "row": 252,
          "column": 29
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "left",
        "start": {
          "row": 252,
          "column": 30
        },
        "end": {
          "row": 252,
          "column": 34
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, *seq.right);",
        "start": {
          "row": 253,
          "column": 3
        },
        "end": {
          "row": 253,
          "column": 37
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, *seq.right)",
        "start": {
          "row": 253,
          "column": 3
        },
        "end": {
          "row": 253,
          "column": 36
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 253,
          "column": 3
        },
        "end": {
          "row": 253,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, *seq.right)",
        "start": {
          "row": 253,
          "column": 15
        },
        "end": {
          "row": 253,
          "column": 36
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 253,
          "column": 16
        },
        "end": {
          "row": 253,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 253,
          "column": 17
        },
        "end": {
          "row": 253,
          "column": 23
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "*seq.right",
        "start": {
          "row": 253,
          "column": 25
        },
        "end": {
          "row": 253,
          "column": 35
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "seq.right",
        "start": {
          "row": 253,
          "column": 26
        },
        "end": {
          "row": 253,
          "column": 35
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "seq",
        "start": {
          "row": 253,
          "column": 26
        },
        "end": {
          "row": 253,
          "column": 29
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "right",
        "start": {
          "row": 253,
          "column": 30
        },
        "end": {
          "row": 253,
          "column": 35
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result;",
        "start": {
          "row": 254,
          "column": 3
        },
        "end": {
          "row": 254,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 254,
          "column": 10
        },
        "end": {
          "row": 254,
          "column": 16
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<Metadata>::operator()(const Metadata &metadata) const {\n  size_t result = 0;\n  hash_combine(&result, *metadata.rule);\n  hash_combine(&result, metadata.params.precedence);\n  hash_combine<int>(&result, metadata.params.associativity);\n  hash_combine(&result, metadata.params.has_precedence);\n  hash_combine(&result, metadata.params.has_associativity);\n  hash_combine(&result, metadata.params.is_token);\n  hash_combine(&result, metadata.params.is_string);\n  hash_combine(&result, metadata.params.is_active);\n  hash_combine(&result, metadata.params.is_main_token);\n  return result;\n}",
        "start": {
          "row": 257,
          "column": 1
        },
        "end": {
          "row": 269,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 257,
          "column": 1
        },
        "end": {
          "row": 257,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<Metadata>::operator()(const Metadata &metadata) const",
        "start": {
          "row": 257,
          "column": 8
        },
        "end": {
          "row": 257,
          "column": 66
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<Metadata>::operator()",
        "start": {
          "row": 257,
          "column": 8
        },
        "end": {
          "row": 257,
          "column": 34
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<Metadata>",
        "start": {
          "row": 257,
          "column": 8
        },
        "end": {
          "row": 257,
          "column": 22
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 257,
          "column": 8
        },
        "end": {
          "row": 257,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Metadata>",
        "start": {
          "row": 257,
          "column": 12
        },
        "end": {
          "row": 257,
          "column": 22
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Metadata",
        "start": {
          "row": 257,
          "column": 13
        },
        "end": {
          "row": 257,
          "column": 21
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Metadata",
        "start": {
          "row": 257,
          "column": 13
        },
        "end": {
          "row": 257,
          "column": 21
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 257,
          "column": 24
        },
        "end": {
          "row": 257,
          "column": 34
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Metadata &metadata)",
        "start": {
          "row": 257,
          "column": 34
        },
        "end": {
          "row": 257,
          "column": 60
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Metadata &metadata",
        "start": {
          "row": 257,
          "column": 35
        },
        "end": {
          "row": 257,
          "column": 59
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 257,
          "column": 35
        },
        "end": {
          "row": 257,
          "column": 40
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Metadata",
        "start": {
          "row": 257,
          "column": 41
        },
        "end": {
          "row": 257,
          "column": 49
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&metadata",
        "start": {
          "row": 257,
          "column": 50
        },
        "end": {
          "row": 257,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 257,
          "column": 51
        },
        "end": {
          "row": 257,
          "column": 59
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 257,
          "column": 61
        },
        "end": {
          "row": 257,
          "column": 66
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  size_t result = 0;\n  hash_combine(&result, *metadata.rule);\n  hash_combine(&result, metadata.params.precedence);\n  hash_combine<int>(&result, metadata.params.associativity);\n  hash_combine(&result, metadata.params.has_precedence);\n  hash_combine(&result, metadata.params.has_associativity);\n  hash_combine(&result, metadata.params.is_token);\n  hash_combine(&result, metadata.params.is_string);\n  hash_combine(&result, metadata.params.is_active);\n  hash_combine(&result, metadata.params.is_main_token);\n  return result;\n}",
        "start": {
          "row": 257,
          "column": 67
        },
        "end": {
          "row": 269,
          "column": 2
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "size_t result = 0;",
        "start": {
          "row": 258,
          "column": 3
        },
        "end": {
          "row": 258,
          "column": 21
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 258,
          "column": 3
        },
        "end": {
          "row": 258,
          "column": 9
        }
      },
      {
        "kind": "init_declarator",
        "name": "query",
        "text": "result = 0",
        "start": {
          "row": 258,
          "column": 10
        },
        "end": {
          "row": 258,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 258,
          "column": 10
        },
        "end": {
          "row": 258,
          "column": 16
        }
      },
      {
        "kind": "number_literal",
        "name": "query",
        "text": "0",
        "start": {
          "row": 258,
          "column": 19
        },
        "end": {
          "row": 258,
          "column": 20
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, *metadata.rule);",
        "start": {
          "row": 259,
          "column": 3
        },
        "end": {
          "row": 259,
          "column": 41
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, *metadata.rule)",
        "start": {
          "row": 259,
          "column": 3
        },
        "end": {
          "row": 259,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 259,
          "column": 3
        },
        "end": {
          "row": 259,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, *metadata.rule)",
        "start": {
          "row": 259,
          "column": 15
        },
        "end": {
          "row": 259,
          "column": 40
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 259,
          "column": 16
        },
        "end": {
          "row": 259,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 259,
          "column": 17
        },
        "end": {
          "row": 259,
          "column": 23
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "*metadata.rule",
        "start": {
          "row": 259,
          "column": 25
        },
        "end": {
          "row": 259,
          "column": 39
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.rule",
        "start": {
          "row": 259,
          "column": 26
        },
        "end": {
          "row": 259,
          "column": 39
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 259,
          "column": 26
        },
        "end": {
          "row": 259,
          "column": 34
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 259,
          "column": 35
        },
        "end": {
          "row": 259,
          "column": 39
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.precedence);",
        "start": {
          "row": 260,
          "column": 3
        },
        "end": {
          "row": 260,
          "column": 53
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.precedence)",
        "start": {
          "row": 260,
          "column": 3
        },
        "end": {
          "row": 260,
          "column": 52
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 260,
          "column": 3
        },
        "end": {
          "row": 260,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, metadata.params.precedence)",
        "start": {
          "row": 260,
          "column": 15
        },
        "end": {
          "row": 260,
          "column": 52
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 260,
          "column": 16
        },
        "end": {
          "row": 260,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 260,
          "column": 17
        },
        "end": {
          "row": 260,
          "column": 23
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params.precedence",
        "start": {
          "row": 260,
          "column": 25
        },
        "end": {
          "row": 260,
          "column": 51
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params",
        "start": {
          "row": 260,
          "column": 25
        },
        "end": {
          "row": 260,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 260,
          "column": 25
        },
        "end": {
          "row": 260,
          "column": 33
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "params",
        "start": {
          "row": 260,
          "column": 34
        },
        "end": {
          "row": 260,
          "column": 40
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "precedence",
        "start": {
          "row": 260,
          "column": 41
        },
        "end": {
          "row": 260,
          "column": 51
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine<int>(&result, metadata.params.associativity);",
        "start": {
          "row": 261,
          "column": 3
        },
        "end": {
          "row": 261,
          "column": 61
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine<int>(&result, metadata.params.associativity)",
        "start": {
          "row": 261,
          "column": 3
        },
        "end": {
          "row": 261,
          "column": 60
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash_combine<int>",
        "start": {
          "row": 261,
          "column": 3
        },
        "end": {
          "row": 261,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 261,
          "column": 3
        },
        "end": {
          "row": 261,
          "column": 15
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<int>",
        "start": {
          "row": 261,
          "column": 15
        },
        "end": {
          "row": 261,
          "column": 20
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "int",
        "start": {
          "row": 261,
          "column": 16
        },
        "end": {
          "row": 261,
          "column": 19
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "int",
        "start": {
          "row": 261,
          "column": 16
        },
        "end": {
          "row": 261,
          "column": 19
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, metadata.params.associativity)",
        "start": {
          "row": 261,
          "column": 20
        },
        "end": {
          "row": 261,
          "column": 60
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 261,
          "column": 21
        },
        "end": {
          "row": 261,
          "column": 28
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 261,
          "column": 22
        },
        "end": {
          "row": 261,
          "column": 28
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params.associativity",
        "start": {
          "row": 261,
          "column": 30
        },
        "end": {
          "row": 261,
          "column": 59
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params",
        "start": {
          "row": 261,
          "column": 30
        },
        "end": {
          "row": 261,
          "column": 45
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 261,
          "column": 30
        },
        "end": {
          "row": 261,
          "column": 38
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "params",
        "start": {
          "row": 261,
          "column": 39
        },
        "end": {
          "row": 261,
          "column": 45
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "associativity",
        "start": {
          "row": 261,
          "column": 46
        },
        "end": {
          "row": 261,
          "column": 59
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.has_precedence);",
        "start": {
          "row": 262,
          "column": 3
        },
        "end": {
          "row": 262,
          "column": 57
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.has_precedence)",
        "start": {
          "row": 262,
          "column": 3
        },
        "end": {
          "row": 262,
          "column": 56
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 262,
          "column": 3
        },
        "end": {
          "row": 262,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, metadata.params.has_precedence)",
        "start": {
          "row": 262,
          "column": 15
        },
        "end": {
          "row": 262,
          "column": 56
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 262,
          "column": 16
        },
        "end": {
          "row": 262,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 262,
          "column": 17
        },
        "end": {
          "row": 262,
          "column": 23
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params.has_precedence",
        "start": {
          "row": 262,
          "column": 25
        },
        "end": {
          "row": 262,
          "column": 55
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params",
        "start": {
          "row": 262,
          "column": 25
        },
        "end": {
          "row": 262,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 262,
          "column": 25
        },
        "end": {
          "row": 262,
          "column": 33
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "params",
        "start": {
          "row": 262,
          "column": 34
        },
        "end": {
          "row": 262,
          "column": 40
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "has_precedence",
        "start": {
          "row": 262,
          "column": 41
        },
        "end": {
          "row": 262,
          "column": 55
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.has_associativity);",
        "start": {
          "row": 263,
          "column": 3
        },
        "end": {
          "row": 263,
          "column": 60
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.has_associativity)",
        "start": {
          "row": 263,
          "column": 3
        },
        "end": {
          "row": 263,
          "column": 59
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 263,
          "column": 3
        },
        "end": {
          "row": 263,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, metadata.params.has_associativity)",
        "start": {
          "row": 263,
          "column": 15
        },
        "end": {
          "row": 263,
          "column": 59
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 263,
          "column": 16
        },
        "end": {
          "row": 263,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 263,
          "column": 17
        },
        "end": {
          "row": 263,
          "column": 23
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params.has_associativity",
        "start": {
          "row": 263,
          "column": 25
        },
        "end": {
          "row": 263,
          "column": 58
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params",
        "start": {
          "row": 263,
          "column": 25
        },
        "end": {
          "row": 263,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 263,
          "column": 25
        },
        "end": {
          "row": 263,
          "column": 33
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "params",
        "start": {
          "row": 263,
          "column": 34
        },
        "end": {
          "row": 263,
          "column": 40
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "has_associativity",
        "start": {
          "row": 263,
          "column": 41
        },
        "end": {
          "row": 263,
          "column": 58
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.is_token);",
        "start": {
          "row": 264,
          "column": 3
        },
        "end": {
          "row": 264,
          "column": 51
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.is_token)",
        "start": {
          "row": 264,
          "column": 3
        },
        "end": {
          "row": 264,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 264,
          "column": 3
        },
        "end": {
          "row": 264,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, metadata.params.is_token)",
        "start": {
          "row": 264,
          "column": 15
        },
        "end": {
          "row": 264,
          "column": 50
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 264,
          "column": 16
        },
        "end": {
          "row": 264,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 264,
          "column": 17
        },
        "end": {
          "row": 264,
          "column": 23
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params.is_token",
        "start": {
          "row": 264,
          "column": 25
        },
        "end": {
          "row": 264,
          "column": 49
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params",
        "start": {
          "row": 264,
          "column": 25
        },
        "end": {
          "row": 264,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 264,
          "column": 25
        },
        "end": {
          "row": 264,
          "column": 33
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "params",
        "start": {
          "row": 264,
          "column": 34
        },
        "end": {
          "row": 264,
          "column": 40
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "is_token",
        "start": {
          "row": 264,
          "column": 41
        },
        "end": {
          "row": 264,
          "column": 49
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.is_string);",
        "start": {
          "row": 265,
          "column": 3
        },
        "end": {
          "row": 265,
          "column": 52
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.is_string)",
        "start": {
          "row": 265,
          "column": 3
        },
        "end": {
          "row": 265,
          "column": 51
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 265,
          "column": 3
        },
        "end": {
          "row": 265,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, metadata.params.is_string)",
        "start": {
          "row": 265,
          "column": 15
        },
        "end": {
          "row": 265,
          "column": 51
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 265,
          "column": 16
        },
        "end": {
          "row": 265,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 265,
          "column": 17
        },
        "end": {
          "row": 265,
          "column": 23
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params.is_string",
        "start": {
          "row": 265,
          "column": 25
        },
        "end": {
          "row": 265,
          "column": 50
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params",
        "start": {
          "row": 265,
          "column": 25
        },
        "end": {
          "row": 265,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 265,
          "column": 25
        },
        "end": {
          "row": 265,
          "column": 33
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "params",
        "start": {
          "row": 265,
          "column": 34
        },
        "end": {
          "row": 265,
          "column": 40
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "is_string",
        "start": {
          "row": 265,
          "column": 41
        },
        "end": {
          "row": 265,
          "column": 50
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.is_active);",
        "start": {
          "row": 266,
          "column": 3
        },
        "end": {
          "row": 266,
          "column": 52
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.is_active)",
        "start": {
          "row": 266,
          "column": 3
        },
        "end": {
          "row": 266,
          "column": 51
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 266,
          "column": 3
        },
        "end": {
          "row": 266,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, metadata.params.is_active)",
        "start": {
          "row": 266,
          "column": 15
        },
        "end": {
          "row": 266,
          "column": 51
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 266,
          "column": 16
        },
        "end": {
          "row": 266,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 266,
          "column": 17
        },
        "end": {
          "row": 266,
          "column": 23
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params.is_active",
        "start": {
          "row": 266,
          "column": 25
        },
        "end": {
          "row": 266,
          "column": 50
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params",
        "start": {
          "row": 266,
          "column": 25
        },
        "end": {
          "row": 266,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 266,
          "column": 25
        },
        "end": {
          "row": 266,
          "column": 33
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "params",
        "start": {
          "row": 266,
          "column": 34
        },
        "end": {
          "row": 266,
          "column": 40
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "is_active",
        "start": {
          "row": 266,
          "column": 41
        },
        "end": {
          "row": 266,
          "column": 50
        }
      },
      {
        "kind": "expression_statement",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.is_main_token);",
        "start": {
          "row": 267,
          "column": 3
        },
        "end": {
          "row": 267,
          "column": 56
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash_combine(&result, metadata.params.is_main_token)",
        "start": {
          "row": 267,
          "column": 3
        },
        "end": {
          "row": 267,
          "column": 55
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash_combine",
        "start": {
          "row": 267,
          "column": 3
        },
        "end": {
          "row": 267,
          "column": 15
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(&result, metadata.params.is_main_token)",
        "start": {
          "row": 267,
          "column": 15
        },
        "end": {
          "row": 267,
          "column": 55
        }
      },
      {
        "kind": "pointer_expression",
        "name": "query",
        "text": "&result",
        "start": {
          "row": 267,
          "column": 16
        },
        "end": {
          "row": 267,
          "column": 23
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 267,
          "column": 17
        },
        "end": {
          "row": 267,
          "column": 23
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params.is_main_token",
        "start": {
          "row": 267,
          "column": 25
        },
        "end": {
          "row": 267,
          "column": 54
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "metadata.params",
        "start": {
          "row": 267,
          "column": 25
        },
        "end": {
          "row": 267,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "metadata",
        "start": {
          "row": 267,
          "column": 25
        },
        "end": {
          "row": 267,
          "column": 33
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "params",
        "start": {
          "row": 267,
          "column": 34
        },
        "end": {
          "row": 267,
          "column": 40
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "is_main_token",
        "start": {
          "row": 267,
          "column": 41
        },
        "end": {
          "row": 267,
          "column": 54
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result;",
        "start": {
          "row": 268,
          "column": 3
        },
        "end": {
          "row": 268,
          "column": 17
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 268,
          "column": 10
        },
        "end": {
          "row": 268,
          "column": 16
        }
      },
      {
        "kind": "function_definition",
        "name": "query",
        "text": "size_t hash<Rule>::operator()(const Rule &rule) const {\n  size_t result = hash<int>()(rule.type);\n  switch (rule.type) {\n    case Rule::CharacterSetType: return result ^ hash<CharacterSet>()(rule.character_set_);\n    case Rule::StringType: return result ^ hash<String>()(rule.string_);\n    case Rule::PatternType: return result ^ hash<Pattern>()(rule.pattern_);\n    case Rule::NamedSymbolType: return result ^ hash<NamedSymbol>()(rule.named_symbol_);\n    case Rule::SymbolType: return result ^ hash<Symbol>()(rule.symbol_);\n    case Rule::ChoiceType: return result ^ hash<Choice>()(rule.choice_);\n    case Rule::MetadataType: return result ^ hash<Metadata>()(rule.metadata_);\n    case Rule::RepeatType: return result ^ hash<Repeat>()(rule.repeat_);\n    case Rule::SeqType: return result ^ hash<Seq>()(rule.seq_);\n    default: return result ^ hash<Blank>()(rule.blank_);\n  }\n}",
        "start": {
          "row": 271,
          "column": 1
        },
        "end": {
          "row": 285,
          "column": 2
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 271,
          "column": 1
        },
        "end": {
          "row": 271,
          "column": 7
        }
      },
      {
        "kind": "function_declarator",
        "name": "query",
        "text": "hash<Rule>::operator()(const Rule &rule) const",
        "start": {
          "row": 271,
          "column": 8
        },
        "end": {
          "row": 271,
          "column": 54
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "hash<Rule>::operator()",
        "start": {
          "row": 271,
          "column": 8
        },
        "end": {
          "row": 271,
          "column": 30
        }
      },
      {
        "kind": "template_type",
        "name": "query",
        "text": "hash<Rule>",
        "start": {
          "row": 271,
          "column": 8
        },
        "end": {
          "row": 271,
          "column": 18
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 271,
          "column": 8
        },
        "end": {
          "row": 271,
          "column": 12
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Rule>",
        "start": {
          "row": 271,
          "column": 12
        },
        "end": {
          "row": 271,
          "column": 18
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 271,
          "column": 13
        },
        "end": {
          "row": 271,
          "column": 17
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 271,
          "column": 13
        },
        "end": {
          "row": 271,
          "column": 17
        }
      },
      {
        "kind": "operator_name",
        "name": "query",
        "text": "operator()",
        "start": {
          "row": 271,
          "column": 20
        },
        "end": {
          "row": 271,
          "column": 30
        }
      },
      {
        "kind": "parameter_list",
        "name": "query",
        "text": "(const Rule &rule)",
        "start": {
          "row": 271,
          "column": 30
        },
        "end": {
          "row": 271,
          "column": 48
        }
      },
      {
        "kind": "parameter_declaration",
        "name": "query",
        "text": "const Rule &rule",
        "start": {
          "row": 271,
          "column": 31
        },
        "end": {
          "row": 271,
          "column": 47
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 271,
          "column": 31
        },
        "end": {
          "row": 271,
          "column": 36
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 271,
          "column": 37
        },
        "end": {
          "row": 271,
          "column": 41
        }
      },
      {
        "kind": "reference_declarator",
        "name": "query",
        "text": "&rule",
        "start": {
          "row": 271,
          "column": 42
        },
        "end": {
          "row": 271,
          "column": 47
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 271,
          "column": 43
        },
        "end": {
          "row": 271,
          "column": 47
        }
      },
      {
        "kind": "type_qualifier",
        "name": "query",
        "text": "const",
        "start": {
          "row": 271,
          "column": 49
        },
        "end": {
          "row": 271,
          "column": 54
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n  size_t result = hash<int>()(rule.type);\n  switch (rule.type) {\n    case Rule::CharacterSetType: return result ^ hash<CharacterSet>()(rule.character_set_);\n    case Rule::StringType: return result ^ hash<String>()(rule.string_);\n    case Rule::PatternType: return result ^ hash<Pattern>()(rule.pattern_);\n    case Rule::NamedSymbolType: return result ^ hash<NamedSymbol>()(rule.named_symbol_);\n    case Rule::SymbolType: return result ^ hash<Symbol>()(rule.symbol_);\n    case Rule::ChoiceType: return result ^ hash<Choice>()(rule.choice_);\n    case Rule::MetadataType: return result ^ hash<Metadata>()(rule.metadata_);\n    case Rule::RepeatType: return result ^ hash<Repeat>()(rule.repeat_);\n    case Rule::SeqType: return result ^ hash<Seq>()(rule.seq_);\n    default: return result ^ hash<Blank>()(rule.blank_);\n  }\n}",
        "start": {
          "row": 271,
          "column": 55
        },
        "end": {
          "row": 285,
          "column": 2
        }
      },
      {
        "kind": "declaration",
        "name": "query",
        "text": "size_t result = hash<int>()(rule.type);",
        "start": {
          "row": 272,
          "column": 3
        },
        "end": {
          "row": 272,
          "column": 42
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "size_t",
        "start": {
          "row": 272,
          "column": 3
        },
        "end": {
          "row": 272,
          "column": 9
        }
      },
      {
        "kind": "init_declarator",
        "name": "query",
        "text": "result = hash<int>()(rule.type)",
        "start": {
          "row": 272,
          "column": 10
        },
        "end": {
          "row": 272,
          "column": 41
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 272,
          "column": 10
        },
        "end": {
          "row": 272,
          "column": 16
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<int>()(rule.type)",
        "start": {
          "row": 272,
          "column": 19
        },
        "end": {
          "row": 272,
          "column": 41
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<int>()",
        "start": {
          "row": 272,
          "column": 19
        },
        "end": {
          "row": 272,
          "column": 30
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<int>",
        "start": {
          "row": 272,
          "column": 19
        },
        "end": {
          "row": 272,
          "column": 28
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 272,
          "column": 19
        },
        "end": {
          "row": 272,
          "column": 23
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<int>",
        "start": {
          "row": 272,
          "column": 23
        },
        "end": {
          "row": 272,
          "column": 28
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "int",
        "start": {
          "row": 272,
          "column": 24
        },
        "end": {
          "row": 272,
          "column": 27
        }
      },
      {
        "kind": "primitive_type",
        "name": "query",
        "text": "int",
        "start": {
          "row": 272,
          "column": 24
        },
        "end": {
          "row": 272,
          "column": 27
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 272,
          "column": 28
        },
        "end": {
          "row": 272,
          "column": 30
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.type)",
        "start": {
          "row": 272,
          "column": 30
        },
        "end": {
          "row": 272,
          "column": 41
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.type",
        "start": {
          "row": 272,
          "column": 31
        },
        "end": {
          "row": 272,
          "column": 40
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 272,
          "column": 31
        },
        "end": {
          "row": 272,
          "column": 35
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 272,
          "column": 36
        },
        "end": {
          "row": 272,
          "column": 40
        }
      },
      {
        "kind": "switch_statement",
        "name": "query",
        "text": "switch (rule.type) {\n    case Rule::CharacterSetType: return result ^ hash<CharacterSet>()(rule.character_set_);\n    case Rule::StringType: return result ^ hash<String>()(rule.string_);\n    case Rule::PatternType: return result ^ hash<Pattern>()(rule.pattern_);\n    case Rule::NamedSymbolType: return result ^ hash<NamedSymbol>()(rule.named_symbol_);\n    case Rule::SymbolType: return result ^ hash<Symbol>()(rule.symbol_);\n    case Rule::ChoiceType: return result ^ hash<Choice>()(rule.choice_);\n    case Rule::MetadataType: return result ^ hash<Metadata>()(rule.metadata_);\n    case Rule::RepeatType: return result ^ hash<Repeat>()(rule.repeat_);\n    case Rule::SeqType: return result ^ hash<Seq>()(rule.seq_);\n    default: return result ^ hash<Blank>()(rule.blank_);\n  }",
        "start": {
          "row": 273,
          "column": 3
        },
        "end": {
          "row": 284,
          "column": 4
        }
      },
      {
        "kind": "condition_clause",
        "name": "query",
        "text": "(rule.type)",
        "start": {
          "row": 273,
          "column": 10
        },
        "end": {
          "row": 273,
          "column": 21
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.type",
        "start": {
          "row": 273,
          "column": 11
        },
        "end": {
          "row": 273,
          "column": 20
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 273,
          "column": 11
        },
        "end": {
          "row": 273,
          "column": 15
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "type",
        "start": {
          "row": 273,
          "column": 16
        },
        "end": {
          "row": 273,
          "column": 20
        }
      },
      {
        "kind": "compound_statement",
        "name": "query",
        "text": "{\n    case Rule::CharacterSetType: return result ^ hash<CharacterSet>()(rule.character_set_);\n    case Rule::StringType: return result ^ hash<String>()(rule.string_);\n    case Rule::PatternType: return result ^ hash<Pattern>()(rule.pattern_);\n    case Rule::NamedSymbolType: return result ^ hash<NamedSymbol>()(rule.named_symbol_);\n    case Rule::SymbolType: return result ^ hash<Symbol>()(rule.symbol_);\n    case Rule::ChoiceType: return result ^ hash<Choice>()(rule.choice_);\n    case Rule::MetadataType: return result ^ hash<Metadata>()(rule.metadata_);\n    case Rule::RepeatType: return result ^ hash<Repeat>()(rule.repeat_);\n    case Rule::SeqType: return result ^ hash<Seq>()(rule.seq_);\n    default: return result ^ hash<Blank>()(rule.blank_);\n  }",
        "start": {
          "row": 273,
          "column": 22
        },
        "end": {
          "row": 284,
          "column": 4
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::CharacterSetType: return result ^ hash<CharacterSet>()(rule.character_set_);",
        "start": {
          "row": 274,
          "column": 5
        },
        "end": {
          "row": 274,
          "column": 92
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::CharacterSetType",
        "start": {
          "row": 274,
          "column": 10
        },
        "end": {
          "row": 274,
          "column": 32
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 274,
          "column": 10
        },
        "end": {
          "row": 274,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "CharacterSetType",
        "start": {
          "row": 274,
          "column": 16
        },
        "end": {
          "row": 274,
          "column": 32
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<CharacterSet>()(rule.character_set_);",
        "start": {
          "row": 274,
          "column": 34
        },
        "end": {
          "row": 274,
          "column": 92
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<CharacterSet>()(rule.character_set_)",
        "start": {
          "row": 274,
          "column": 41
        },
        "end": {
          "row": 274,
          "column": 91
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 274,
          "column": 41
        },
        "end": {
          "row": 274,
          "column": 47
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<CharacterSet>()(rule.character_set_)",
        "start": {
          "row": 274,
          "column": 50
        },
        "end": {
          "row": 274,
          "column": 91
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<CharacterSet>()",
        "start": {
          "row": 274,
          "column": 50
        },
        "end": {
          "row": 274,
          "column": 70
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<CharacterSet>",
        "start": {
          "row": 274,
          "column": 50
        },
        "end": {
          "row": 274,
          "column": 68
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 274,
          "column": 50
        },
        "end": {
          "row": 274,
          "column": 54
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<CharacterSet>",
        "start": {
          "row": 274,
          "column": 54
        },
        "end": {
          "row": 274,
          "column": 68
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "CharacterSet",
        "start": {
          "row": 274,
          "column": 55
        },
        "end": {
          "row": 274,
          "column": 67
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "CharacterSet",
        "start": {
          "row": 274,
          "column": 55
        },
        "end": {
          "row": 274,
          "column": 67
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 274,
          "column": 68
        },
        "end": {
          "row": 274,
          "column": 70
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.character_set_)",
        "start": {
          "row": 274,
          "column": 70
        },
        "end": {
          "row": 274,
          "column": 91
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.character_set_",
        "start": {
          "row": 274,
          "column": 71
        },
        "end": {
          "row": 274,
          "column": 90
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 274,
          "column": 71
        },
        "end": {
          "row": 274,
          "column": 75
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "character_set_",
        "start": {
          "row": 274,
          "column": 76
        },
        "end": {
          "row": 274,
          "column": 90
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::StringType: return result ^ hash<String>()(rule.string_);",
        "start": {
          "row": 275,
          "column": 5
        },
        "end": {
          "row": 275,
          "column": 73
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::StringType",
        "start": {
          "row": 275,
          "column": 10
        },
        "end": {
          "row": 275,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 275,
          "column": 10
        },
        "end": {
          "row": 275,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "StringType",
        "start": {
          "row": 275,
          "column": 16
        },
        "end": {
          "row": 275,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<String>()(rule.string_);",
        "start": {
          "row": 275,
          "column": 28
        },
        "end": {
          "row": 275,
          "column": 73
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<String>()(rule.string_)",
        "start": {
          "row": 275,
          "column": 35
        },
        "end": {
          "row": 275,
          "column": 72
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 275,
          "column": 35
        },
        "end": {
          "row": 275,
          "column": 41
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<String>()(rule.string_)",
        "start": {
          "row": 275,
          "column": 44
        },
        "end": {
          "row": 275,
          "column": 72
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<String>()",
        "start": {
          "row": 275,
          "column": 44
        },
        "end": {
          "row": 275,
          "column": 58
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<String>",
        "start": {
          "row": 275,
          "column": 44
        },
        "end": {
          "row": 275,
          "column": 56
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 275,
          "column": 44
        },
        "end": {
          "row": 275,
          "column": 48
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<String>",
        "start": {
          "row": 275,
          "column": 48
        },
        "end": {
          "row": 275,
          "column": 56
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "String",
        "start": {
          "row": 275,
          "column": 49
        },
        "end": {
          "row": 275,
          "column": 55
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "String",
        "start": {
          "row": 275,
          "column": 49
        },
        "end": {
          "row": 275,
          "column": 55
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 275,
          "column": 56
        },
        "end": {
          "row": 275,
          "column": 58
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.string_)",
        "start": {
          "row": 275,
          "column": 58
        },
        "end": {
          "row": 275,
          "column": 72
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.string_",
        "start": {
          "row": 275,
          "column": 59
        },
        "end": {
          "row": 275,
          "column": 71
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 275,
          "column": 59
        },
        "end": {
          "row": 275,
          "column": 63
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "string_",
        "start": {
          "row": 275,
          "column": 64
        },
        "end": {
          "row": 275,
          "column": 71
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::PatternType: return result ^ hash<Pattern>()(rule.pattern_);",
        "start": {
          "row": 276,
          "column": 5
        },
        "end": {
          "row": 276,
          "column": 76
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::PatternType",
        "start": {
          "row": 276,
          "column": 10
        },
        "end": {
          "row": 276,
          "column": 27
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 276,
          "column": 10
        },
        "end": {
          "row": 276,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "PatternType",
        "start": {
          "row": 276,
          "column": 16
        },
        "end": {
          "row": 276,
          "column": 27
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<Pattern>()(rule.pattern_);",
        "start": {
          "row": 276,
          "column": 29
        },
        "end": {
          "row": 276,
          "column": 76
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<Pattern>()(rule.pattern_)",
        "start": {
          "row": 276,
          "column": 36
        },
        "end": {
          "row": 276,
          "column": 75
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 276,
          "column": 36
        },
        "end": {
          "row": 276,
          "column": 42
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Pattern>()(rule.pattern_)",
        "start": {
          "row": 276,
          "column": 45
        },
        "end": {
          "row": 276,
          "column": 75
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Pattern>()",
        "start": {
          "row": 276,
          "column": 45
        },
        "end": {
          "row": 276,
          "column": 60
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<Pattern>",
        "start": {
          "row": 276,
          "column": 45
        },
        "end": {
          "row": 276,
          "column": 58
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 276,
          "column": 45
        },
        "end": {
          "row": 276,
          "column": 49
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Pattern>",
        "start": {
          "row": 276,
          "column": 49
        },
        "end": {
          "row": 276,
          "column": 58
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Pattern",
        "start": {
          "row": 276,
          "column": 50
        },
        "end": {
          "row": 276,
          "column": 57
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Pattern",
        "start": {
          "row": 276,
          "column": 50
        },
        "end": {
          "row": 276,
          "column": 57
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 276,
          "column": 58
        },
        "end": {
          "row": 276,
          "column": 60
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.pattern_)",
        "start": {
          "row": 276,
          "column": 60
        },
        "end": {
          "row": 276,
          "column": 75
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.pattern_",
        "start": {
          "row": 276,
          "column": 61
        },
        "end": {
          "row": 276,
          "column": 74
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 276,
          "column": 61
        },
        "end": {
          "row": 276,
          "column": 65
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "pattern_",
        "start": {
          "row": 276,
          "column": 66
        },
        "end": {
          "row": 276,
          "column": 74
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::NamedSymbolType: return result ^ hash<NamedSymbol>()(rule.named_symbol_);",
        "start": {
          "row": 277,
          "column": 5
        },
        "end": {
          "row": 277,
          "column": 89
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::NamedSymbolType",
        "start": {
          "row": 277,
          "column": 10
        },
        "end": {
          "row": 277,
          "column": 31
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 277,
          "column": 10
        },
        "end": {
          "row": 277,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "NamedSymbolType",
        "start": {
          "row": 277,
          "column": 16
        },
        "end": {
          "row": 277,
          "column": 31
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<NamedSymbol>()(rule.named_symbol_);",
        "start": {
          "row": 277,
          "column": 33
        },
        "end": {
          "row": 277,
          "column": 89
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<NamedSymbol>()(rule.named_symbol_)",
        "start": {
          "row": 277,
          "column": 40
        },
        "end": {
          "row": 277,
          "column": 88
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 277,
          "column": 40
        },
        "end": {
          "row": 277,
          "column": 46
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<NamedSymbol>()(rule.named_symbol_)",
        "start": {
          "row": 277,
          "column": 49
        },
        "end": {
          "row": 277,
          "column": 88
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<NamedSymbol>()",
        "start": {
          "row": 277,
          "column": 49
        },
        "end": {
          "row": 277,
          "column": 68
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<NamedSymbol>",
        "start": {
          "row": 277,
          "column": 49
        },
        "end": {
          "row": 277,
          "column": 66
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 277,
          "column": 49
        },
        "end": {
          "row": 277,
          "column": 53
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<NamedSymbol>",
        "start": {
          "row": 277,
          "column": 53
        },
        "end": {
          "row": 277,
          "column": 66
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "NamedSymbol",
        "start": {
          "row": 277,
          "column": 54
        },
        "end": {
          "row": 277,
          "column": 65
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "NamedSymbol",
        "start": {
          "row": 277,
          "column": 54
        },
        "end": {
          "row": 277,
          "column": 65
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 277,
          "column": 66
        },
        "end": {
          "row": 277,
          "column": 68
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.named_symbol_)",
        "start": {
          "row": 277,
          "column": 68
        },
        "end": {
          "row": 277,
          "column": 88
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.named_symbol_",
        "start": {
          "row": 277,
          "column": 69
        },
        "end": {
          "row": 277,
          "column": 87
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 277,
          "column": 69
        },
        "end": {
          "row": 277,
          "column": 73
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "named_symbol_",
        "start": {
          "row": 277,
          "column": 74
        },
        "end": {
          "row": 277,
          "column": 87
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::SymbolType: return result ^ hash<Symbol>()(rule.symbol_);",
        "start": {
          "row": 278,
          "column": 5
        },
        "end": {
          "row": 278,
          "column": 73
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::SymbolType",
        "start": {
          "row": 278,
          "column": 10
        },
        "end": {
          "row": 278,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 278,
          "column": 10
        },
        "end": {
          "row": 278,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SymbolType",
        "start": {
          "row": 278,
          "column": 16
        },
        "end": {
          "row": 278,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<Symbol>()(rule.symbol_);",
        "start": {
          "row": 278,
          "column": 28
        },
        "end": {
          "row": 278,
          "column": 73
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<Symbol>()(rule.symbol_)",
        "start": {
          "row": 278,
          "column": 35
        },
        "end": {
          "row": 278,
          "column": 72
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 278,
          "column": 35
        },
        "end": {
          "row": 278,
          "column": 41
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Symbol>()(rule.symbol_)",
        "start": {
          "row": 278,
          "column": 44
        },
        "end": {
          "row": 278,
          "column": 72
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Symbol>()",
        "start": {
          "row": 278,
          "column": 44
        },
        "end": {
          "row": 278,
          "column": 58
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<Symbol>",
        "start": {
          "row": 278,
          "column": 44
        },
        "end": {
          "row": 278,
          "column": 56
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 278,
          "column": 44
        },
        "end": {
          "row": 278,
          "column": 48
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Symbol>",
        "start": {
          "row": 278,
          "column": 48
        },
        "end": {
          "row": 278,
          "column": 56
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 278,
          "column": 49
        },
        "end": {
          "row": 278,
          "column": 55
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Symbol",
        "start": {
          "row": 278,
          "column": 49
        },
        "end": {
          "row": 278,
          "column": 55
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 278,
          "column": 56
        },
        "end": {
          "row": 278,
          "column": 58
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.symbol_)",
        "start": {
          "row": 278,
          "column": 58
        },
        "end": {
          "row": 278,
          "column": 72
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.symbol_",
        "start": {
          "row": 278,
          "column": 59
        },
        "end": {
          "row": 278,
          "column": 71
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 278,
          "column": 59
        },
        "end": {
          "row": 278,
          "column": 63
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "symbol_",
        "start": {
          "row": 278,
          "column": 64
        },
        "end": {
          "row": 278,
          "column": 71
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::ChoiceType: return result ^ hash<Choice>()(rule.choice_);",
        "start": {
          "row": 279,
          "column": 5
        },
        "end": {
          "row": 279,
          "column": 73
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::ChoiceType",
        "start": {
          "row": 279,
          "column": 10
        },
        "end": {
          "row": 279,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 279,
          "column": 10
        },
        "end": {
          "row": 279,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "ChoiceType",
        "start": {
          "row": 279,
          "column": 16
        },
        "end": {
          "row": 279,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<Choice>()(rule.choice_);",
        "start": {
          "row": 279,
          "column": 28
        },
        "end": {
          "row": 279,
          "column": 73
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<Choice>()(rule.choice_)",
        "start": {
          "row": 279,
          "column": 35
        },
        "end": {
          "row": 279,
          "column": 72
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 279,
          "column": 35
        },
        "end": {
          "row": 279,
          "column": 41
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Choice>()(rule.choice_)",
        "start": {
          "row": 279,
          "column": 44
        },
        "end": {
          "row": 279,
          "column": 72
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Choice>()",
        "start": {
          "row": 279,
          "column": 44
        },
        "end": {
          "row": 279,
          "column": 58
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<Choice>",
        "start": {
          "row": 279,
          "column": 44
        },
        "end": {
          "row": 279,
          "column": 56
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 279,
          "column": 44
        },
        "end": {
          "row": 279,
          "column": 48
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Choice>",
        "start": {
          "row": 279,
          "column": 48
        },
        "end": {
          "row": 279,
          "column": 56
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 279,
          "column": 49
        },
        "end": {
          "row": 279,
          "column": 55
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Choice",
        "start": {
          "row": 279,
          "column": 49
        },
        "end": {
          "row": 279,
          "column": 55
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 279,
          "column": 56
        },
        "end": {
          "row": 279,
          "column": 58
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.choice_)",
        "start": {
          "row": 279,
          "column": 58
        },
        "end": {
          "row": 279,
          "column": 72
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.choice_",
        "start": {
          "row": 279,
          "column": 59
        },
        "end": {
          "row": 279,
          "column": 71
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 279,
          "column": 59
        },
        "end": {
          "row": 279,
          "column": 63
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "choice_",
        "start": {
          "row": 279,
          "column": 64
        },
        "end": {
          "row": 279,
          "column": 71
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::MetadataType: return result ^ hash<Metadata>()(rule.metadata_);",
        "start": {
          "row": 280,
          "column": 5
        },
        "end": {
          "row": 280,
          "column": 79
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::MetadataType",
        "start": {
          "row": 280,
          "column": 10
        },
        "end": {
          "row": 280,
          "column": 28
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 280,
          "column": 10
        },
        "end": {
          "row": 280,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "MetadataType",
        "start": {
          "row": 280,
          "column": 16
        },
        "end": {
          "row": 280,
          "column": 28
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<Metadata>()(rule.metadata_);",
        "start": {
          "row": 280,
          "column": 30
        },
        "end": {
          "row": 280,
          "column": 79
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<Metadata>()(rule.metadata_)",
        "start": {
          "row": 280,
          "column": 37
        },
        "end": {
          "row": 280,
          "column": 78
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 280,
          "column": 37
        },
        "end": {
          "row": 280,
          "column": 43
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Metadata>()(rule.metadata_)",
        "start": {
          "row": 280,
          "column": 46
        },
        "end": {
          "row": 280,
          "column": 78
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Metadata>()",
        "start": {
          "row": 280,
          "column": 46
        },
        "end": {
          "row": 280,
          "column": 62
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<Metadata>",
        "start": {
          "row": 280,
          "column": 46
        },
        "end": {
          "row": 280,
          "column": 60
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 280,
          "column": 46
        },
        "end": {
          "row": 280,
          "column": 50
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Metadata>",
        "start": {
          "row": 280,
          "column": 50
        },
        "end": {
          "row": 280,
          "column": 60
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Metadata",
        "start": {
          "row": 280,
          "column": 51
        },
        "end": {
          "row": 280,
          "column": 59
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Metadata",
        "start": {
          "row": 280,
          "column": 51
        },
        "end": {
          "row": 280,
          "column": 59
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 280,
          "column": 60
        },
        "end": {
          "row": 280,
          "column": 62
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.metadata_)",
        "start": {
          "row": 280,
          "column": 62
        },
        "end": {
          "row": 280,
          "column": 78
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.metadata_",
        "start": {
          "row": 280,
          "column": 63
        },
        "end": {
          "row": 280,
          "column": 77
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 280,
          "column": 63
        },
        "end": {
          "row": 280,
          "column": 67
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "metadata_",
        "start": {
          "row": 280,
          "column": 68
        },
        "end": {
          "row": 280,
          "column": 77
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::RepeatType: return result ^ hash<Repeat>()(rule.repeat_);",
        "start": {
          "row": 281,
          "column": 5
        },
        "end": {
          "row": 281,
          "column": 73
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::RepeatType",
        "start": {
          "row": 281,
          "column": 10
        },
        "end": {
          "row": 281,
          "column": 26
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 281,
          "column": 10
        },
        "end": {
          "row": 281,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "RepeatType",
        "start": {
          "row": 281,
          "column": 16
        },
        "end": {
          "row": 281,
          "column": 26
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<Repeat>()(rule.repeat_);",
        "start": {
          "row": 281,
          "column": 28
        },
        "end": {
          "row": 281,
          "column": 73
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<Repeat>()(rule.repeat_)",
        "start": {
          "row": 281,
          "column": 35
        },
        "end": {
          "row": 281,
          "column": 72
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 281,
          "column": 35
        },
        "end": {
          "row": 281,
          "column": 41
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Repeat>()(rule.repeat_)",
        "start": {
          "row": 281,
          "column": 44
        },
        "end": {
          "row": 281,
          "column": 72
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Repeat>()",
        "start": {
          "row": 281,
          "column": 44
        },
        "end": {
          "row": 281,
          "column": 58
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<Repeat>",
        "start": {
          "row": 281,
          "column": 44
        },
        "end": {
          "row": 281,
          "column": 56
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 281,
          "column": 44
        },
        "end": {
          "row": 281,
          "column": 48
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Repeat>",
        "start": {
          "row": 281,
          "column": 48
        },
        "end": {
          "row": 281,
          "column": 56
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 281,
          "column": 49
        },
        "end": {
          "row": 281,
          "column": 55
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Repeat",
        "start": {
          "row": 281,
          "column": 49
        },
        "end": {
          "row": 281,
          "column": 55
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 281,
          "column": 56
        },
        "end": {
          "row": 281,
          "column": 58
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.repeat_)",
        "start": {
          "row": 281,
          "column": 58
        },
        "end": {
          "row": 281,
          "column": 72
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.repeat_",
        "start": {
          "row": 281,
          "column": 59
        },
        "end": {
          "row": 281,
          "column": 71
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 281,
          "column": 59
        },
        "end": {
          "row": 281,
          "column": 63
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "repeat_",
        "start": {
          "row": 281,
          "column": 64
        },
        "end": {
          "row": 281,
          "column": 71
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "case Rule::SeqType: return result ^ hash<Seq>()(rule.seq_);",
        "start": {
          "row": 282,
          "column": 5
        },
        "end": {
          "row": 282,
          "column": 64
        }
      },
      {
        "kind": "qualified_identifier",
        "name": "query",
        "text": "Rule::SeqType",
        "start": {
          "row": 282,
          "column": 10
        },
        "end": {
          "row": 282,
          "column": 23
        }
      },
      {
        "kind": "namespace_identifier",
        "name": "query",
        "text": "Rule",
        "start": {
          "row": 282,
          "column": 10
        },
        "end": {
          "row": 282,
          "column": 14
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "SeqType",
        "start": {
          "row": 282,
          "column": 16
        },
        "end": {
          "row": 282,
          "column": 23
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<Seq>()(rule.seq_);",
        "start": {
          "row": 282,
          "column": 25
        },
        "end": {
          "row": 282,
          "column": 64
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<Seq>()(rule.seq_)",
        "start": {
          "row": 282,
          "column": 32
        },
        "end": {
          "row": 282,
          "column": 63
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 282,
          "column": 32
        },
        "end": {
          "row": 282,
          "column": 38
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Seq>()(rule.seq_)",
        "start": {
          "row": 282,
          "column": 41
        },
        "end": {
          "row": 282,
          "column": 63
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Seq>()",
        "start": {
          "row": 282,
          "column": 41
        },
        "end": {
          "row": 282,
          "column": 52
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<Seq>",
        "start": {
          "row": 282,
          "column": 41
        },
        "end": {
          "row": 282,
          "column": 50
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 282,
          "column": 41
        },
        "end": {
          "row": 282,
          "column": 45
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Seq>",
        "start": {
          "row": 282,
          "column": 45
        },
        "end": {
          "row": 282,
          "column": 50
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 282,
          "column": 46
        },
        "end": {
          "row": 282,
          "column": 49
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Seq",
        "start": {
          "row": 282,
          "column": 46
        },
        "end": {
          "row": 282,
          "column": 49
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 282,
          "column": 50
        },
        "end": {
          "row": 282,
          "column": 52
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.seq_)",
        "start": {
          "row": 282,
          "column": 52
        },
        "end": {
          "row": 282,
          "column": 63
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.seq_",
        "start": {
          "row": 282,
          "column": 53
        },
        "end": {
          "row": 282,
          "column": 62
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 282,
          "column": 53
        },
        "end": {
          "row": 282,
          "column": 57
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "seq_",
        "start": {
          "row": 282,
          "column": 58
        },
        "end": {
          "row": 282,
          "column": 62
        }
      },
      {
        "kind": "case_statement",
        "name": "query",
        "text": "default: return result ^ hash<Blank>()(rule.blank_);",
        "start": {
          "row": 283,
          "column": 5
        },
        "end": {
          "row": 283,
          "column": 57
        }
      },
      {
        "kind": "return_statement",
        "name": "query",
        "text": "return result ^ hash<Blank>()(rule.blank_);",
        "start": {
          "row": 283,
          "column": 14
        },
        "end": {
          "row": 283,
          "column": 57
        }
      },
      {
        "kind": "binary_expression",
        "name": "query",
        "text": "result ^ hash<Blank>()(rule.blank_)",
        "start": {
          "row": 283,
          "column": 21
        },
        "end": {
          "row": 283,
          "column": 56
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "result",
        "start": {
          "row": 283,
          "column": 21
        },
        "end": {
          "row": 283,
          "column": 27
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Blank>()(rule.blank_)",
        "start": {
          "row": 283,
          "column": 30
        },
        "end": {
          "row": 283,
          "column": 56
        }
      },
      {
        "kind": "call_expression",
        "name": "query",
        "text": "hash<Blank>()",
        "start": {
          "row": 283,
          "column": 30
        },
        "end": {
          "row": 283,
          "column": 43
        }
      },
      {
        "kind": "template_function",
        "name": "query",
        "text": "hash<Blank>",
        "start": {
          "row": 283,
          "column": 30
        },
        "end": {
          "row": 283,
          "column": 41
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "hash",
        "start": {
          "row": 283,
          "column": 30
        },
        "end": {
          "row": 283,
          "column": 34
        }
      },
      {
        "kind": "template_argument_list",
        "name": "query",
        "text": "<Blank>",
        "start": {
          "row": 283,
          "column": 34
        },
        "end": {
          "row": 283,
          "column": 41
        }
      },
      {
        "kind": "type_descriptor",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 283,
          "column": 35
        },
        "end": {
          "row": 283,
          "column": 40
        }
      },
      {
        "kind": "type_identifier",
        "name": "query",
        "text": "Blank",
        "start": {
          "row": 283,
          "column": 35
        },
        "end": {
          "row": 283,
          "column": 40
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "()",
        "start": {
          "row": 283,
          "column": 41
        },
        "end": {
          "row": 283,
          "column": 43
        }
      },
      {
        "kind": "argument_list",
        "name": "query",
        "text": "(rule.blank_)",
        "start": {
          "row": 283,
          "column": 43
        },
        "end": {
          "row": 283,
          "column": 56
        }
      },
      {
        "kind": "field_expression",
        "name": "query",
        "text": "rule.blank_",
        "start": {
          "row": 283,
          "column": 44
        },
        "end": {
          "row": 283,
          "column": 55
        }
      },
      {
        "kind": "identifier",
        "name": "query",
        "text": "rule",
        "start": {
          "row": 283,
          "column": 44
        },
        "end": {
          "row": 283,
          "column": 48
        }
      },
      {
        "kind": "field_identifier",
        "name": "query",
        "text": "blank_",
        "start": {
          "row": 283,
          "column": 49
        },
        "end": {
          "row": 283,
          "column": 55
        }
      },
      {
        "kind": "comment",
        "name": "query",
        "text": "// namespace std",
        "start": {
          "row": 287,
          "column": 4
        },
        "end": {
          "row": 287,
          "column": 20
        }
      }
    ]
  }
]
